[2mJan 15 20:18:35.873[0m [34mDEBUG[0m wombat_symx: Func param instr: IntValue { int_value: Value { name: "", address: 0x55cf68c941a0, is_const: false, is_null: false, is_undef: false, llvm_value: "i32 %0", llvm_type: "i32" } }
TEST 123 "i32 %0"
TEST 123 "  store i32 %0, i32* %x, align 4"
TEST 123 "  %x = alloca i32, align 4"
[2mJan 15 20:18:35.919[0m [34mDEBUG[0m wombat_symx: Function arg names: {"x": "%0"}
Backward Symbolic Execution in test1_abs::abs::ha2453f669d237dc0
[2mJan 15 20:18:35.920[0m [34mDEBUG[0m wombat_symx: Number of Nodes: 6
[2mJan 15 20:18:35.920[0m [34mDEBUG[0m wombat_symx: Arg count: 1
[2mJan 15 20:18:35.920[0m [34mDEBUG[0m wombat_symx: Basic Blocks:
[2mJan 15 20:18:35.920[0m [34mDEBUG[0m wombat_symx: 	Basic Block: "start"
[2mJan 15 20:18:35.920[0m [34mDEBUG[0m wombat_symx: 		is_cleanup: NO
[2mJan 15 20:18:35.920[0m [34mDEBUG[0m wombat_symx: 		Statement: "\"  %_2 = icmp slt i32 %0, 0\""
[2mJan 15 20:18:35.920[0m [34mDEBUG[0m wombat_symx: 		Statement: "\"  br i1 %_2, label %bb1, label %bb3\""
[2mJan 15 20:18:35.920[0m [34mDEBUG[0m wombat_symx: 		Last statement is a terminator
[2mJan 15 20:18:35.920[0m [34mDEBUG[0m wombat_symx: 	Basic Block: "bb3"
[2mJan 15 20:18:35.920[0m [34mDEBUG[0m wombat_symx: 		is_cleanup: NO
[2mJan 15 20:18:35.920[0m [34mDEBUG[0m wombat_symx: 		Statement: "\"  %x.0 = phi i32 [ %0, %start ], [ %_5.0, %bb1 ]\""
[2mJan 15 20:18:35.920[0m [34mDEBUG[0m wombat_symx: 		Statement: "\"  %_7 = icmp sge i32 %x.0, 0\""
[2mJan 15 20:18:35.920[0m [34mDEBUG[0m wombat_symx: 		Statement: "\"  %_6 = xor i1 %_7, true\""
[2mJan 15 20:18:35.920[0m [34mDEBUG[0m wombat_symx: 		Statement: "\"  br i1 %_6, label %bb4, label %bb5\""
[2mJan 15 20:18:35.920[0m [34mDEBUG[0m wombat_symx: 		Last statement is a terminator
[2mJan 15 20:18:35.920[0m [34mDEBUG[0m wombat_symx: 	Basic Block: "bb1"
[2mJan 15 20:18:35.920[0m [34mDEBUG[0m wombat_symx: 		is_cleanup: NO
[2mJan 15 20:18:35.920[0m [34mDEBUG[0m wombat_symx: 		Statement: "\"  %1 = call { i32, i1 } @llvm.smul.with.overflow.i32(i32 -1, i32 %0)\""
[2mJan 15 20:18:35.920[0m [34mDEBUG[0m wombat_symx: 		Statement: "\"  %_5.0 = extractvalue { i32, i1 } %1, 0\""
[2mJan 15 20:18:35.920[0m [34mDEBUG[0m wombat_symx: 		Statement: "\"  %_5.1 = extractvalue { i32, i1 } %1, 1\""
[2mJan 15 20:18:35.920[0m [34mDEBUG[0m wombat_symx: 		Statement: "\"  br i1 %_5.1, label %panic, label %bb3, !prof !3\""
[2mJan 15 20:18:35.921[0m [34mDEBUG[0m wombat_symx: 		Last statement is a terminator
[2mJan 15 20:18:35.921[0m [34mDEBUG[0m wombat_symx: 	Basic Block: "panic"
[2mJan 15 20:18:35.921[0m [34mDEBUG[0m wombat_symx: 		is_cleanup: YES
[2mJan 15 20:18:35.921[0m [34mDEBUG[0m wombat_symx: 		Statement: "\"  call void @_ZN4core9panicking5panic17h4241c5ccea17facaE([0 x i8]* noundef nonnull align 1 bitcast ([33 x i8]* @str.0 to [0 x i8]*), i64 33, %\\\"core::panic::location::Location\\\"* noundef align 8 dereferenceable(24) bitcast (<{ i8*, [16 x i8] }>* @alloc26 to %\\\"core::panic::location::Location\\\"*)) #7\""
[2mJan 15 20:18:35.921[0m [34mDEBUG[0m wombat_symx: 		Statement: "\"  unreachable\""
[2mJan 15 20:18:35.921[0m [34mDEBUG[0m wombat_symx: 		Last statement is a terminator
[2mJan 15 20:18:35.921[0m [34mDEBUG[0m wombat_symx: 	Basic Block: "bb5"
[2mJan 15 20:18:35.921[0m [34mDEBUG[0m wombat_symx: 		is_cleanup: NO
[2mJan 15 20:18:35.921[0m [34mDEBUG[0m wombat_symx: 		Statement: "\"  ret i32 %x.0\""
[2mJan 15 20:18:35.921[0m [34mDEBUG[0m wombat_symx: 		Last statement is a terminator
[2mJan 15 20:18:35.921[0m [34mDEBUG[0m wombat_symx: 	Basic Block: "bb4"
[2mJan 15 20:18:35.921[0m [34mDEBUG[0m wombat_symx: 		is_cleanup: YES
[2mJan 15 20:18:35.921[0m [34mDEBUG[0m wombat_symx: 		Statement: "\"  call void @_ZN4core9panicking5panic17h4241c5ccea17facaE([0 x i8]* noundef nonnull align 1 bitcast (<{ [24 x i8] }>* @alloc27 to [0 x i8]*), i64 24, %\\\"core::panic::location::Location\\\"* noundef align 8 dereferenceable(24) bitcast (<{ i8*, [16 x i8] }>* @alloc29 to %\\\"core::panic::location::Location\\\"*)) #7\""
[2mJan 15 20:18:35.921[0m [34mDEBUG[0m wombat_symx: 		Statement: "\"  unreachable\""
[2mJan 15 20:18:35.921[0m [34mDEBUG[0m wombat_symx: 		Last statement is a terminator
[2mJan 15 20:18:35.921[0m [34mDEBUG[0m wombat_symx: 
[2mJan 15 20:18:35.921[0m [34mDEBUG[0m wombat_symx: Start node: "start"
IF STATEMENT
terminator is InstructionValue { instruction_value: Value { name: "", address: 0x55cf68c97d80, is_const: false, is_null: false, is_undef: false, llvm_value: "  br i1 %_2, label %bb1, label %bb3", llvm_type: "void" } }
Operand 0 is Some(Left(IntValue(IntValue { int_value: Value { name: "_2", address: 0x55cf68c97cd0, is_const: false, is_null: false, is_undef: false, llvm_value: "  %_2 = icmp slt i32 %0, 0", llvm_type: "i1" } })))
Operand 1 is Some(Right(BasicBlock { address: 0x55cf68c97730, is_const: false, llvm_value: "\nbb3:                                              ; preds = %bb1, %start\n  %x.0 = phi i32 [ %0, %start ], [ %_5.0, %bb1 ]\n  %_7 = icmp sge i32 %x.0, 0\n  %_6 = xor i1 %_7, true\n  br i1 %_6, label %bb4, label %bb5\n", llvm_type: "label" }))
Operand 2 is Some(Right(BasicBlock { address: 0x55cf68c97780, is_const: false, llvm_value: "\nbb1:                                              ; preds = %start\n  %1 = call { i32, i1 } @llvm.smul.with.overflow.i32(i32 -1, i32 %0)\n  %_5.0 = extractvalue { i32, i1 } %1, 0\n  %_5.1 = extractvalue { i32, i1 } %1, 1\n  br i1 %_5.1, label %panic, label %bb3, !prof !3\n", llvm_type: "label" }))
IF STATEMENT
terminator is InstructionValue { instruction_value: Value { name: "", address: 0x55cf68c97fc0, is_const: false, is_null: false, is_undef: false, llvm_value: "  br i1 %_6, label %bb4, label %bb5", llvm_type: "void" } }
Operand 0 is Some(Left(IntValue(IntValue { int_value: Value { name: "_6", address: 0x55cf68c97f10, is_const: false, is_null: false, is_undef: false, llvm_value: "  %_6 = xor i1 %_7, true", llvm_type: "i1" } })))
Operand 1 is Some(Right(BasicBlock { address: 0x55cf68c97870, is_const: false, llvm_value: "\nbb5:                                              ; preds = %bb3\n  ret i32 %x.0\n", llvm_type: "label" }))
Operand 2 is Some(Right(BasicBlock { address: 0x55cf68c978c0, is_const: false, llvm_value: "\nbb4:                                              ; preds = %bb3\n  call void @_ZN4core9panicking5panic17h4241c5ccea17facaE([0 x i8]* noundef nonnull align 1 bitcast (<{ [24 x i8] }>* @alloc27 to [0 x i8]*), i64 24, %\"core::panic::location::Location\"* noundef align 8 dereferenceable(24) bitcast (<{ i8*, [16 x i8] }>* @alloc29 to %\"core::panic::location::Location\"*)) #7\n  unreachable\n", llvm_type: "label" }))
IF STATEMENT
terminator is InstructionValue { instruction_value: Value { name: "", address: 0x55cf68c98380, is_const: false, is_null: false, is_undef: false, llvm_value: "  br i1 %_5.1, label %panic, label %bb3, !prof !3", llvm_type: "void" } }
Operand 0 is Some(Left(IntValue(IntValue { int_value: Value { name: "_5.1", address: 0x55cf68c981f0, is_const: false, is_null: false, is_undef: false, llvm_value: "  %_5.1 = extractvalue { i32, i1 } %1, 1", llvm_type: "i1" } })))
Operand 1 is Some(Right(BasicBlock { address: 0x55cf68c97730, is_const: false, llvm_value: "\nbb3:                                              ; preds = %bb1, %start\n  %x.0 = phi i32 [ %0, %start ], [ %_5.0, %bb1 ]\n  %_7 = icmp sge i32 %x.0, 0\n  %_6 = xor i1 %_7, true\n  br i1 %_6, label %bb4, label %bb5\n", llvm_type: "label" }))
Operand 2 is Some(Right(BasicBlock { address: 0x55cf68c97820, is_const: false, llvm_value: "\npanic:                                            ; preds = %bb1\n  call void @_ZN4core9panicking5panic17h4241c5ccea17facaE([0 x i8]* noundef nonnull align 1 bitcast ([33 x i8]* @str.0 to [0 x i8]*), i64 33, %\"core::panic::location::Location\"* noundef align 8 dereferenceable(24) bitcast (<{ i8*, [16 x i8] }>* @alloc26 to %\"core::panic::location::Location\"*)) #7\n  unreachable\n", llvm_type: "label" }))
[2mJan 15 20:18:35.921[0m [34mDEBUG[0m wombat_symx: 	Successor to start node: "bb3"
[2mJan 15 20:18:35.921[0m [34mDEBUG[0m wombat_symx: 	Successor to start node: "bb1"
IF STATEMENT
terminator is InstructionValue { instruction_value: Value { name: "", address: 0x55cf68c97d80, is_const: false, is_null: false, is_undef: false, llvm_value: "  br i1 %_2, label %bb1, label %bb3", llvm_type: "void" } }
Operand 0 is Some(Left(IntValue(IntValue { int_value: Value { name: "_2", address: 0x55cf68c97cd0, is_const: false, is_null: false, is_undef: false, llvm_value: "  %_2 = icmp slt i32 %0, 0", llvm_type: "i1" } })))
Operand 1 is Some(Right(BasicBlock { address: 0x55cf68c97730, is_const: false, llvm_value: "\nbb3:                                              ; preds = %bb1, %start\n  %x.0 = phi i32 [ %0, %start ], [ %_5.0, %bb1 ]\n  %_7 = icmp sge i32 %x.0, 0\n  %_6 = xor i1 %_7, true\n  br i1 %_6, label %bb4, label %bb5\n", llvm_type: "label" }))
Operand 2 is Some(Right(BasicBlock { address: 0x55cf68c97780, is_const: false, llvm_value: "\nbb1:                                              ; preds = %start\n  %1 = call { i32, i1 } @llvm.smul.with.overflow.i32(i32 -1, i32 %0)\n  %_5.0 = extractvalue { i32, i1 } %1, 0\n  %_5.1 = extractvalue { i32, i1 } %1, 1\n  br i1 %_5.1, label %panic, label %bb3, !prof !3\n", llvm_type: "label" }))
IF STATEMENT
terminator is InstructionValue { instruction_value: Value { name: "", address: 0x55cf68c97fc0, is_const: false, is_null: false, is_undef: false, llvm_value: "  br i1 %_6, label %bb4, label %bb5", llvm_type: "void" } }
Operand 0 is Some(Left(IntValue(IntValue { int_value: Value { name: "_6", address: 0x55cf68c97f10, is_const: false, is_null: false, is_undef: false, llvm_value: "  %_6 = xor i1 %_7, true", llvm_type: "i1" } })))
Operand 1 is Some(Right(BasicBlock { address: 0x55cf68c97870, is_const: false, llvm_value: "\nbb5:                                              ; preds = %bb3\n  ret i32 %x.0\n", llvm_type: "label" }))
Operand 2 is Some(Right(BasicBlock { address: 0x55cf68c978c0, is_const: false, llvm_value: "\nbb4:                                              ; preds = %bb3\n  call void @_ZN4core9panicking5panic17h4241c5ccea17facaE([0 x i8]* noundef nonnull align 1 bitcast (<{ [24 x i8] }>* @alloc27 to [0 x i8]*), i64 24, %\"core::panic::location::Location\"* noundef align 8 dereferenceable(24) bitcast (<{ i8*, [16 x i8] }>* @alloc29 to %\"core::panic::location::Location\"*)) #7\n  unreachable\n", llvm_type: "label" }))
IF STATEMENT
terminator is InstructionValue { instruction_value: Value { name: "", address: 0x55cf68c98380, is_const: false, is_null: false, is_undef: false, llvm_value: "  br i1 %_5.1, label %panic, label %bb3, !prof !3", llvm_type: "void" } }
Operand 0 is Some(Left(IntValue(IntValue { int_value: Value { name: "_5.1", address: 0x55cf68c981f0, is_const: false, is_null: false, is_undef: false, llvm_value: "  %_5.1 = extractvalue { i32, i1 } %1, 1", llvm_type: "i1" } })))
Operand 1 is Some(Right(BasicBlock { address: 0x55cf68c97730, is_const: false, llvm_value: "\nbb3:                                              ; preds = %bb1, %start\n  %x.0 = phi i32 [ %0, %start ], [ %_5.0, %bb1 ]\n  %_7 = icmp sge i32 %x.0, 0\n  %_6 = xor i1 %_7, true\n  br i1 %_6, label %bb4, label %bb5\n", llvm_type: "label" }))
Operand 2 is Some(Right(BasicBlock { address: 0x55cf68c97820, is_const: false, llvm_value: "\npanic:                                            ; preds = %bb1\n  call void @_ZN4core9panicking5panic17h4241c5ccea17facaE([0 x i8]* noundef nonnull align 1 bitcast ([33 x i8]* @str.0 to [0 x i8]*), i64 33, %\"core::panic::location::Location\"* noundef align 8 dereferenceable(24) bitcast (<{ i8*, [16 x i8] }>* @alloc26 to %\"core::panic::location::Location\"*)) #7\n  unreachable\n", llvm_type: "label" }))
[2mJan 15 20:18:35.922[0m [34mDEBUG[0m wombat_symx: Forward edges:	{"start": {"bb1", "bb3"}, "bb5": {"common_end"}, "bb4": {"common_end"}, "bb1": {"panic", "bb3"}, "panic": {"common_end"}, "bb3": {"bb4", "bb5"}}
IF STATEMENT
terminator is InstructionValue { instruction_value: Value { name: "", address: 0x55cf68c97d80, is_const: false, is_null: false, is_undef: false, llvm_value: "  br i1 %_2, label %bb1, label %bb3", llvm_type: "void" } }
Operand 0 is Some(Left(IntValue(IntValue { int_value: Value { name: "_2", address: 0x55cf68c97cd0, is_const: false, is_null: false, is_undef: false, llvm_value: "  %_2 = icmp slt i32 %0, 0", llvm_type: "i1" } })))
Operand 1 is Some(Right(BasicBlock { address: 0x55cf68c97730, is_const: false, llvm_value: "\nbb3:                                              ; preds = %bb1, %start\n  %x.0 = phi i32 [ %0, %start ], [ %_5.0, %bb1 ]\n  %_7 = icmp sge i32 %x.0, 0\n  %_6 = xor i1 %_7, true\n  br i1 %_6, label %bb4, label %bb5\n", llvm_type: "label" }))
Operand 2 is Some(Right(BasicBlock { address: 0x55cf68c97780, is_const: false, llvm_value: "\nbb1:                                              ; preds = %start\n  %1 = call { i32, i1 } @llvm.smul.with.overflow.i32(i32 -1, i32 %0)\n  %_5.0 = extractvalue { i32, i1 } %1, 0\n  %_5.1 = extractvalue { i32, i1 } %1, 1\n  br i1 %_5.1, label %panic, label %bb3, !prof !3\n", llvm_type: "label" }))
IF STATEMENT
terminator is InstructionValue { instruction_value: Value { name: "", address: 0x55cf68c97fc0, is_const: false, is_null: false, is_undef: false, llvm_value: "  br i1 %_6, label %bb4, label %bb5", llvm_type: "void" } }
Operand 0 is Some(Left(IntValue(IntValue { int_value: Value { name: "_6", address: 0x55cf68c97f10, is_const: false, is_null: false, is_undef: false, llvm_value: "  %_6 = xor i1 %_7, true", llvm_type: "i1" } })))
Operand 1 is Some(Right(BasicBlock { address: 0x55cf68c97870, is_const: false, llvm_value: "\nbb5:                                              ; preds = %bb3\n  ret i32 %x.0\n", llvm_type: "label" }))
Operand 2 is Some(Right(BasicBlock { address: 0x55cf68c978c0, is_const: false, llvm_value: "\nbb4:                                              ; preds = %bb3\n  call void @_ZN4core9panicking5panic17h4241c5ccea17facaE([0 x i8]* noundef nonnull align 1 bitcast (<{ [24 x i8] }>* @alloc27 to [0 x i8]*), i64 24, %\"core::panic::location::Location\"* noundef align 8 dereferenceable(24) bitcast (<{ i8*, [16 x i8] }>* @alloc29 to %\"core::panic::location::Location\"*)) #7\n  unreachable\n", llvm_type: "label" }))
IF STATEMENT
terminator is InstructionValue { instruction_value: Value { name: "", address: 0x55cf68c98380, is_const: false, is_null: false, is_undef: false, llvm_value: "  br i1 %_5.1, label %panic, label %bb3, !prof !3", llvm_type: "void" } }
Operand 0 is Some(Left(IntValue(IntValue { int_value: Value { name: "_5.1", address: 0x55cf68c981f0, is_const: false, is_null: false, is_undef: false, llvm_value: "  %_5.1 = extractvalue { i32, i1 } %1, 1", llvm_type: "i1" } })))
Operand 1 is Some(Right(BasicBlock { address: 0x55cf68c97730, is_const: false, llvm_value: "\nbb3:                                              ; preds = %bb1, %start\n  %x.0 = phi i32 [ %0, %start ], [ %_5.0, %bb1 ]\n  %_7 = icmp sge i32 %x.0, 0\n  %_6 = xor i1 %_7, true\n  br i1 %_6, label %bb4, label %bb5\n", llvm_type: "label" }))
Operand 2 is Some(Right(BasicBlock { address: 0x55cf68c97820, is_const: false, llvm_value: "\npanic:                                            ; preds = %bb1\n  call void @_ZN4core9panicking5panic17h4241c5ccea17facaE([0 x i8]* noundef nonnull align 1 bitcast ([33 x i8]* @str.0 to [0 x i8]*), i64 33, %\"core::panic::location::Location\"* noundef align 8 dereferenceable(24) bitcast (<{ i8*, [16 x i8] }>* @alloc26 to %\"core::panic::location::Location\"*)) #7\n  unreachable\n", llvm_type: "label" }))
[2mJan 15 20:18:35.922[0m [34mDEBUG[0m wombat_symx: Backward edges:	{"bb4": {"bb3"}, "bb3": {"bb1", "start"}, "common_end": {"bb5", "panic", "bb4"}, "panic": {"bb1"}, "bb1": {"start"}, "start": {}, "bb5": {"bb3"}}
IF STATEMENT
terminator is InstructionValue { instruction_value: Value { name: "", address: 0x55cf68c97d80, is_const: false, is_null: false, is_undef: false, llvm_value: "  br i1 %_2, label %bb1, label %bb3", llvm_type: "void" } }
Operand 0 is Some(Left(IntValue(IntValue { int_value: Value { name: "_2", address: 0x55cf68c97cd0, is_const: false, is_null: false, is_undef: false, llvm_value: "  %_2 = icmp slt i32 %0, 0", llvm_type: "i1" } })))
Operand 1 is Some(Right(BasicBlock { address: 0x55cf68c97730, is_const: false, llvm_value: "\nbb3:                                              ; preds = %bb1, %start\n  %x.0 = phi i32 [ %0, %start ], [ %_5.0, %bb1 ]\n  %_7 = icmp sge i32 %x.0, 0\n  %_6 = xor i1 %_7, true\n  br i1 %_6, label %bb4, label %bb5\n", llvm_type: "label" }))
Operand 2 is Some(Right(BasicBlock { address: 0x55cf68c97780, is_const: false, llvm_value: "\nbb1:                                              ; preds = %start\n  %1 = call { i32, i1 } @llvm.smul.with.overflow.i32(i32 -1, i32 %0)\n  %_5.0 = extractvalue { i32, i1 } %1, 0\n  %_5.1 = extractvalue { i32, i1 } %1, 1\n  br i1 %_5.1, label %panic, label %bb3, !prof !3\n", llvm_type: "label" }))
IF STATEMENT
terminator is InstructionValue { instruction_value: Value { name: "", address: 0x55cf68c97fc0, is_const: false, is_null: false, is_undef: false, llvm_value: "  br i1 %_6, label %bb4, label %bb5", llvm_type: "void" } }
Operand 0 is Some(Left(IntValue(IntValue { int_value: Value { name: "_6", address: 0x55cf68c97f10, is_const: false, is_null: false, is_undef: false, llvm_value: "  %_6 = xor i1 %_7, true", llvm_type: "i1" } })))
Operand 1 is Some(Right(BasicBlock { address: 0x55cf68c97870, is_const: false, llvm_value: "\nbb5:                                              ; preds = %bb3\n  ret i32 %x.0\n", llvm_type: "label" }))
Operand 2 is Some(Right(BasicBlock { address: 0x55cf68c978c0, is_const: false, llvm_value: "\nbb4:                                              ; preds = %bb3\n  call void @_ZN4core9panicking5panic17h4241c5ccea17facaE([0 x i8]* noundef nonnull align 1 bitcast (<{ [24 x i8] }>* @alloc27 to [0 x i8]*), i64 24, %\"core::panic::location::Location\"* noundef align 8 dereferenceable(24) bitcast (<{ i8*, [16 x i8] }>* @alloc29 to %\"core::panic::location::Location\"*)) #7\n  unreachable\n", llvm_type: "label" }))
IF STATEMENT
terminator is InstructionValue { instruction_value: Value { name: "", address: 0x55cf68c98380, is_const: false, is_null: false, is_undef: false, llvm_value: "  br i1 %_5.1, label %panic, label %bb3, !prof !3", llvm_type: "void" } }
Operand 0 is Some(Left(IntValue(IntValue { int_value: Value { name: "_5.1", address: 0x55cf68c981f0, is_const: false, is_null: false, is_undef: false, llvm_value: "  %_5.1 = extractvalue { i32, i1 } %1, 1", llvm_type: "i1" } })))
Operand 1 is Some(Right(BasicBlock { address: 0x55cf68c97730, is_const: false, llvm_value: "\nbb3:                                              ; preds = %bb1, %start\n  %x.0 = phi i32 [ %0, %start ], [ %_5.0, %bb1 ]\n  %_7 = icmp sge i32 %x.0, 0\n  %_6 = xor i1 %_7, true\n  br i1 %_6, label %bb4, label %bb5\n", llvm_type: "label" }))
Operand 2 is Some(Right(BasicBlock { address: 0x55cf68c97820, is_const: false, llvm_value: "\npanic:                                            ; preds = %bb1\n  call void @_ZN4core9panicking5panic17h4241c5ccea17facaE([0 x i8]* noundef nonnull align 1 bitcast ([33 x i8]* @str.0 to [0 x i8]*), i64 33, %\"core::panic::location::Location\"* noundef align 8 dereferenceable(24) bitcast (<{ i8*, [16 x i8] }>* @alloc26 to %\"core::panic::location::Location\"*)) #7\n  unreachable\n", llvm_type: "label" }))
IF STATEMENT
terminator is InstructionValue { instruction_value: Value { name: "", address: 0x55cf68c97d80, is_const: false, is_null: false, is_undef: false, llvm_value: "  br i1 %_2, label %bb1, label %bb3", llvm_type: "void" } }
Operand 0 is Some(Left(IntValue(IntValue { int_value: Value { name: "_2", address: 0x55cf68c97cd0, is_const: false, is_null: false, is_undef: false, llvm_value: "  %_2 = icmp slt i32 %0, 0", llvm_type: "i1" } })))
Operand 1 is Some(Right(BasicBlock { address: 0x55cf68c97730, is_const: false, llvm_value: "\nbb3:                                              ; preds = %bb1, %start\n  %x.0 = phi i32 [ %0, %start ], [ %_5.0, %bb1 ]\n  %_7 = icmp sge i32 %x.0, 0\n  %_6 = xor i1 %_7, true\n  br i1 %_6, label %bb4, label %bb5\n", llvm_type: "label" }))
Operand 2 is Some(Right(BasicBlock { address: 0x55cf68c97780, is_const: false, llvm_value: "\nbb1:                                              ; preds = %start\n  %1 = call { i32, i1 } @llvm.smul.with.overflow.i32(i32 -1, i32 %0)\n  %_5.0 = extractvalue { i32, i1 } %1, 0\n  %_5.1 = extractvalue { i32, i1 } %1, 1\n  br i1 %_5.1, label %panic, label %bb3, !prof !3\n", llvm_type: "label" }))
IF STATEMENT
terminator is InstructionValue { instruction_value: Value { name: "", address: 0x55cf68c97fc0, is_const: false, is_null: false, is_undef: false, llvm_value: "  br i1 %_6, label %bb4, label %bb5", llvm_type: "void" } }
Operand 0 is Some(Left(IntValue(IntValue { int_value: Value { name: "_6", address: 0x55cf68c97f10, is_const: false, is_null: false, is_undef: false, llvm_value: "  %_6 = xor i1 %_7, true", llvm_type: "i1" } })))
Operand 1 is Some(Right(BasicBlock { address: 0x55cf68c97870, is_const: false, llvm_value: "\nbb5:                                              ; preds = %bb3\n  ret i32 %x.0\n", llvm_type: "label" }))
Operand 2 is Some(Right(BasicBlock { address: 0x55cf68c978c0, is_const: false, llvm_value: "\nbb4:                                              ; preds = %bb3\n  call void @_ZN4core9panicking5panic17h4241c5ccea17facaE([0 x i8]* noundef nonnull align 1 bitcast (<{ [24 x i8] }>* @alloc27 to [0 x i8]*), i64 24, %\"core::panic::location::Location\"* noundef align 8 dereferenceable(24) bitcast (<{ i8*, [16 x i8] }>* @alloc29 to %\"core::panic::location::Location\"*)) #7\n  unreachable\n", llvm_type: "label" }))
IF STATEMENT
terminator is InstructionValue { instruction_value: Value { name: "", address: 0x55cf68c98380, is_const: false, is_null: false, is_undef: false, llvm_value: "  br i1 %_5.1, label %panic, label %bb3, !prof !3", llvm_type: "void" } }
Operand 0 is Some(Left(IntValue(IntValue { int_value: Value { name: "_5.1", address: 0x55cf68c981f0, is_const: false, is_null: false, is_undef: false, llvm_value: "  %_5.1 = extractvalue { i32, i1 } %1, 1", llvm_type: "i1" } })))
Operand 1 is Some(Right(BasicBlock { address: 0x55cf68c97730, is_const: false, llvm_value: "\nbb3:                                              ; preds = %bb1, %start\n  %x.0 = phi i32 [ %0, %start ], [ %_5.0, %bb1 ]\n  %_7 = icmp sge i32 %x.0, 0\n  %_6 = xor i1 %_7, true\n  br i1 %_6, label %bb4, label %bb5\n", llvm_type: "label" }))
Operand 2 is Some(Right(BasicBlock { address: 0x55cf68c97820, is_const: false, llvm_value: "\npanic:                                            ; preds = %bb1\n  call void @_ZN4core9panicking5panic17h4241c5ccea17facaE([0 x i8]* noundef nonnull align 1 bitcast ([33 x i8]* @str.0 to [0 x i8]*), i64 33, %\"core::panic::location::Location\"* noundef align 8 dereferenceable(24) bitcast (<{ i8*, [16 x i8] }>* @alloc26 to %\"core::panic::location::Location\"*)) #7\n  unreachable\n", llvm_type: "label" }))
[2mJan 15 20:18:35.923[0m [34mDEBUG[0m wombat_symx: Forward sorted nodes:	["start", "bb1", "panic", "bb3", "bb5", "bb4", "common_end"]
IF STATEMENT
terminator is InstructionValue { instruction_value: Value { name: "", address: 0x55cf68c97d80, is_const: false, is_null: false, is_undef: false, llvm_value: "  br i1 %_2, label %bb1, label %bb3", llvm_type: "void" } }
Operand 0 is Some(Left(IntValue(IntValue { int_value: Value { name: "_2", address: 0x55cf68c97cd0, is_const: false, is_null: false, is_undef: false, llvm_value: "  %_2 = icmp slt i32 %0, 0", llvm_type: "i1" } })))
Operand 1 is Some(Right(BasicBlock { address: 0x55cf68c97730, is_const: false, llvm_value: "\nbb3:                                              ; preds = %bb1, %start\n  %x.0 = phi i32 [ %0, %start ], [ %_5.0, %bb1 ]\n  %_7 = icmp sge i32 %x.0, 0\n  %_6 = xor i1 %_7, true\n  br i1 %_6, label %bb4, label %bb5\n", llvm_type: "label" }))
Operand 2 is Some(Right(BasicBlock { address: 0x55cf68c97780, is_const: false, llvm_value: "\nbb1:                                              ; preds = %start\n  %1 = call { i32, i1 } @llvm.smul.with.overflow.i32(i32 -1, i32 %0)\n  %_5.0 = extractvalue { i32, i1 } %1, 0\n  %_5.1 = extractvalue { i32, i1 } %1, 1\n  br i1 %_5.1, label %panic, label %bb3, !prof !3\n", llvm_type: "label" }))
IF STATEMENT
terminator is InstructionValue { instruction_value: Value { name: "", address: 0x55cf68c97fc0, is_const: false, is_null: false, is_undef: false, llvm_value: "  br i1 %_6, label %bb4, label %bb5", llvm_type: "void" } }
Operand 0 is Some(Left(IntValue(IntValue { int_value: Value { name: "_6", address: 0x55cf68c97f10, is_const: false, is_null: false, is_undef: false, llvm_value: "  %_6 = xor i1 %_7, true", llvm_type: "i1" } })))
Operand 1 is Some(Right(BasicBlock { address: 0x55cf68c97870, is_const: false, llvm_value: "\nbb5:                                              ; preds = %bb3\n  ret i32 %x.0\n", llvm_type: "label" }))
Operand 2 is Some(Right(BasicBlock { address: 0x55cf68c978c0, is_const: false, llvm_value: "\nbb4:                                              ; preds = %bb3\n  call void @_ZN4core9panicking5panic17h4241c5ccea17facaE([0 x i8]* noundef nonnull align 1 bitcast (<{ [24 x i8] }>* @alloc27 to [0 x i8]*), i64 24, %\"core::panic::location::Location\"* noundef align 8 dereferenceable(24) bitcast (<{ i8*, [16 x i8] }>* @alloc29 to %\"core::panic::location::Location\"*)) #7\n  unreachable\n", llvm_type: "label" }))
IF STATEMENT
terminator is InstructionValue { instruction_value: Value { name: "", address: 0x55cf68c98380, is_const: false, is_null: false, is_undef: false, llvm_value: "  br i1 %_5.1, label %panic, label %bb3, !prof !3", llvm_type: "void" } }
Operand 0 is Some(Left(IntValue(IntValue { int_value: Value { name: "_5.1", address: 0x55cf68c981f0, is_const: false, is_null: false, is_undef: false, llvm_value: "  %_5.1 = extractvalue { i32, i1 } %1, 1", llvm_type: "i1" } })))
Operand 1 is Some(Right(BasicBlock { address: 0x55cf68c97730, is_const: false, llvm_value: "\nbb3:                                              ; preds = %bb1, %start\n  %x.0 = phi i32 [ %0, %start ], [ %_5.0, %bb1 ]\n  %_7 = icmp sge i32 %x.0, 0\n  %_6 = xor i1 %_7, true\n  br i1 %_6, label %bb4, label %bb5\n", llvm_type: "label" }))
Operand 2 is Some(Right(BasicBlock { address: 0x55cf68c97820, is_const: false, llvm_value: "\npanic:                                            ; preds = %bb1\n  call void @_ZN4core9panicking5panic17h4241c5ccea17facaE([0 x i8]* noundef nonnull align 1 bitcast ([33 x i8]* @str.0 to [0 x i8]*), i64 33, %\"core::panic::location::Location\"* noundef align 8 dereferenceable(24) bitcast (<{ i8*, [16 x i8] }>* @alloc26 to %\"core::panic::location::Location\"*)) #7\n  unreachable\n", llvm_type: "label" }))
IF STATEMENT
terminator is InstructionValue { instruction_value: Value { name: "", address: 0x55cf68c97d80, is_const: false, is_null: false, is_undef: false, llvm_value: "  br i1 %_2, label %bb1, label %bb3", llvm_type: "void" } }
Operand 0 is Some(Left(IntValue(IntValue { int_value: Value { name: "_2", address: 0x55cf68c97cd0, is_const: false, is_null: false, is_undef: false, llvm_value: "  %_2 = icmp slt i32 %0, 0", llvm_type: "i1" } })))
Operand 1 is Some(Right(BasicBlock { address: 0x55cf68c97730, is_const: false, llvm_value: "\nbb3:                                              ; preds = %bb1, %start\n  %x.0 = phi i32 [ %0, %start ], [ %_5.0, %bb1 ]\n  %_7 = icmp sge i32 %x.0, 0\n  %_6 = xor i1 %_7, true\n  br i1 %_6, label %bb4, label %bb5\n", llvm_type: "label" }))
Operand 2 is Some(Right(BasicBlock { address: 0x55cf68c97780, is_const: false, llvm_value: "\nbb1:                                              ; preds = %start\n  %1 = call { i32, i1 } @llvm.smul.with.overflow.i32(i32 -1, i32 %0)\n  %_5.0 = extractvalue { i32, i1 } %1, 0\n  %_5.1 = extractvalue { i32, i1 } %1, 1\n  br i1 %_5.1, label %panic, label %bb3, !prof !3\n", llvm_type: "label" }))
IF STATEMENT
terminator is InstructionValue { instruction_value: Value { name: "", address: 0x55cf68c97fc0, is_const: false, is_null: false, is_undef: false, llvm_value: "  br i1 %_6, label %bb4, label %bb5", llvm_type: "void" } }
Operand 0 is Some(Left(IntValue(IntValue { int_value: Value { name: "_6", address: 0x55cf68c97f10, is_const: false, is_null: false, is_undef: false, llvm_value: "  %_6 = xor i1 %_7, true", llvm_type: "i1" } })))
Operand 1 is Some(Right(BasicBlock { address: 0x55cf68c97870, is_const: false, llvm_value: "\nbb5:                                              ; preds = %bb3\n  ret i32 %x.0\n", llvm_type: "label" }))
Operand 2 is Some(Right(BasicBlock { address: 0x55cf68c978c0, is_const: false, llvm_value: "\nbb4:                                              ; preds = %bb3\n  call void @_ZN4core9panicking5panic17h4241c5ccea17facaE([0 x i8]* noundef nonnull align 1 bitcast (<{ [24 x i8] }>* @alloc27 to [0 x i8]*), i64 24, %\"core::panic::location::Location\"* noundef align 8 dereferenceable(24) bitcast (<{ i8*, [16 x i8] }>* @alloc29 to %\"core::panic::location::Location\"*)) #7\n  unreachable\n", llvm_type: "label" }))
IF STATEMENT
terminator is InstructionValue { instruction_value: Value { name: "", address: 0x55cf68c98380, is_const: false, is_null: false, is_undef: false, llvm_value: "  br i1 %_5.1, label %panic, label %bb3, !prof !3", llvm_type: "void" } }
Operand 0 is Some(Left(IntValue(IntValue { int_value: Value { name: "_5.1", address: 0x55cf68c981f0, is_const: false, is_null: false, is_undef: false, llvm_value: "  %_5.1 = extractvalue { i32, i1 } %1, 1", llvm_type: "i1" } })))
Operand 1 is Some(Right(BasicBlock { address: 0x55cf68c97730, is_const: false, llvm_value: "\nbb3:                                              ; preds = %bb1, %start\n  %x.0 = phi i32 [ %0, %start ], [ %_5.0, %bb1 ]\n  %_7 = icmp sge i32 %x.0, 0\n  %_6 = xor i1 %_7, true\n  br i1 %_6, label %bb4, label %bb5\n", llvm_type: "label" }))
Operand 2 is Some(Right(BasicBlock { address: 0x55cf68c97820, is_const: false, llvm_value: "\npanic:                                            ; preds = %bb1\n  call void @_ZN4core9panicking5panic17h4241c5ccea17facaE([0 x i8]* noundef nonnull align 1 bitcast ([33 x i8]* @str.0 to [0 x i8]*), i64 33, %\"core::panic::location::Location\"* noundef align 8 dereferenceable(24) bitcast (<{ i8*, [16 x i8] }>* @alloc26 to %\"core::panic::location::Location\"*)) #7\n  unreachable\n", llvm_type: "label" }))
[2mJan 15 20:18:35.924[0m [34mDEBUG[0m wombat_symx: Backward sorted nodes:	["common_end", "bb4", "bb5", "bb3", "panic", "bb1", "start"]
IF STATEMENT
terminator is InstructionValue { instruction_value: Value { name: "", address: 0x55cf68c97d80, is_const: false, is_null: false, is_undef: false, llvm_value: "  br i1 %_2, label %bb1, label %bb3", llvm_type: "void" } }
Operand 0 is Some(Left(IntValue(IntValue { int_value: Value { name: "_2", address: 0x55cf68c97cd0, is_const: false, is_null: false, is_undef: false, llvm_value: "  %_2 = icmp slt i32 %0, 0", llvm_type: "i1" } })))
Operand 1 is Some(Right(BasicBlock { address: 0x55cf68c97730, is_const: false, llvm_value: "\nbb3:                                              ; preds = %bb1, %start\n  %x.0 = phi i32 [ %0, %start ], [ %_5.0, %bb1 ]\n  %_7 = icmp sge i32 %x.0, 0\n  %_6 = xor i1 %_7, true\n  br i1 %_6, label %bb4, label %bb5\n", llvm_type: "label" }))
Operand 2 is Some(Right(BasicBlock { address: 0x55cf68c97780, is_const: false, llvm_value: "\nbb1:                                              ; preds = %start\n  %1 = call { i32, i1 } @llvm.smul.with.overflow.i32(i32 -1, i32 %0)\n  %_5.0 = extractvalue { i32, i1 } %1, 0\n  %_5.1 = extractvalue { i32, i1 } %1, 1\n  br i1 %_5.1, label %panic, label %bb3, !prof !3\n", llvm_type: "label" }))
IF STATEMENT
terminator is InstructionValue { instruction_value: Value { name: "", address: 0x55cf68c97fc0, is_const: false, is_null: false, is_undef: false, llvm_value: "  br i1 %_6, label %bb4, label %bb5", llvm_type: "void" } }
Operand 0 is Some(Left(IntValue(IntValue { int_value: Value { name: "_6", address: 0x55cf68c97f10, is_const: false, is_null: false, is_undef: false, llvm_value: "  %_6 = xor i1 %_7, true", llvm_type: "i1" } })))
Operand 1 is Some(Right(BasicBlock { address: 0x55cf68c97870, is_const: false, llvm_value: "\nbb5:                                              ; preds = %bb3\n  ret i32 %x.0\n", llvm_type: "label" }))
Operand 2 is Some(Right(BasicBlock { address: 0x55cf68c978c0, is_const: false, llvm_value: "\nbb4:                                              ; preds = %bb3\n  call void @_ZN4core9panicking5panic17h4241c5ccea17facaE([0 x i8]* noundef nonnull align 1 bitcast (<{ [24 x i8] }>* @alloc27 to [0 x i8]*), i64 24, %\"core::panic::location::Location\"* noundef align 8 dereferenceable(24) bitcast (<{ i8*, [16 x i8] }>* @alloc29 to %\"core::panic::location::Location\"*)) #7\n  unreachable\n", llvm_type: "label" }))
IF STATEMENT
terminator is InstructionValue { instruction_value: Value { name: "", address: 0x55cf68c98380, is_const: false, is_null: false, is_undef: false, llvm_value: "  br i1 %_5.1, label %panic, label %bb3, !prof !3", llvm_type: "void" } }
Operand 0 is Some(Left(IntValue(IntValue { int_value: Value { name: "_5.1", address: 0x55cf68c981f0, is_const: false, is_null: false, is_undef: false, llvm_value: "  %_5.1 = extractvalue { i32, i1 } %1, 1", llvm_type: "i1" } })))
Operand 1 is Some(Right(BasicBlock { address: 0x55cf68c97730, is_const: false, llvm_value: "\nbb3:                                              ; preds = %bb1, %start\n  %x.0 = phi i32 [ %0, %start ], [ %_5.0, %bb1 ]\n  %_7 = icmp sge i32 %x.0, 0\n  %_6 = xor i1 %_7, true\n  br i1 %_6, label %bb4, label %bb5\n", llvm_type: "label" }))
Operand 2 is Some(Right(BasicBlock { address: 0x55cf68c97820, is_const: false, llvm_value: "\npanic:                                            ; preds = %bb1\n  call void @_ZN4core9panicking5panic17h4241c5ccea17facaE([0 x i8]* noundef nonnull align 1 bitcast ([33 x i8]* @str.0 to [0 x i8]*), i64 33, %\"core::panic::location::Location\"* noundef align 8 dereferenceable(24) bitcast (<{ i8*, [16 x i8] }>* @alloc26 to %\"core::panic::location::Location\"*)) #7\n  unreachable\n", llvm_type: "label" }))
IF STATEMENT
terminator is InstructionValue { instruction_value: Value { name: "", address: 0x55cf68c97d80, is_const: false, is_null: false, is_undef: false, llvm_value: "  br i1 %_2, label %bb1, label %bb3", llvm_type: "void" } }
Operand 0 is Some(Left(IntValue(IntValue { int_value: Value { name: "_2", address: 0x55cf68c97cd0, is_const: false, is_null: false, is_undef: false, llvm_value: "  %_2 = icmp slt i32 %0, 0", llvm_type: "i1" } })))
Operand 1 is Some(Right(BasicBlock { address: 0x55cf68c97730, is_const: false, llvm_value: "\nbb3:                                              ; preds = %bb1, %start\n  %x.0 = phi i32 [ %0, %start ], [ %_5.0, %bb1 ]\n  %_7 = icmp sge i32 %x.0, 0\n  %_6 = xor i1 %_7, true\n  br i1 %_6, label %bb4, label %bb5\n", llvm_type: "label" }))
Operand 2 is Some(Right(BasicBlock { address: 0x55cf68c97780, is_const: false, llvm_value: "\nbb1:                                              ; preds = %start\n  %1 = call { i32, i1 } @llvm.smul.with.overflow.i32(i32 -1, i32 %0)\n  %_5.0 = extractvalue { i32, i1 } %1, 0\n  %_5.1 = extractvalue { i32, i1 } %1, 1\n  br i1 %_5.1, label %panic, label %bb3, !prof !3\n", llvm_type: "label" }))
IF STATEMENT
terminator is InstructionValue { instruction_value: Value { name: "", address: 0x55cf68c97fc0, is_const: false, is_null: false, is_undef: false, llvm_value: "  br i1 %_6, label %bb4, label %bb5", llvm_type: "void" } }
Operand 0 is Some(Left(IntValue(IntValue { int_value: Value { name: "_6", address: 0x55cf68c97f10, is_const: false, is_null: false, is_undef: false, llvm_value: "  %_6 = xor i1 %_7, true", llvm_type: "i1" } })))
Operand 1 is Some(Right(BasicBlock { address: 0x55cf68c97870, is_const: false, llvm_value: "\nbb5:                                              ; preds = %bb3\n  ret i32 %x.0\n", llvm_type: "label" }))
Operand 2 is Some(Right(BasicBlock { address: 0x55cf68c978c0, is_const: false, llvm_value: "\nbb4:                                              ; preds = %bb3\n  call void @_ZN4core9panicking5panic17h4241c5ccea17facaE([0 x i8]* noundef nonnull align 1 bitcast (<{ [24 x i8] }>* @alloc27 to [0 x i8]*), i64 24, %\"core::panic::location::Location\"* noundef align 8 dereferenceable(24) bitcast (<{ i8*, [16 x i8] }>* @alloc29 to %\"core::panic::location::Location\"*)) #7\n  unreachable\n", llvm_type: "label" }))
IF STATEMENT
terminator is InstructionValue { instruction_value: Value { name: "", address: 0x55cf68c98380, is_const: false, is_null: false, is_undef: false, llvm_value: "  br i1 %_5.1, label %panic, label %bb3, !prof !3", llvm_type: "void" } }
Operand 0 is Some(Left(IntValue(IntValue { int_value: Value { name: "_5.1", address: 0x55cf68c981f0, is_const: false, is_null: false, is_undef: false, llvm_value: "  %_5.1 = extractvalue { i32, i1 } %1, 1", llvm_type: "i1" } })))
Operand 1 is Some(Right(BasicBlock { address: 0x55cf68c97730, is_const: false, llvm_value: "\nbb3:                                              ; preds = %bb1, %start\n  %x.0 = phi i32 [ %0, %start ], [ %_5.0, %bb1 ]\n  %_7 = icmp sge i32 %x.0, 0\n  %_6 = xor i1 %_7, true\n  br i1 %_6, label %bb4, label %bb5\n", llvm_type: "label" }))
Operand 2 is Some(Right(BasicBlock { address: 0x55cf68c97820, is_const: false, llvm_value: "\npanic:                                            ; preds = %bb1\n  call void @_ZN4core9panicking5panic17h4241c5ccea17facaE([0 x i8]* noundef nonnull align 1 bitcast ([33 x i8]* @str.0 to [0 x i8]*), i64 33, %\"core::panic::location::Location\"* noundef align 8 dereferenceable(24) bitcast (<{ i8*, [16 x i8] }>* @alloc26 to %\"core::panic::location::Location\"*)) #7\n  unreachable\n", llvm_type: "label" }))
IF STATEMENT
terminator is InstructionValue { instruction_value: Value { name: "", address: 0x55cf68c97d80, is_const: false, is_null: false, is_undef: false, llvm_value: "  br i1 %_2, label %bb1, label %bb3", llvm_type: "void" } }
Operand 0 is Some(Left(IntValue(IntValue { int_value: Value { name: "_2", address: 0x55cf68c97cd0, is_const: false, is_null: false, is_undef: false, llvm_value: "  %_2 = icmp slt i32 %0, 0", llvm_type: "i1" } })))
Operand 1 is Some(Right(BasicBlock { address: 0x55cf68c97730, is_const: false, llvm_value: "\nbb3:                                              ; preds = %bb1, %start\n  %x.0 = phi i32 [ %0, %start ], [ %_5.0, %bb1 ]\n  %_7 = icmp sge i32 %x.0, 0\n  %_6 = xor i1 %_7, true\n  br i1 %_6, label %bb4, label %bb5\n", llvm_type: "label" }))
Operand 2 is Some(Right(BasicBlock { address: 0x55cf68c97780, is_const: false, llvm_value: "\nbb1:                                              ; preds = %start\n  %1 = call { i32, i1 } @llvm.smul.with.overflow.i32(i32 -1, i32 %0)\n  %_5.0 = extractvalue { i32, i1 } %1, 0\n  %_5.1 = extractvalue { i32, i1 } %1, 1\n  br i1 %_5.1, label %panic, label %bb3, !prof !3\n", llvm_type: "label" }))
IF STATEMENT
terminator is InstructionValue { instruction_value: Value { name: "", address: 0x55cf68c97fc0, is_const: false, is_null: false, is_undef: false, llvm_value: "  br i1 %_6, label %bb4, label %bb5", llvm_type: "void" } }
Operand 0 is Some(Left(IntValue(IntValue { int_value: Value { name: "_6", address: 0x55cf68c97f10, is_const: false, is_null: false, is_undef: false, llvm_value: "  %_6 = xor i1 %_7, true", llvm_type: "i1" } })))
Operand 1 is Some(Right(BasicBlock { address: 0x55cf68c97870, is_const: false, llvm_value: "\nbb5:                                              ; preds = %bb3\n  ret i32 %x.0\n", llvm_type: "label" }))
Operand 2 is Some(Right(BasicBlock { address: 0x55cf68c978c0, is_const: false, llvm_value: "\nbb4:                                              ; preds = %bb3\n  call void @_ZN4core9panicking5panic17h4241c5ccea17facaE([0 x i8]* noundef nonnull align 1 bitcast (<{ [24 x i8] }>* @alloc27 to [0 x i8]*), i64 24, %\"core::panic::location::Location\"* noundef align 8 dereferenceable(24) bitcast (<{ i8*, [16 x i8] }>* @alloc29 to %\"core::panic::location::Location\"*)) #7\n  unreachable\n", llvm_type: "label" }))
IF STATEMENT
terminator is InstructionValue { instruction_value: Value { name: "", address: 0x55cf68c98380, is_const: false, is_null: false, is_undef: false, llvm_value: "  br i1 %_5.1, label %panic, label %bb3, !prof !3", llvm_type: "void" } }
Operand 0 is Some(Left(IntValue(IntValue { int_value: Value { name: "_5.1", address: 0x55cf68c981f0, is_const: false, is_null: false, is_undef: false, llvm_value: "  %_5.1 = extractvalue { i32, i1 } %1, 1", llvm_type: "i1" } })))
Operand 1 is Some(Right(BasicBlock { address: 0x55cf68c97730, is_const: false, llvm_value: "\nbb3:                                              ; preds = %bb1, %start\n  %x.0 = phi i32 [ %0, %start ], [ %_5.0, %bb1 ]\n  %_7 = icmp sge i32 %x.0, 0\n  %_6 = xor i1 %_7, true\n  br i1 %_6, label %bb4, label %bb5\n", llvm_type: "label" }))
Operand 2 is Some(Right(BasicBlock { address: 0x55cf68c97820, is_const: false, llvm_value: "\npanic:                                            ; preds = %bb1\n  call void @_ZN4core9panicking5panic17h4241c5ccea17facaE([0 x i8]* noundef nonnull align 1 bitcast ([33 x i8]* @str.0 to [0 x i8]*), i64 33, %\"core::panic::location::Location\"* noundef align 8 dereferenceable(24) bitcast (<{ i8*, [16 x i8] }>* @alloc26 to %\"core::panic::location::Location\"*)) #7\n  unreachable\n", llvm_type: "label" }))
IF STATEMENT
terminator is InstructionValue { instruction_value: Value { name: "", address: 0x55cf68c97d80, is_const: false, is_null: false, is_undef: false, llvm_value: "  br i1 %_2, label %bb1, label %bb3", llvm_type: "void" } }
Operand 0 is Some(Left(IntValue(IntValue { int_value: Value { name: "_2", address: 0x55cf68c97cd0, is_const: false, is_null: false, is_undef: false, llvm_value: "  %_2 = icmp slt i32 %0, 0", llvm_type: "i1" } })))
Operand 1 is Some(Right(BasicBlock { address: 0x55cf68c97730, is_const: false, llvm_value: "\nbb3:                                              ; preds = %bb1, %start\n  %x.0 = phi i32 [ %0, %start ], [ %_5.0, %bb1 ]\n  %_7 = icmp sge i32 %x.0, 0\n  %_6 = xor i1 %_7, true\n  br i1 %_6, label %bb4, label %bb5\n", llvm_type: "label" }))
Operand 2 is Some(Right(BasicBlock { address: 0x55cf68c97780, is_const: false, llvm_value: "\nbb1:                                              ; preds = %start\n  %1 = call { i32, i1 } @llvm.smul.with.overflow.i32(i32 -1, i32 %0)\n  %_5.0 = extractvalue { i32, i1 } %1, 0\n  %_5.1 = extractvalue { i32, i1 } %1, 1\n  br i1 %_5.1, label %panic, label %bb3, !prof !3\n", llvm_type: "label" }))
IF STATEMENT
terminator is InstructionValue { instruction_value: Value { name: "", address: 0x55cf68c97fc0, is_const: false, is_null: false, is_undef: false, llvm_value: "  br i1 %_6, label %bb4, label %bb5", llvm_type: "void" } }
Operand 0 is Some(Left(IntValue(IntValue { int_value: Value { name: "_6", address: 0x55cf68c97f10, is_const: false, is_null: false, is_undef: false, llvm_value: "  %_6 = xor i1 %_7, true", llvm_type: "i1" } })))
Operand 1 is Some(Right(BasicBlock { address: 0x55cf68c97870, is_const: false, llvm_value: "\nbb5:                                              ; preds = %bb3\n  ret i32 %x.0\n", llvm_type: "label" }))
Operand 2 is Some(Right(BasicBlock { address: 0x55cf68c978c0, is_const: false, llvm_value: "\nbb4:                                              ; preds = %bb3\n  call void @_ZN4core9panicking5panic17h4241c5ccea17facaE([0 x i8]* noundef nonnull align 1 bitcast (<{ [24 x i8] }>* @alloc27 to [0 x i8]*), i64 24, %\"core::panic::location::Location\"* noundef align 8 dereferenceable(24) bitcast (<{ i8*, [16 x i8] }>* @alloc29 to %\"core::panic::location::Location\"*)) #7\n  unreachable\n", llvm_type: "label" }))
IF STATEMENT
terminator is InstructionValue { instruction_value: Value { name: "", address: 0x55cf68c98380, is_const: false, is_null: false, is_undef: false, llvm_value: "  br i1 %_5.1, label %panic, label %bb3, !prof !3", llvm_type: "void" } }
Operand 0 is Some(Left(IntValue(IntValue { int_value: Value { name: "_5.1", address: 0x55cf68c981f0, is_const: false, is_null: false, is_undef: false, llvm_value: "  %_5.1 = extractvalue { i32, i1 } %1, 1", llvm_type: "i1" } })))
Operand 1 is Some(Right(BasicBlock { address: 0x55cf68c97730, is_const: false, llvm_value: "\nbb3:                                              ; preds = %bb1, %start\n  %x.0 = phi i32 [ %0, %start ], [ %_5.0, %bb1 ]\n  %_7 = icmp sge i32 %x.0, 0\n  %_6 = xor i1 %_7, true\n  br i1 %_6, label %bb4, label %bb5\n", llvm_type: "label" }))
Operand 2 is Some(Right(BasicBlock { address: 0x55cf68c97820, is_const: false, llvm_value: "\npanic:                                            ; preds = %bb1\n  call void @_ZN4core9panicking5panic17h4241c5ccea17facaE([0 x i8]* noundef nonnull align 1 bitcast ([33 x i8]* @str.0 to [0 x i8]*), i64 33, %\"core::panic::location::Location\"* noundef align 8 dereferenceable(24) bitcast (<{ i8*, [16 x i8] }>* @alloc26 to %\"core::panic::location::Location\"*)) #7\n  unreachable\n", llvm_type: "label" }))
[2mJan 15 20:18:35.957[0m [34mDEBUG[0m wombat_symx: Unsupported Call function "_ZN4core9panicking5panic17h4241c5ccea17facaE"
IF HAS NUM OPERANDS 3
IF HAS TERMINATOR InstructionValue { instruction_value: Value { name: "", address: 0x55cf68c97fc0, is_const: false, is_null: false, is_undef: false, llvm_value: "  br i1 %_6, label %bb4, label %bb5", llvm_type: "void" } }
IF HAS NODE "bb4"
TEST 123 "  %_6 = xor i1 %_7, true"
IF HAS TARGET VAL true
IF HAS TARGET VAL VAR true
IF HAS SWITCH VAR %_6
IF HAS DISCRIMINANT IntValue(IntValue { int_value: Value { name: "_6", address: 0x55cf68c97f10, is_const: false, is_null: false, is_undef: false, llvm_value: "  %_6 = xor i1 %_7, true", llvm_type: "i1" } })
IF HAS ENTRY CONDITION (= %_6 true)
IF HAS NUM OPERANDS 3
IF HAS TERMINATOR InstructionValue { instruction_value: Value { name: "", address: 0x55cf68c97fc0, is_const: false, is_null: false, is_undef: false, llvm_value: "  br i1 %_6, label %bb4, label %bb5", llvm_type: "void" } }
IF HAS NODE "bb5"
TEST 123 "  %_6 = xor i1 %_7, true"
IF HAS TARGET VAL false
IF HAS TARGET VAL VAR false
IF HAS SWITCH VAR %_6
IF HAS DISCRIMINANT IntValue(IntValue { int_value: Value { name: "_6", address: 0x55cf68c97f10, is_const: false, is_null: false, is_undef: false, llvm_value: "  %_6 = xor i1 %_7, true", llvm_type: "i1" } })
IF HAS ENTRY CONDITION (= %_6 false)
IF HAS NUM OPERANDS 3
IF HAS TERMINATOR InstructionValue { instruction_value: Value { name: "", address: 0x55cf68c97fc0, is_const: false, is_null: false, is_undef: false, llvm_value: "  br i1 %_6, label %bb4, label %bb5", llvm_type: "void" } }
IF HAS NODE "bb4"
TEST 123 "  %_6 = xor i1 %_7, true"
IF HAS TARGET VAL true
IF HAS TARGET VAL VAR true
IF HAS SWITCH VAR %_6
IF HAS DISCRIMINANT IntValue(IntValue { int_value: Value { name: "_6", address: 0x55cf68c97f10, is_const: false, is_null: false, is_undef: false, llvm_value: "  %_6 = xor i1 %_7, true", llvm_type: "i1" } })
IF HAS ENTRY CONDITION (= %_6 true)
IF HAS NUM OPERANDS 3
IF HAS TERMINATOR InstructionValue { instruction_value: Value { name: "", address: 0x55cf68c97fc0, is_const: false, is_null: false, is_undef: false, llvm_value: "  br i1 %_6, label %bb4, label %bb5", llvm_type: "void" } }
IF HAS NODE "bb5"
TEST 123 "  %_6 = xor i1 %_7, true"
IF HAS TARGET VAL false
IF HAS TARGET VAL VAR false
IF HAS SWITCH VAR %_6
IF HAS DISCRIMINANT IntValue(IntValue { int_value: Value { name: "_6", address: 0x55cf68c97f10, is_const: false, is_null: false, is_undef: false, llvm_value: "  %_6 = xor i1 %_7, true", llvm_type: "i1" } })
IF HAS ENTRY CONDITION (= %_6 false)
TEST 123 "  %_7 = icmp sge i32 %x.0, 0"
TEST 123 "i1 true"
TEST 123 "  %_6 = xor i1 %_7, true"
TEST 123 "  %_7 = icmp sge i32 %x.0, 0"
TEST 123 "  %x.0 = phi i32 [ %0, %start ], [ %_5.0, %bb1 ]"
TEST 123 "i32 0"
IF HAS NUM OPERANDS 3
IF HAS TERMINATOR InstructionValue { instruction_value: Value { name: "", address: 0x55cf68c97d80, is_const: false, is_null: false, is_undef: false, llvm_value: "  br i1 %_2, label %bb1, label %bb3", llvm_type: "void" } }
IF HAS NODE "bb3"
TEST 123 "  %_2 = icmp slt i32 %0, 0"
IF HAS TARGET VAL false
IF HAS TARGET VAL VAR false
IF HAS SWITCH VAR %_2
IF HAS DISCRIMINANT IntValue(IntValue { int_value: Value { name: "_2", address: 0x55cf68c97cd0, is_const: false, is_null: false, is_undef: false, llvm_value: "  %_2 = icmp slt i32 %0, 0", llvm_type: "i1" } })
IF HAS ENTRY CONDITION (= %_2 false)
IF HAS NUM OPERANDS 3
IF HAS TERMINATOR InstructionValue { instruction_value: Value { name: "", address: 0x55cf68c98380, is_const: false, is_null: false, is_undef: false, llvm_value: "  br i1 %_5.1, label %panic, label %bb3, !prof !3", llvm_type: "void" } }
IF HAS NODE "bb3"
TEST 123 "  %_5.1 = extractvalue { i32, i1 } %1, 1"
IF HAS TARGET VAL false
IF HAS TARGET VAL VAR false
IF HAS SWITCH VAR %_5.1
IF HAS DISCRIMINANT IntValue(IntValue { int_value: Value { name: "_5.1", address: 0x55cf68c981f0, is_const: false, is_null: false, is_undef: false, llvm_value: "  %_5.1 = extractvalue { i32, i1 } %1, 1", llvm_type: "i1" } })
IF HAS ENTRY CONDITION (= %_5.1 false)
[2mJan 15 20:18:35.960[0m [34mDEBUG[0m wombat_symx: Unsupported Call function "_ZN4core9panicking5panic17h4241c5ccea17facaE"
IF HAS NUM OPERANDS 3
IF HAS TERMINATOR InstructionValue { instruction_value: Value { name: "", address: 0x55cf68c98380, is_const: false, is_null: false, is_undef: false, llvm_value: "  br i1 %_5.1, label %panic, label %bb3, !prof !3", llvm_type: "void" } }
IF HAS NODE "panic"
TEST 123 "  %_5.1 = extractvalue { i32, i1 } %1, 1"
IF HAS TARGET VAL true
IF HAS TARGET VAL VAR true
IF HAS SWITCH VAR %_5.1
IF HAS DISCRIMINANT IntValue(IntValue { int_value: Value { name: "_5.1", address: 0x55cf68c981f0, is_const: false, is_null: false, is_undef: false, llvm_value: "  %_5.1 = extractvalue { i32, i1 } %1, 1", llvm_type: "i1" } })
IF HAS ENTRY CONDITION (= %_5.1 true)
IF HAS NUM OPERANDS 3
IF HAS TERMINATOR InstructionValue { instruction_value: Value { name: "", address: 0x55cf68c98380, is_const: false, is_null: false, is_undef: false, llvm_value: "  br i1 %_5.1, label %panic, label %bb3, !prof !3", llvm_type: "void" } }
IF HAS NODE "panic"
TEST 123 "  %_5.1 = extractvalue { i32, i1 } %1, 1"
IF HAS TARGET VAL true
IF HAS TARGET VAL VAR true
IF HAS SWITCH VAR %_5.1
IF HAS DISCRIMINANT IntValue(IntValue { int_value: Value { name: "_5.1", address: 0x55cf68c981f0, is_const: false, is_null: false, is_undef: false, llvm_value: "  %_5.1 = extractvalue { i32, i1 } %1, 1", llvm_type: "i1" } })
IF HAS ENTRY CONDITION (= %_5.1 true)
IF HAS NUM OPERANDS 3
IF HAS TERMINATOR InstructionValue { instruction_value: Value { name: "", address: 0x55cf68c98380, is_const: false, is_null: false, is_undef: false, llvm_value: "  br i1 %_5.1, label %panic, label %bb3, !prof !3", llvm_type: "void" } }
IF HAS NODE "bb3"
TEST 123 "  %_5.1 = extractvalue { i32, i1 } %1, 1"
IF HAS TARGET VAL false
IF HAS TARGET VAL VAR false
IF HAS SWITCH VAR %_5.1
IF HAS DISCRIMINANT IntValue(IntValue { int_value: Value { name: "_5.1", address: 0x55cf68c981f0, is_const: false, is_null: false, is_undef: false, llvm_value: "  %_5.1 = extractvalue { i32, i1 } %1, 1", llvm_type: "i1" } })
IF HAS ENTRY CONDITION (= %_5.1 false)
TEST 123 "  %x.0 = phi i32 [ %0, %start ], [ %_5.0, %bb1 ]"
TEST 123 "  %_5.0 = extractvalue { i32, i1 } %1, 0"
TEST 123 "  %_5.1 = extractvalue { i32, i1 } %1, 1"
TEST 123 "  %1 = call { i32, i1 } @llvm.smul.with.overflow.i32(i32 -1, i32 %0)"
TEST 123 "  %_5.0 = extractvalue { i32, i1 } %1, 0"
TEST 123 "  %1 = call { i32, i1 } @llvm.smul.with.overflow.i32(i32 -1, i32 %0)"
TEST 123 "i32 -1"
TEST 123 "i32 %0"
TEST 123 "  %1 = call { i32, i1 } @llvm.smul.with.overflow.i32(i32 -1, i32 %0)"
TEST 123 "  %1 = call { i32, i1 } @llvm.smul.with.overflow.i32(i32 -1, i32 %0)"
IF HAS NUM OPERANDS 3
IF HAS TERMINATOR InstructionValue { instruction_value: Value { name: "", address: 0x55cf68c97d80, is_const: false, is_null: false, is_undef: false, llvm_value: "  br i1 %_2, label %bb1, label %bb3", llvm_type: "void" } }
IF HAS NODE "bb1"
TEST 123 "  %_2 = icmp slt i32 %0, 0"
IF HAS TARGET VAL true
IF HAS TARGET VAL VAR true
IF HAS SWITCH VAR %_2
IF HAS DISCRIMINANT IntValue(IntValue { int_value: Value { name: "_2", address: 0x55cf68c97cd0, is_const: false, is_null: false, is_undef: false, llvm_value: "  %_2 = icmp slt i32 %0, 0", llvm_type: "i1" } })
IF HAS ENTRY CONDITION (= %_2 true)
IF HAS NUM OPERANDS 3
IF HAS TERMINATOR InstructionValue { instruction_value: Value { name: "", address: 0x55cf68c97d80, is_const: false, is_null: false, is_undef: false, llvm_value: "  br i1 %_2, label %bb1, label %bb3", llvm_type: "void" } }
IF HAS NODE "bb1"
TEST 123 "  %_2 = icmp slt i32 %0, 0"
IF HAS TARGET VAL true
IF HAS TARGET VAL VAR true
IF HAS SWITCH VAR %_2
IF HAS DISCRIMINANT IntValue(IntValue { int_value: Value { name: "_2", address: 0x55cf68c97cd0, is_const: false, is_null: false, is_undef: false, llvm_value: "  %_2 = icmp slt i32 %0, 0", llvm_type: "i1" } })
IF HAS ENTRY CONDITION (= %_2 true)
IF HAS NUM OPERANDS 3
IF HAS TERMINATOR InstructionValue { instruction_value: Value { name: "", address: 0x55cf68c97d80, is_const: false, is_null: false, is_undef: false, llvm_value: "  br i1 %_2, label %bb1, label %bb3", llvm_type: "void" } }
IF HAS NODE "bb3"
TEST 123 "  %_2 = icmp slt i32 %0, 0"
IF HAS TARGET VAL false
IF HAS TARGET VAL VAR false
IF HAS SWITCH VAR %_2
IF HAS DISCRIMINANT IntValue(IntValue { int_value: Value { name: "_2", address: 0x55cf68c97cd0, is_const: false, is_null: false, is_undef: false, llvm_value: "  %_2 = icmp slt i32 %0, 0", llvm_type: "i1" } })
IF HAS ENTRY CONDITION (= %_2 false)
TEST 123 "  %x.0 = phi i32 [ %0, %start ], [ %_5.0, %bb1 ]"
TEST 123 "i32 %0"
TEST 123 "  %_2 = icmp slt i32 %0, 0"
TEST 123 "i32 %0"
TEST 123 "i32 0"
TEST 123 "i32 %0"
[2mJan 15 20:18:35.965[0m [34mDEBUG[0m wombat_symx: (declare-fun panic_var () Bool)
(declare-fun common_end () Bool)
(declare-fun %_6 () Bool)
(declare-fun bb4 () Bool)
(declare-fun bb5 () Bool)
(declare-fun const_true () Bool)
(declare-fun const_0 () Int)
(declare-fun %_7 () Bool)
(declare-fun %x.0 () Int)
(declare-fun %_5.1 () Bool)
(declare-fun %_2 () Bool)
(declare-fun bb3 () Bool)
(declare-fun panic () Bool)
(declare-fun const_-1 () Int)
(declare-fun %_5.0 () Int)
(declare-fun %1.1 () Bool)
(declare-fun %1.0 () Int)
(declare-fun %0 () Int)
(declare-fun bb1 () Bool)
(declare-fun start () Bool)
(assert (= common_end (=> (and true true true true) (and (not panic_var) true))))
(assert (= bb4
   (=> (and true (= %_6 true)) (=> (= panic_var true) (and true common_end)))))
(assert (= bb5
   (=> (and true (= %_6 false)) (=> (= panic_var false) (and true common_end)))))
(assert (= const_true true))
(assert (= const_0 0))
(assert (let ((a!1 (=> (= %_7 (>= %x.0 const_0))
               (=> (= %_6 (xor %_7 const_true)) (and true bb4 bb5)))))
  (= bb3 (=> (and true (= %_2 false) (= %_5.1 false)) a!1))))
(assert (= panic
   (=> (and true (= %_5.1 true)) (=> (= panic_var true) (and true common_end)))))
(assert (= const_-1 (- 1)))
(assert (let ((a!1 (> (* const_-1 %0)
              (ite (bvslt #x7fffffff #x00000000)
                   (- (bv2int #x7fffffff) 4294967296)
                   (bv2int #x7fffffff))))
      (a!2 (< (* const_-1 %0)
              (ite (bvslt #x80000000 #x00000000)
                   (- (bv2int #x80000000) 4294967296)
                   (bv2int #x80000000))))
      (a!3 (=> (= %_5.1 %1.1)
               (=> (=> (= %_5.1 false) (= %x.0 %_5.0)) (and true panic bb3)))))
(let ((a!4 (=> (and (= %1.0 (* const_-1 %0)) (= %1.1 (or a!1 a!2)))
               (=> (= %_5.0 %1.0) a!3))))
  (= bb1 (=> (and true (= %_2 true)) a!4)))))
(assert (= const_0 0))
(assert (let ((a!1 (=> (= %_2 (< %0 const_0))
               (=> (=> (= %_2 false) (= %x.0 %0)) (and true bb1 bb3)))))
  (= start (=> true a!1))))
(assert (let ((a!1 (>= %0
               (ite (bvslt #x80000000 #x00000000)
                    (- (bv2int #x80000000) 4294967296)
                    (bv2int #x80000000))))
      (a!2 (<= %0
               (ite (bvslt #x7fffffff #x00000000)
                    (- (bv2int #x7fffffff) 4294967296)
                    (bv2int #x7fffffff)))))
  (and a!1 a!2)))
(assert (not start))


Function safety: unsafe
[2mJan 15 20:18:36.088[0m [34mDEBUG[0m wombat_symx: 
const_true -> true
panic_var -> true
const_0 -> 0
%_5.1 -> true
%_5.0 -> 2147483648
%_6 -> false
common_end -> false
const_-1 -> (- 1)
%1.0 -> 2147483648
bb3 -> true
%1.1 -> true
bb4 -> true
start -> false
bb5 -> true
%_2 -> true
panic -> false
%0 -> (- 2147483648)
%x.0 -> (- 2147483649)
bb1 -> false
%_7 -> false


Argument values:
	"x" = (- 2147483648)

************************************


