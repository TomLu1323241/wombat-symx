[2mJan 15 20:18:35.414[0m [34mDEBUG[0m wombat_symx: Func param instr: IntValue { int_value: Value { name: "x", address: 0x55b970c5da50, is_const: false, is_null: false, is_undef: false, llvm_value: "i32 %x", llvm_type: "i32" } }
[2mJan 15 20:18:35.414[0m [34mDEBUG[0m wombat_symx: Function arg names: {"x": "%x"}
Backward Symbolic Execution in switch::test_safe::hd06fdacf5e035b89
[2mJan 15 20:18:35.414[0m [34mDEBUG[0m wombat_symx: Number of Nodes: 7
[2mJan 15 20:18:35.415[0m [34mDEBUG[0m wombat_symx: Arg count: 1
[2mJan 15 20:18:35.415[0m [34mDEBUG[0m wombat_symx: Basic Blocks:
[2mJan 15 20:18:35.415[0m [34mDEBUG[0m wombat_symx: 	Basic Block: "start"
[2mJan 15 20:18:35.415[0m [34mDEBUG[0m wombat_symx: 		is_cleanup: NO
[2mJan 15 20:18:35.415[0m [34mDEBUG[0m wombat_symx: 		Statement: "\"  switch i32 %x, label %bb1 [\\n    i32 1, label %bb7\\n    i32 2, label %bb3\\n    i32 2147483647, label %bb5\\n  ]\""
[2mJan 15 20:18:35.415[0m [34mDEBUG[0m wombat_symx: 		Last statement is a terminator
[2mJan 15 20:18:35.415[0m [34mDEBUG[0m wombat_symx: 	Basic Block: "bb1"
[2mJan 15 20:18:35.415[0m [34mDEBUG[0m wombat_symx: 		is_cleanup: NO
[2mJan 15 20:18:35.415[0m [34mDEBUG[0m wombat_symx: 		Statement: "\"  %0 = call { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %x, i32 1)\""
[2mJan 15 20:18:35.415[0m [34mDEBUG[0m wombat_symx: 		Statement: "\"  %_5.0 = extractvalue { i32, i1 } %0, 0\""
[2mJan 15 20:18:35.415[0m [34mDEBUG[0m wombat_symx: 		Statement: "\"  %_5.1 = extractvalue { i32, i1 } %0, 1\""
[2mJan 15 20:18:35.415[0m [34mDEBUG[0m wombat_symx: 		Statement: "\"  br i1 %_5.1, label %panic, label %bb7, !prof !3\""
[2mJan 15 20:18:35.415[0m [34mDEBUG[0m wombat_symx: 		Last statement is a terminator
[2mJan 15 20:18:35.415[0m [34mDEBUG[0m wombat_symx: 	Basic Block: "bb3"
[2mJan 15 20:18:35.415[0m [34mDEBUG[0m wombat_symx: 		is_cleanup: NO
[2mJan 15 20:18:35.415[0m [34mDEBUG[0m wombat_symx: 		Statement: "\"  %1 = call { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %x, i32 1)\""
[2mJan 15 20:18:35.415[0m [34mDEBUG[0m wombat_symx: 		Statement: "\"  %_3.0 = extractvalue { i32, i1 } %1, 0\""
[2mJan 15 20:18:35.415[0m [34mDEBUG[0m wombat_symx: 		Statement: "\"  %_3.1 = extractvalue { i32, i1 } %1, 1\""
[2mJan 15 20:18:35.415[0m [34mDEBUG[0m wombat_symx: 		Statement: "\"  br i1 %_3.1, label %panic1, label %bb7, !prof !3\""
[2mJan 15 20:18:35.415[0m [34mDEBUG[0m wombat_symx: 		Last statement is a terminator
[2mJan 15 20:18:35.415[0m [34mDEBUG[0m wombat_symx: 	Basic Block: "bb5"
[2mJan 15 20:18:35.415[0m [34mDEBUG[0m wombat_symx: 		is_cleanup: NO
[2mJan 15 20:18:35.415[0m [34mDEBUG[0m wombat_symx: 		Statement: "\"  br label %bb7\""
[2mJan 15 20:18:35.415[0m [34mDEBUG[0m wombat_symx: 		Last statement is a terminator
[2mJan 15 20:18:35.415[0m [34mDEBUG[0m wombat_symx: 	Basic Block: "panic"
[2mJan 15 20:18:35.416[0m [34mDEBUG[0m wombat_symx: 		is_cleanup: YES
[2mJan 15 20:18:35.416[0m [34mDEBUG[0m wombat_symx: 		Statement: "\"  call void @_ZN4core9panicking5panic17h4241c5ccea17facaE([0 x i8]* noundef nonnull align 1 bitcast ([28 x i8]* @str.0 to [0 x i8]*), i64 28, %\\\"core::panic::location::Location\\\"* noundef align 8 dereferenceable(24) bitcast (<{ i8*, [16 x i8] }>* @alloc31 to %\\\"core::panic::location::Location\\\"*)) #7\""
[2mJan 15 20:18:35.416[0m [34mDEBUG[0m wombat_symx: 		Statement: "\"  unreachable\""
[2mJan 15 20:18:35.416[0m [34mDEBUG[0m wombat_symx: 		Last statement is a terminator
[2mJan 15 20:18:35.416[0m [34mDEBUG[0m wombat_symx: 	Basic Block: "bb7"
[2mJan 15 20:18:35.416[0m [34mDEBUG[0m wombat_symx: 		is_cleanup: NO
[2mJan 15 20:18:35.416[0m [34mDEBUG[0m wombat_symx: 		Statement: "\"  %.0 = phi i32 [ %x, %bb5 ], [ 2147483643, %start ], [ %_5.0, %bb1 ], [ %_3.0, %bb3 ]\""
[2mJan 15 20:18:35.416[0m [34mDEBUG[0m wombat_symx: 		Statement: "\"  ret i32 %.0\""
[2mJan 15 20:18:35.416[0m [34mDEBUG[0m wombat_symx: 		Last statement is a terminator
[2mJan 15 20:18:35.416[0m [34mDEBUG[0m wombat_symx: 	Basic Block: "panic1"
[2mJan 15 20:18:35.416[0m [34mDEBUG[0m wombat_symx: 		is_cleanup: YES
[2mJan 15 20:18:35.416[0m [34mDEBUG[0m wombat_symx: 		Statement: "\"  call void @_ZN4core9panicking5panic17h4241c5ccea17facaE([0 x i8]* noundef nonnull align 1 bitcast ([28 x i8]* @str.0 to [0 x i8]*), i64 28, %\\\"core::panic::location::Location\\\"* noundef align 8 dereferenceable(24) bitcast (<{ i8*, [16 x i8] }>* @alloc33 to %\\\"core::panic::location::Location\\\"*)) #7\""
[2mJan 15 20:18:35.416[0m [34mDEBUG[0m wombat_symx: 		Statement: "\"  unreachable\""
[2mJan 15 20:18:35.416[0m [34mDEBUG[0m wombat_symx: 		Last statement is a terminator
[2mJan 15 20:18:35.416[0m [34mDEBUG[0m wombat_symx: 
[2mJan 15 20:18:35.416[0m [34mDEBUG[0m wombat_symx: Start node: "start"
SWITCH STATEMENT
terminator is InstructionValue { instruction_value: Value { name: "", address: 0x55b970c61c08, is_const: false, is_null: false, is_undef: false, llvm_value: "  switch i32 %x, label %bb1 [\n    i32 1, label %bb7\n    i32 2, label %bb3\n    i32 2147483647, label %bb5\n  ]", llvm_type: "void" } }
Operand 0 is Some(Left(IntValue(IntValue { int_value: Value { name: "x", address: 0x55b970c5da50, is_const: false, is_null: false, is_undef: false, llvm_value: "i32 %x", llvm_type: "i32" } })))
Operand 1 is Some(Right(BasicBlock { address: 0x55b970c61930, is_const: false, llvm_value: "\nbb1:                                              ; preds = %start\n  %0 = call { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %x, i32 1)\n  %_5.0 = extractvalue { i32, i1 } %0, 0\n  %_5.1 = extractvalue { i32, i1 } %0, 1\n  br i1 %_5.1, label %panic, label %bb7, !prof !3\n", llvm_type: "label" }))
Operand 2 is Some(Left(IntValue(IntValue { int_value: Value { name: "", address: 0x55b970c590c0, is_const: true, is_null: false, is_undef: false, llvm_value: "i32 1", llvm_type: "i32" } })))
Operand 3 is Some(Right(BasicBlock { address: 0x55b970c61b10, is_const: false, llvm_value: "\nbb7:                                              ; preds = %bb3, %bb1, %start, %bb5\n  %.0 = phi i32 [ %x, %bb5 ], [ 2147483643, %start ], [ %_5.0, %bb1 ], [ %_3.0, %bb3 ]\n  ret i32 %.0\n", llvm_type: "label" }))
Operand 4 is Some(Left(IntValue(IntValue { int_value: Value { name: "", address: 0x55b970c59090, is_const: true, is_null: false, is_undef: false, llvm_value: "i32 2", llvm_type: "i32" } })))
Operand 5 is Some(Right(BasicBlock { address: 0x55b970c619d0, is_const: false, llvm_value: "\nbb3:                                              ; preds = %start\n  %1 = call { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %x, i32 1)\n  %_3.0 = extractvalue { i32, i1 } %1, 0\n  %_3.1 = extractvalue { i32, i1 } %1, 1\n  br i1 %_3.1, label %panic1, label %bb7, !prof !3\n", llvm_type: "label" }))
Operand 6 is Some(Left(IntValue(IntValue { int_value: Value { name: "", address: 0x55b970c5eb70, is_const: true, is_null: false, is_undef: false, llvm_value: "i32 2147483647", llvm_type: "i32" } })))
Operand 7 is Some(Right(BasicBlock { address: 0x55b970c61a20, is_const: false, llvm_value: "\nbb5:                                              ; preds = %start\n  br label %bb7\n", llvm_type: "label" }))
Number of operands is 8
IF STATEMENT
terminator is InstructionValue { instruction_value: Value { name: "", address: 0x55b970c620d0, is_const: false, is_null: false, is_undef: false, llvm_value: "  br i1 %_5.1, label %panic, label %bb7, !prof !3", llvm_type: "void" } }
Operand 0 is Some(Left(IntValue(IntValue { int_value: Value { name: "_5.1", address: 0x55b970c61f40, is_const: false, is_null: false, is_undef: false, llvm_value: "  %_5.1 = extractvalue { i32, i1 } %0, 1", llvm_type: "i1" } })))
Operand 1 is Some(Right(BasicBlock { address: 0x55b970c61b10, is_const: false, llvm_value: "\nbb7:                                              ; preds = %bb3, %bb1, %start, %bb5\n  %.0 = phi i32 [ %x, %bb5 ], [ 2147483643, %start ], [ %_5.0, %bb1 ], [ %_3.0, %bb3 ]\n  ret i32 %.0\n", llvm_type: "label" }))
Operand 2 is Some(Right(BasicBlock { address: 0x55b970c61ac0, is_const: false, llvm_value: "\npanic:                                            ; preds = %bb1\n  call void @_ZN4core9panicking5panic17h4241c5ccea17facaE([0 x i8]* noundef nonnull align 1 bitcast ([28 x i8]* @str.0 to [0 x i8]*), i64 28, %\"core::panic::location::Location\"* noundef align 8 dereferenceable(24) bitcast (<{ i8*, [16 x i8] }>* @alloc31 to %\"core::panic::location::Location\"*)) #7\n  unreachable\n", llvm_type: "label" }))
IF STATEMENT
terminator is InstructionValue { instruction_value: Value { name: "", address: 0x55b970c62520, is_const: false, is_null: false, is_undef: false, llvm_value: "  br i1 %_3.1, label %panic1, label %bb7, !prof !3", llvm_type: "void" } }
Operand 0 is Some(Left(IntValue(IntValue { int_value: Value { name: "_3.1", address: 0x55b970c62390, is_const: false, is_null: false, is_undef: false, llvm_value: "  %_3.1 = extractvalue { i32, i1 } %1, 1", llvm_type: "i1" } })))
Operand 1 is Some(Right(BasicBlock { address: 0x55b970c61b10, is_const: false, llvm_value: "\nbb7:                                              ; preds = %bb3, %bb1, %start, %bb5\n  %.0 = phi i32 [ %x, %bb5 ], [ 2147483643, %start ], [ %_5.0, %bb1 ], [ %_3.0, %bb3 ]\n  ret i32 %.0\n", llvm_type: "label" }))
Operand 2 is Some(Right(BasicBlock { address: 0x55b970c61bb0, is_const: false, llvm_value: "\npanic1:                                           ; preds = %bb3\n  call void @_ZN4core9panicking5panic17h4241c5ccea17facaE([0 x i8]* noundef nonnull align 1 bitcast ([28 x i8]* @str.0 to [0 x i8]*), i64 28, %\"core::panic::location::Location\"* noundef align 8 dereferenceable(24) bitcast (<{ i8*, [16 x i8] }>* @alloc33 to %\"core::panic::location::Location\"*)) #7\n  unreachable\n", llvm_type: "label" }))
[2mJan 15 20:18:35.417[0m [34mDEBUG[0m wombat_symx: 	Successor to start node: "bb1"
[2mJan 15 20:18:35.417[0m [34mDEBUG[0m wombat_symx: 	Successor to start node: "bb7"
[2mJan 15 20:18:35.417[0m [34mDEBUG[0m wombat_symx: 	Successor to start node: "bb3"
[2mJan 15 20:18:35.417[0m [34mDEBUG[0m wombat_symx: 	Successor to start node: "bb5"
SWITCH STATEMENT
terminator is InstructionValue { instruction_value: Value { name: "", address: 0x55b970c61c08, is_const: false, is_null: false, is_undef: false, llvm_value: "  switch i32 %x, label %bb1 [\n    i32 1, label %bb7\n    i32 2, label %bb3\n    i32 2147483647, label %bb5\n  ]", llvm_type: "void" } }
Operand 0 is Some(Left(IntValue(IntValue { int_value: Value { name: "x", address: 0x55b970c5da50, is_const: false, is_null: false, is_undef: false, llvm_value: "i32 %x", llvm_type: "i32" } })))
Operand 1 is Some(Right(BasicBlock { address: 0x55b970c61930, is_const: false, llvm_value: "\nbb1:                                              ; preds = %start\n  %0 = call { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %x, i32 1)\n  %_5.0 = extractvalue { i32, i1 } %0, 0\n  %_5.1 = extractvalue { i32, i1 } %0, 1\n  br i1 %_5.1, label %panic, label %bb7, !prof !3\n", llvm_type: "label" }))
Operand 2 is Some(Left(IntValue(IntValue { int_value: Value { name: "", address: 0x55b970c590c0, is_const: true, is_null: false, is_undef: false, llvm_value: "i32 1", llvm_type: "i32" } })))
Operand 3 is Some(Right(BasicBlock { address: 0x55b970c61b10, is_const: false, llvm_value: "\nbb7:                                              ; preds = %bb3, %bb1, %start, %bb5\n  %.0 = phi i32 [ %x, %bb5 ], [ 2147483643, %start ], [ %_5.0, %bb1 ], [ %_3.0, %bb3 ]\n  ret i32 %.0\n", llvm_type: "label" }))
Operand 4 is Some(Left(IntValue(IntValue { int_value: Value { name: "", address: 0x55b970c59090, is_const: true, is_null: false, is_undef: false, llvm_value: "i32 2", llvm_type: "i32" } })))
Operand 5 is Some(Right(BasicBlock { address: 0x55b970c619d0, is_const: false, llvm_value: "\nbb3:                                              ; preds = %start\n  %1 = call { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %x, i32 1)\n  %_3.0 = extractvalue { i32, i1 } %1, 0\n  %_3.1 = extractvalue { i32, i1 } %1, 1\n  br i1 %_3.1, label %panic1, label %bb7, !prof !3\n", llvm_type: "label" }))
Operand 6 is Some(Left(IntValue(IntValue { int_value: Value { name: "", address: 0x55b970c5eb70, is_const: true, is_null: false, is_undef: false, llvm_value: "i32 2147483647", llvm_type: "i32" } })))
Operand 7 is Some(Right(BasicBlock { address: 0x55b970c61a20, is_const: false, llvm_value: "\nbb5:                                              ; preds = %start\n  br label %bb7\n", llvm_type: "label" }))
Number of operands is 8
IF STATEMENT
terminator is InstructionValue { instruction_value: Value { name: "", address: 0x55b970c620d0, is_const: false, is_null: false, is_undef: false, llvm_value: "  br i1 %_5.1, label %panic, label %bb7, !prof !3", llvm_type: "void" } }
Operand 0 is Some(Left(IntValue(IntValue { int_value: Value { name: "_5.1", address: 0x55b970c61f40, is_const: false, is_null: false, is_undef: false, llvm_value: "  %_5.1 = extractvalue { i32, i1 } %0, 1", llvm_type: "i1" } })))
Operand 1 is Some(Right(BasicBlock { address: 0x55b970c61b10, is_const: false, llvm_value: "\nbb7:                                              ; preds = %bb3, %bb1, %start, %bb5\n  %.0 = phi i32 [ %x, %bb5 ], [ 2147483643, %start ], [ %_5.0, %bb1 ], [ %_3.0, %bb3 ]\n  ret i32 %.0\n", llvm_type: "label" }))
Operand 2 is Some(Right(BasicBlock { address: 0x55b970c61ac0, is_const: false, llvm_value: "\npanic:                                            ; preds = %bb1\n  call void @_ZN4core9panicking5panic17h4241c5ccea17facaE([0 x i8]* noundef nonnull align 1 bitcast ([28 x i8]* @str.0 to [0 x i8]*), i64 28, %\"core::panic::location::Location\"* noundef align 8 dereferenceable(24) bitcast (<{ i8*, [16 x i8] }>* @alloc31 to %\"core::panic::location::Location\"*)) #7\n  unreachable\n", llvm_type: "label" }))
IF STATEMENT
terminator is InstructionValue { instruction_value: Value { name: "", address: 0x55b970c62520, is_const: false, is_null: false, is_undef: false, llvm_value: "  br i1 %_3.1, label %panic1, label %bb7, !prof !3", llvm_type: "void" } }
Operand 0 is Some(Left(IntValue(IntValue { int_value: Value { name: "_3.1", address: 0x55b970c62390, is_const: false, is_null: false, is_undef: false, llvm_value: "  %_3.1 = extractvalue { i32, i1 } %1, 1", llvm_type: "i1" } })))
Operand 1 is Some(Right(BasicBlock { address: 0x55b970c61b10, is_const: false, llvm_value: "\nbb7:                                              ; preds = %bb3, %bb1, %start, %bb5\n  %.0 = phi i32 [ %x, %bb5 ], [ 2147483643, %start ], [ %_5.0, %bb1 ], [ %_3.0, %bb3 ]\n  ret i32 %.0\n", llvm_type: "label" }))
Operand 2 is Some(Right(BasicBlock { address: 0x55b970c61bb0, is_const: false, llvm_value: "\npanic1:                                           ; preds = %bb3\n  call void @_ZN4core9panicking5panic17h4241c5ccea17facaE([0 x i8]* noundef nonnull align 1 bitcast ([28 x i8]* @str.0 to [0 x i8]*), i64 28, %\"core::panic::location::Location\"* noundef align 8 dereferenceable(24) bitcast (<{ i8*, [16 x i8] }>* @alloc33 to %\"core::panic::location::Location\"*)) #7\n  unreachable\n", llvm_type: "label" }))
[2mJan 15 20:18:35.417[0m [34mDEBUG[0m wombat_symx: Forward edges:	{"bb1": {"panic", "bb7"}, "start": {"bb5", "bb7", "bb3", "bb1"}, "panic": {"common_end"}, "bb3": {"bb7", "panic1"}, "bb5": {"bb7"}, "bb7": {"common_end"}, "panic1": {"common_end"}}
SWITCH STATEMENT
terminator is InstructionValue { instruction_value: Value { name: "", address: 0x55b970c61c08, is_const: false, is_null: false, is_undef: false, llvm_value: "  switch i32 %x, label %bb1 [\n    i32 1, label %bb7\n    i32 2, label %bb3\n    i32 2147483647, label %bb5\n  ]", llvm_type: "void" } }
Operand 0 is Some(Left(IntValue(IntValue { int_value: Value { name: "x", address: 0x55b970c5da50, is_const: false, is_null: false, is_undef: false, llvm_value: "i32 %x", llvm_type: "i32" } })))
Operand 1 is Some(Right(BasicBlock { address: 0x55b970c61930, is_const: false, llvm_value: "\nbb1:                                              ; preds = %start\n  %0 = call { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %x, i32 1)\n  %_5.0 = extractvalue { i32, i1 } %0, 0\n  %_5.1 = extractvalue { i32, i1 } %0, 1\n  br i1 %_5.1, label %panic, label %bb7, !prof !3\n", llvm_type: "label" }))
Operand 2 is Some(Left(IntValue(IntValue { int_value: Value { name: "", address: 0x55b970c590c0, is_const: true, is_null: false, is_undef: false, llvm_value: "i32 1", llvm_type: "i32" } })))
Operand 3 is Some(Right(BasicBlock { address: 0x55b970c61b10, is_const: false, llvm_value: "\nbb7:                                              ; preds = %bb3, %bb1, %start, %bb5\n  %.0 = phi i32 [ %x, %bb5 ], [ 2147483643, %start ], [ %_5.0, %bb1 ], [ %_3.0, %bb3 ]\n  ret i32 %.0\n", llvm_type: "label" }))
Operand 4 is Some(Left(IntValue(IntValue { int_value: Value { name: "", address: 0x55b970c59090, is_const: true, is_null: false, is_undef: false, llvm_value: "i32 2", llvm_type: "i32" } })))
Operand 5 is Some(Right(BasicBlock { address: 0x55b970c619d0, is_const: false, llvm_value: "\nbb3:                                              ; preds = %start\n  %1 = call { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %x, i32 1)\n  %_3.0 = extractvalue { i32, i1 } %1, 0\n  %_3.1 = extractvalue { i32, i1 } %1, 1\n  br i1 %_3.1, label %panic1, label %bb7, !prof !3\n", llvm_type: "label" }))
Operand 6 is Some(Left(IntValue(IntValue { int_value: Value { name: "", address: 0x55b970c5eb70, is_const: true, is_null: false, is_undef: false, llvm_value: "i32 2147483647", llvm_type: "i32" } })))
Operand 7 is Some(Right(BasicBlock { address: 0x55b970c61a20, is_const: false, llvm_value: "\nbb5:                                              ; preds = %start\n  br label %bb7\n", llvm_type: "label" }))
Number of operands is 8
IF STATEMENT
terminator is InstructionValue { instruction_value: Value { name: "", address: 0x55b970c620d0, is_const: false, is_null: false, is_undef: false, llvm_value: "  br i1 %_5.1, label %panic, label %bb7, !prof !3", llvm_type: "void" } }
Operand 0 is Some(Left(IntValue(IntValue { int_value: Value { name: "_5.1", address: 0x55b970c61f40, is_const: false, is_null: false, is_undef: false, llvm_value: "  %_5.1 = extractvalue { i32, i1 } %0, 1", llvm_type: "i1" } })))
Operand 1 is Some(Right(BasicBlock { address: 0x55b970c61b10, is_const: false, llvm_value: "\nbb7:                                              ; preds = %bb3, %bb1, %start, %bb5\n  %.0 = phi i32 [ %x, %bb5 ], [ 2147483643, %start ], [ %_5.0, %bb1 ], [ %_3.0, %bb3 ]\n  ret i32 %.0\n", llvm_type: "label" }))
Operand 2 is Some(Right(BasicBlock { address: 0x55b970c61ac0, is_const: false, llvm_value: "\npanic:                                            ; preds = %bb1\n  call void @_ZN4core9panicking5panic17h4241c5ccea17facaE([0 x i8]* noundef nonnull align 1 bitcast ([28 x i8]* @str.0 to [0 x i8]*), i64 28, %\"core::panic::location::Location\"* noundef align 8 dereferenceable(24) bitcast (<{ i8*, [16 x i8] }>* @alloc31 to %\"core::panic::location::Location\"*)) #7\n  unreachable\n", llvm_type: "label" }))
IF STATEMENT
terminator is InstructionValue { instruction_value: Value { name: "", address: 0x55b970c62520, is_const: false, is_null: false, is_undef: false, llvm_value: "  br i1 %_3.1, label %panic1, label %bb7, !prof !3", llvm_type: "void" } }
Operand 0 is Some(Left(IntValue(IntValue { int_value: Value { name: "_3.1", address: 0x55b970c62390, is_const: false, is_null: false, is_undef: false, llvm_value: "  %_3.1 = extractvalue { i32, i1 } %1, 1", llvm_type: "i1" } })))
Operand 1 is Some(Right(BasicBlock { address: 0x55b970c61b10, is_const: false, llvm_value: "\nbb7:                                              ; preds = %bb3, %bb1, %start, %bb5\n  %.0 = phi i32 [ %x, %bb5 ], [ 2147483643, %start ], [ %_5.0, %bb1 ], [ %_3.0, %bb3 ]\n  ret i32 %.0\n", llvm_type: "label" }))
Operand 2 is Some(Right(BasicBlock { address: 0x55b970c61bb0, is_const: false, llvm_value: "\npanic1:                                           ; preds = %bb3\n  call void @_ZN4core9panicking5panic17h4241c5ccea17facaE([0 x i8]* noundef nonnull align 1 bitcast ([28 x i8]* @str.0 to [0 x i8]*), i64 28, %\"core::panic::location::Location\"* noundef align 8 dereferenceable(24) bitcast (<{ i8*, [16 x i8] }>* @alloc33 to %\"core::panic::location::Location\"*)) #7\n  unreachable\n", llvm_type: "label" }))
[2mJan 15 20:18:35.418[0m [34mDEBUG[0m wombat_symx: Backward edges:	{"bb7": {"bb1", "bb5", "bb3", "start"}, "start": {}, "panic": {"bb1"}, "bb1": {"start"}, "bb5": {"start"}, "bb3": {"start"}, "panic1": {"bb3"}, "common_end": {"panic", "panic1", "bb7"}}
SWITCH STATEMENT
terminator is InstructionValue { instruction_value: Value { name: "", address: 0x55b970c61c08, is_const: false, is_null: false, is_undef: false, llvm_value: "  switch i32 %x, label %bb1 [\n    i32 1, label %bb7\n    i32 2, label %bb3\n    i32 2147483647, label %bb5\n  ]", llvm_type: "void" } }
Operand 0 is Some(Left(IntValue(IntValue { int_value: Value { name: "x", address: 0x55b970c5da50, is_const: false, is_null: false, is_undef: false, llvm_value: "i32 %x", llvm_type: "i32" } })))
Operand 1 is Some(Right(BasicBlock { address: 0x55b970c61930, is_const: false, llvm_value: "\nbb1:                                              ; preds = %start\n  %0 = call { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %x, i32 1)\n  %_5.0 = extractvalue { i32, i1 } %0, 0\n  %_5.1 = extractvalue { i32, i1 } %0, 1\n  br i1 %_5.1, label %panic, label %bb7, !prof !3\n", llvm_type: "label" }))
Operand 2 is Some(Left(IntValue(IntValue { int_value: Value { name: "", address: 0x55b970c590c0, is_const: true, is_null: false, is_undef: false, llvm_value: "i32 1", llvm_type: "i32" } })))
Operand 3 is Some(Right(BasicBlock { address: 0x55b970c61b10, is_const: false, llvm_value: "\nbb7:                                              ; preds = %bb3, %bb1, %start, %bb5\n  %.0 = phi i32 [ %x, %bb5 ], [ 2147483643, %start ], [ %_5.0, %bb1 ], [ %_3.0, %bb3 ]\n  ret i32 %.0\n", llvm_type: "label" }))
Operand 4 is Some(Left(IntValue(IntValue { int_value: Value { name: "", address: 0x55b970c59090, is_const: true, is_null: false, is_undef: false, llvm_value: "i32 2", llvm_type: "i32" } })))
Operand 5 is Some(Right(BasicBlock { address: 0x55b970c619d0, is_const: false, llvm_value: "\nbb3:                                              ; preds = %start\n  %1 = call { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %x, i32 1)\n  %_3.0 = extractvalue { i32, i1 } %1, 0\n  %_3.1 = extractvalue { i32, i1 } %1, 1\n  br i1 %_3.1, label %panic1, label %bb7, !prof !3\n", llvm_type: "label" }))
Operand 6 is Some(Left(IntValue(IntValue { int_value: Value { name: "", address: 0x55b970c5eb70, is_const: true, is_null: false, is_undef: false, llvm_value: "i32 2147483647", llvm_type: "i32" } })))
Operand 7 is Some(Right(BasicBlock { address: 0x55b970c61a20, is_const: false, llvm_value: "\nbb5:                                              ; preds = %start\n  br label %bb7\n", llvm_type: "label" }))
Number of operands is 8
IF STATEMENT
terminator is InstructionValue { instruction_value: Value { name: "", address: 0x55b970c620d0, is_const: false, is_null: false, is_undef: false, llvm_value: "  br i1 %_5.1, label %panic, label %bb7, !prof !3", llvm_type: "void" } }
Operand 0 is Some(Left(IntValue(IntValue { int_value: Value { name: "_5.1", address: 0x55b970c61f40, is_const: false, is_null: false, is_undef: false, llvm_value: "  %_5.1 = extractvalue { i32, i1 } %0, 1", llvm_type: "i1" } })))
Operand 1 is Some(Right(BasicBlock { address: 0x55b970c61b10, is_const: false, llvm_value: "\nbb7:                                              ; preds = %bb3, %bb1, %start, %bb5\n  %.0 = phi i32 [ %x, %bb5 ], [ 2147483643, %start ], [ %_5.0, %bb1 ], [ %_3.0, %bb3 ]\n  ret i32 %.0\n", llvm_type: "label" }))
Operand 2 is Some(Right(BasicBlock { address: 0x55b970c61ac0, is_const: false, llvm_value: "\npanic:                                            ; preds = %bb1\n  call void @_ZN4core9panicking5panic17h4241c5ccea17facaE([0 x i8]* noundef nonnull align 1 bitcast ([28 x i8]* @str.0 to [0 x i8]*), i64 28, %\"core::panic::location::Location\"* noundef align 8 dereferenceable(24) bitcast (<{ i8*, [16 x i8] }>* @alloc31 to %\"core::panic::location::Location\"*)) #7\n  unreachable\n", llvm_type: "label" }))
IF STATEMENT
terminator is InstructionValue { instruction_value: Value { name: "", address: 0x55b970c62520, is_const: false, is_null: false, is_undef: false, llvm_value: "  br i1 %_3.1, label %panic1, label %bb7, !prof !3", llvm_type: "void" } }
Operand 0 is Some(Left(IntValue(IntValue { int_value: Value { name: "_3.1", address: 0x55b970c62390, is_const: false, is_null: false, is_undef: false, llvm_value: "  %_3.1 = extractvalue { i32, i1 } %1, 1", llvm_type: "i1" } })))
Operand 1 is Some(Right(BasicBlock { address: 0x55b970c61b10, is_const: false, llvm_value: "\nbb7:                                              ; preds = %bb3, %bb1, %start, %bb5\n  %.0 = phi i32 [ %x, %bb5 ], [ 2147483643, %start ], [ %_5.0, %bb1 ], [ %_3.0, %bb3 ]\n  ret i32 %.0\n", llvm_type: "label" }))
Operand 2 is Some(Right(BasicBlock { address: 0x55b970c61bb0, is_const: false, llvm_value: "\npanic1:                                           ; preds = %bb3\n  call void @_ZN4core9panicking5panic17h4241c5ccea17facaE([0 x i8]* noundef nonnull align 1 bitcast ([28 x i8]* @str.0 to [0 x i8]*), i64 28, %\"core::panic::location::Location\"* noundef align 8 dereferenceable(24) bitcast (<{ i8*, [16 x i8] }>* @alloc33 to %\"core::panic::location::Location\"*)) #7\n  unreachable\n", llvm_type: "label" }))
SWITCH STATEMENT
terminator is InstructionValue { instruction_value: Value { name: "", address: 0x55b970c61c08, is_const: false, is_null: false, is_undef: false, llvm_value: "  switch i32 %x, label %bb1 [\n    i32 1, label %bb7\n    i32 2, label %bb3\n    i32 2147483647, label %bb5\n  ]", llvm_type: "void" } }
Operand 0 is Some(Left(IntValue(IntValue { int_value: Value { name: "x", address: 0x55b970c5da50, is_const: false, is_null: false, is_undef: false, llvm_value: "i32 %x", llvm_type: "i32" } })))
Operand 1 is Some(Right(BasicBlock { address: 0x55b970c61930, is_const: false, llvm_value: "\nbb1:                                              ; preds = %start\n  %0 = call { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %x, i32 1)\n  %_5.0 = extractvalue { i32, i1 } %0, 0\n  %_5.1 = extractvalue { i32, i1 } %0, 1\n  br i1 %_5.1, label %panic, label %bb7, !prof !3\n", llvm_type: "label" }))
Operand 2 is Some(Left(IntValue(IntValue { int_value: Value { name: "", address: 0x55b970c590c0, is_const: true, is_null: false, is_undef: false, llvm_value: "i32 1", llvm_type: "i32" } })))
Operand 3 is Some(Right(BasicBlock { address: 0x55b970c61b10, is_const: false, llvm_value: "\nbb7:                                              ; preds = %bb3, %bb1, %start, %bb5\n  %.0 = phi i32 [ %x, %bb5 ], [ 2147483643, %start ], [ %_5.0, %bb1 ], [ %_3.0, %bb3 ]\n  ret i32 %.0\n", llvm_type: "label" }))
Operand 4 is Some(Left(IntValue(IntValue { int_value: Value { name: "", address: 0x55b970c59090, is_const: true, is_null: false, is_undef: false, llvm_value: "i32 2", llvm_type: "i32" } })))
Operand 5 is Some(Right(BasicBlock { address: 0x55b970c619d0, is_const: false, llvm_value: "\nbb3:                                              ; preds = %start\n  %1 = call { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %x, i32 1)\n  %_3.0 = extractvalue { i32, i1 } %1, 0\n  %_3.1 = extractvalue { i32, i1 } %1, 1\n  br i1 %_3.1, label %panic1, label %bb7, !prof !3\n", llvm_type: "label" }))
Operand 6 is Some(Left(IntValue(IntValue { int_value: Value { name: "", address: 0x55b970c5eb70, is_const: true, is_null: false, is_undef: false, llvm_value: "i32 2147483647", llvm_type: "i32" } })))
Operand 7 is Some(Right(BasicBlock { address: 0x55b970c61a20, is_const: false, llvm_value: "\nbb5:                                              ; preds = %start\n  br label %bb7\n", llvm_type: "label" }))
Number of operands is 8
IF STATEMENT
terminator is InstructionValue { instruction_value: Value { name: "", address: 0x55b970c620d0, is_const: false, is_null: false, is_undef: false, llvm_value: "  br i1 %_5.1, label %panic, label %bb7, !prof !3", llvm_type: "void" } }
Operand 0 is Some(Left(IntValue(IntValue { int_value: Value { name: "_5.1", address: 0x55b970c61f40, is_const: false, is_null: false, is_undef: false, llvm_value: "  %_5.1 = extractvalue { i32, i1 } %0, 1", llvm_type: "i1" } })))
Operand 1 is Some(Right(BasicBlock { address: 0x55b970c61b10, is_const: false, llvm_value: "\nbb7:                                              ; preds = %bb3, %bb1, %start, %bb5\n  %.0 = phi i32 [ %x, %bb5 ], [ 2147483643, %start ], [ %_5.0, %bb1 ], [ %_3.0, %bb3 ]\n  ret i32 %.0\n", llvm_type: "label" }))
Operand 2 is Some(Right(BasicBlock { address: 0x55b970c61ac0, is_const: false, llvm_value: "\npanic:                                            ; preds = %bb1\n  call void @_ZN4core9panicking5panic17h4241c5ccea17facaE([0 x i8]* noundef nonnull align 1 bitcast ([28 x i8]* @str.0 to [0 x i8]*), i64 28, %\"core::panic::location::Location\"* noundef align 8 dereferenceable(24) bitcast (<{ i8*, [16 x i8] }>* @alloc31 to %\"core::panic::location::Location\"*)) #7\n  unreachable\n", llvm_type: "label" }))
IF STATEMENT
terminator is InstructionValue { instruction_value: Value { name: "", address: 0x55b970c62520, is_const: false, is_null: false, is_undef: false, llvm_value: "  br i1 %_3.1, label %panic1, label %bb7, !prof !3", llvm_type: "void" } }
Operand 0 is Some(Left(IntValue(IntValue { int_value: Value { name: "_3.1", address: 0x55b970c62390, is_const: false, is_null: false, is_undef: false, llvm_value: "  %_3.1 = extractvalue { i32, i1 } %1, 1", llvm_type: "i1" } })))
Operand 1 is Some(Right(BasicBlock { address: 0x55b970c61b10, is_const: false, llvm_value: "\nbb7:                                              ; preds = %bb3, %bb1, %start, %bb5\n  %.0 = phi i32 [ %x, %bb5 ], [ 2147483643, %start ], [ %_5.0, %bb1 ], [ %_3.0, %bb3 ]\n  ret i32 %.0\n", llvm_type: "label" }))
Operand 2 is Some(Right(BasicBlock { address: 0x55b970c61bb0, is_const: false, llvm_value: "\npanic1:                                           ; preds = %bb3\n  call void @_ZN4core9panicking5panic17h4241c5ccea17facaE([0 x i8]* noundef nonnull align 1 bitcast ([28 x i8]* @str.0 to [0 x i8]*), i64 28, %\"core::panic::location::Location\"* noundef align 8 dereferenceable(24) bitcast (<{ i8*, [16 x i8] }>* @alloc33 to %\"core::panic::location::Location\"*)) #7\n  unreachable\n", llvm_type: "label" }))
[2mJan 15 20:18:35.419[0m [34mDEBUG[0m wombat_symx: Forward sorted nodes:	["start", "bb1", "bb3", "bb5", "panic", "bb7", "panic1", "common_end"]
SWITCH STATEMENT
terminator is InstructionValue { instruction_value: Value { name: "", address: 0x55b970c61c08, is_const: false, is_null: false, is_undef: false, llvm_value: "  switch i32 %x, label %bb1 [\n    i32 1, label %bb7\n    i32 2, label %bb3\n    i32 2147483647, label %bb5\n  ]", llvm_type: "void" } }
Operand 0 is Some(Left(IntValue(IntValue { int_value: Value { name: "x", address: 0x55b970c5da50, is_const: false, is_null: false, is_undef: false, llvm_value: "i32 %x", llvm_type: "i32" } })))
Operand 1 is Some(Right(BasicBlock { address: 0x55b970c61930, is_const: false, llvm_value: "\nbb1:                                              ; preds = %start\n  %0 = call { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %x, i32 1)\n  %_5.0 = extractvalue { i32, i1 } %0, 0\n  %_5.1 = extractvalue { i32, i1 } %0, 1\n  br i1 %_5.1, label %panic, label %bb7, !prof !3\n", llvm_type: "label" }))
Operand 2 is Some(Left(IntValue(IntValue { int_value: Value { name: "", address: 0x55b970c590c0, is_const: true, is_null: false, is_undef: false, llvm_value: "i32 1", llvm_type: "i32" } })))
Operand 3 is Some(Right(BasicBlock { address: 0x55b970c61b10, is_const: false, llvm_value: "\nbb7:                                              ; preds = %bb3, %bb1, %start, %bb5\n  %.0 = phi i32 [ %x, %bb5 ], [ 2147483643, %start ], [ %_5.0, %bb1 ], [ %_3.0, %bb3 ]\n  ret i32 %.0\n", llvm_type: "label" }))
Operand 4 is Some(Left(IntValue(IntValue { int_value: Value { name: "", address: 0x55b970c59090, is_const: true, is_null: false, is_undef: false, llvm_value: "i32 2", llvm_type: "i32" } })))
Operand 5 is Some(Right(BasicBlock { address: 0x55b970c619d0, is_const: false, llvm_value: "\nbb3:                                              ; preds = %start\n  %1 = call { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %x, i32 1)\n  %_3.0 = extractvalue { i32, i1 } %1, 0\n  %_3.1 = extractvalue { i32, i1 } %1, 1\n  br i1 %_3.1, label %panic1, label %bb7, !prof !3\n", llvm_type: "label" }))
Operand 6 is Some(Left(IntValue(IntValue { int_value: Value { name: "", address: 0x55b970c5eb70, is_const: true, is_null: false, is_undef: false, llvm_value: "i32 2147483647", llvm_type: "i32" } })))
Operand 7 is Some(Right(BasicBlock { address: 0x55b970c61a20, is_const: false, llvm_value: "\nbb5:                                              ; preds = %start\n  br label %bb7\n", llvm_type: "label" }))
Number of operands is 8
IF STATEMENT
terminator is InstructionValue { instruction_value: Value { name: "", address: 0x55b970c620d0, is_const: false, is_null: false, is_undef: false, llvm_value: "  br i1 %_5.1, label %panic, label %bb7, !prof !3", llvm_type: "void" } }
Operand 0 is Some(Left(IntValue(IntValue { int_value: Value { name: "_5.1", address: 0x55b970c61f40, is_const: false, is_null: false, is_undef: false, llvm_value: "  %_5.1 = extractvalue { i32, i1 } %0, 1", llvm_type: "i1" } })))
Operand 1 is Some(Right(BasicBlock { address: 0x55b970c61b10, is_const: false, llvm_value: "\nbb7:                                              ; preds = %bb3, %bb1, %start, %bb5\n  %.0 = phi i32 [ %x, %bb5 ], [ 2147483643, %start ], [ %_5.0, %bb1 ], [ %_3.0, %bb3 ]\n  ret i32 %.0\n", llvm_type: "label" }))
Operand 2 is Some(Right(BasicBlock { address: 0x55b970c61ac0, is_const: false, llvm_value: "\npanic:                                            ; preds = %bb1\n  call void @_ZN4core9panicking5panic17h4241c5ccea17facaE([0 x i8]* noundef nonnull align 1 bitcast ([28 x i8]* @str.0 to [0 x i8]*), i64 28, %\"core::panic::location::Location\"* noundef align 8 dereferenceable(24) bitcast (<{ i8*, [16 x i8] }>* @alloc31 to %\"core::panic::location::Location\"*)) #7\n  unreachable\n", llvm_type: "label" }))
IF STATEMENT
terminator is InstructionValue { instruction_value: Value { name: "", address: 0x55b970c62520, is_const: false, is_null: false, is_undef: false, llvm_value: "  br i1 %_3.1, label %panic1, label %bb7, !prof !3", llvm_type: "void" } }
Operand 0 is Some(Left(IntValue(IntValue { int_value: Value { name: "_3.1", address: 0x55b970c62390, is_const: false, is_null: false, is_undef: false, llvm_value: "  %_3.1 = extractvalue { i32, i1 } %1, 1", llvm_type: "i1" } })))
Operand 1 is Some(Right(BasicBlock { address: 0x55b970c61b10, is_const: false, llvm_value: "\nbb7:                                              ; preds = %bb3, %bb1, %start, %bb5\n  %.0 = phi i32 [ %x, %bb5 ], [ 2147483643, %start ], [ %_5.0, %bb1 ], [ %_3.0, %bb3 ]\n  ret i32 %.0\n", llvm_type: "label" }))
Operand 2 is Some(Right(BasicBlock { address: 0x55b970c61bb0, is_const: false, llvm_value: "\npanic1:                                           ; preds = %bb3\n  call void @_ZN4core9panicking5panic17h4241c5ccea17facaE([0 x i8]* noundef nonnull align 1 bitcast ([28 x i8]* @str.0 to [0 x i8]*), i64 28, %\"core::panic::location::Location\"* noundef align 8 dereferenceable(24) bitcast (<{ i8*, [16 x i8] }>* @alloc33 to %\"core::panic::location::Location\"*)) #7\n  unreachable\n", llvm_type: "label" }))
SWITCH STATEMENT
terminator is InstructionValue { instruction_value: Value { name: "", address: 0x55b970c61c08, is_const: false, is_null: false, is_undef: false, llvm_value: "  switch i32 %x, label %bb1 [\n    i32 1, label %bb7\n    i32 2, label %bb3\n    i32 2147483647, label %bb5\n  ]", llvm_type: "void" } }
Operand 0 is Some(Left(IntValue(IntValue { int_value: Value { name: "x", address: 0x55b970c5da50, is_const: false, is_null: false, is_undef: false, llvm_value: "i32 %x", llvm_type: "i32" } })))
Operand 1 is Some(Right(BasicBlock { address: 0x55b970c61930, is_const: false, llvm_value: "\nbb1:                                              ; preds = %start\n  %0 = call { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %x, i32 1)\n  %_5.0 = extractvalue { i32, i1 } %0, 0\n  %_5.1 = extractvalue { i32, i1 } %0, 1\n  br i1 %_5.1, label %panic, label %bb7, !prof !3\n", llvm_type: "label" }))
Operand 2 is Some(Left(IntValue(IntValue { int_value: Value { name: "", address: 0x55b970c590c0, is_const: true, is_null: false, is_undef: false, llvm_value: "i32 1", llvm_type: "i32" } })))
Operand 3 is Some(Right(BasicBlock { address: 0x55b970c61b10, is_const: false, llvm_value: "\nbb7:                                              ; preds = %bb3, %bb1, %start, %bb5\n  %.0 = phi i32 [ %x, %bb5 ], [ 2147483643, %start ], [ %_5.0, %bb1 ], [ %_3.0, %bb3 ]\n  ret i32 %.0\n", llvm_type: "label" }))
Operand 4 is Some(Left(IntValue(IntValue { int_value: Value { name: "", address: 0x55b970c59090, is_const: true, is_null: false, is_undef: false, llvm_value: "i32 2", llvm_type: "i32" } })))
Operand 5 is Some(Right(BasicBlock { address: 0x55b970c619d0, is_const: false, llvm_value: "\nbb3:                                              ; preds = %start\n  %1 = call { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %x, i32 1)\n  %_3.0 = extractvalue { i32, i1 } %1, 0\n  %_3.1 = extractvalue { i32, i1 } %1, 1\n  br i1 %_3.1, label %panic1, label %bb7, !prof !3\n", llvm_type: "label" }))
Operand 6 is Some(Left(IntValue(IntValue { int_value: Value { name: "", address: 0x55b970c5eb70, is_const: true, is_null: false, is_undef: false, llvm_value: "i32 2147483647", llvm_type: "i32" } })))
Operand 7 is Some(Right(BasicBlock { address: 0x55b970c61a20, is_const: false, llvm_value: "\nbb5:                                              ; preds = %start\n  br label %bb7\n", llvm_type: "label" }))
Number of operands is 8
IF STATEMENT
terminator is InstructionValue { instruction_value: Value { name: "", address: 0x55b970c620d0, is_const: false, is_null: false, is_undef: false, llvm_value: "  br i1 %_5.1, label %panic, label %bb7, !prof !3", llvm_type: "void" } }
Operand 0 is Some(Left(IntValue(IntValue { int_value: Value { name: "_5.1", address: 0x55b970c61f40, is_const: false, is_null: false, is_undef: false, llvm_value: "  %_5.1 = extractvalue { i32, i1 } %0, 1", llvm_type: "i1" } })))
Operand 1 is Some(Right(BasicBlock { address: 0x55b970c61b10, is_const: false, llvm_value: "\nbb7:                                              ; preds = %bb3, %bb1, %start, %bb5\n  %.0 = phi i32 [ %x, %bb5 ], [ 2147483643, %start ], [ %_5.0, %bb1 ], [ %_3.0, %bb3 ]\n  ret i32 %.0\n", llvm_type: "label" }))
Operand 2 is Some(Right(BasicBlock { address: 0x55b970c61ac0, is_const: false, llvm_value: "\npanic:                                            ; preds = %bb1\n  call void @_ZN4core9panicking5panic17h4241c5ccea17facaE([0 x i8]* noundef nonnull align 1 bitcast ([28 x i8]* @str.0 to [0 x i8]*), i64 28, %\"core::panic::location::Location\"* noundef align 8 dereferenceable(24) bitcast (<{ i8*, [16 x i8] }>* @alloc31 to %\"core::panic::location::Location\"*)) #7\n  unreachable\n", llvm_type: "label" }))
IF STATEMENT
terminator is InstructionValue { instruction_value: Value { name: "", address: 0x55b970c62520, is_const: false, is_null: false, is_undef: false, llvm_value: "  br i1 %_3.1, label %panic1, label %bb7, !prof !3", llvm_type: "void" } }
Operand 0 is Some(Left(IntValue(IntValue { int_value: Value { name: "_3.1", address: 0x55b970c62390, is_const: false, is_null: false, is_undef: false, llvm_value: "  %_3.1 = extractvalue { i32, i1 } %1, 1", llvm_type: "i1" } })))
Operand 1 is Some(Right(BasicBlock { address: 0x55b970c61b10, is_const: false, llvm_value: "\nbb7:                                              ; preds = %bb3, %bb1, %start, %bb5\n  %.0 = phi i32 [ %x, %bb5 ], [ 2147483643, %start ], [ %_5.0, %bb1 ], [ %_3.0, %bb3 ]\n  ret i32 %.0\n", llvm_type: "label" }))
Operand 2 is Some(Right(BasicBlock { address: 0x55b970c61bb0, is_const: false, llvm_value: "\npanic1:                                           ; preds = %bb3\n  call void @_ZN4core9panicking5panic17h4241c5ccea17facaE([0 x i8]* noundef nonnull align 1 bitcast ([28 x i8]* @str.0 to [0 x i8]*), i64 28, %\"core::panic::location::Location\"* noundef align 8 dereferenceable(24) bitcast (<{ i8*, [16 x i8] }>* @alloc33 to %\"core::panic::location::Location\"*)) #7\n  unreachable\n", llvm_type: "label" }))
[2mJan 15 20:18:35.420[0m [34mDEBUG[0m wombat_symx: Backward sorted nodes:	["common_end", "panic1", "bb7", "panic", "bb5", "bb3", "bb1", "start"]
SWITCH STATEMENT
terminator is InstructionValue { instruction_value: Value { name: "", address: 0x55b970c61c08, is_const: false, is_null: false, is_undef: false, llvm_value: "  switch i32 %x, label %bb1 [\n    i32 1, label %bb7\n    i32 2, label %bb3\n    i32 2147483647, label %bb5\n  ]", llvm_type: "void" } }
Operand 0 is Some(Left(IntValue(IntValue { int_value: Value { name: "x", address: 0x55b970c5da50, is_const: false, is_null: false, is_undef: false, llvm_value: "i32 %x", llvm_type: "i32" } })))
Operand 1 is Some(Right(BasicBlock { address: 0x55b970c61930, is_const: false, llvm_value: "\nbb1:                                              ; preds = %start\n  %0 = call { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %x, i32 1)\n  %_5.0 = extractvalue { i32, i1 } %0, 0\n  %_5.1 = extractvalue { i32, i1 } %0, 1\n  br i1 %_5.1, label %panic, label %bb7, !prof !3\n", llvm_type: "label" }))
Operand 2 is Some(Left(IntValue(IntValue { int_value: Value { name: "", address: 0x55b970c590c0, is_const: true, is_null: false, is_undef: false, llvm_value: "i32 1", llvm_type: "i32" } })))
Operand 3 is Some(Right(BasicBlock { address: 0x55b970c61b10, is_const: false, llvm_value: "\nbb7:                                              ; preds = %bb3, %bb1, %start, %bb5\n  %.0 = phi i32 [ %x, %bb5 ], [ 2147483643, %start ], [ %_5.0, %bb1 ], [ %_3.0, %bb3 ]\n  ret i32 %.0\n", llvm_type: "label" }))
Operand 4 is Some(Left(IntValue(IntValue { int_value: Value { name: "", address: 0x55b970c59090, is_const: true, is_null: false, is_undef: false, llvm_value: "i32 2", llvm_type: "i32" } })))
Operand 5 is Some(Right(BasicBlock { address: 0x55b970c619d0, is_const: false, llvm_value: "\nbb3:                                              ; preds = %start\n  %1 = call { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %x, i32 1)\n  %_3.0 = extractvalue { i32, i1 } %1, 0\n  %_3.1 = extractvalue { i32, i1 } %1, 1\n  br i1 %_3.1, label %panic1, label %bb7, !prof !3\n", llvm_type: "label" }))
Operand 6 is Some(Left(IntValue(IntValue { int_value: Value { name: "", address: 0x55b970c5eb70, is_const: true, is_null: false, is_undef: false, llvm_value: "i32 2147483647", llvm_type: "i32" } })))
Operand 7 is Some(Right(BasicBlock { address: 0x55b970c61a20, is_const: false, llvm_value: "\nbb5:                                              ; preds = %start\n  br label %bb7\n", llvm_type: "label" }))
Number of operands is 8
IF STATEMENT
terminator is InstructionValue { instruction_value: Value { name: "", address: 0x55b970c620d0, is_const: false, is_null: false, is_undef: false, llvm_value: "  br i1 %_5.1, label %panic, label %bb7, !prof !3", llvm_type: "void" } }
Operand 0 is Some(Left(IntValue(IntValue { int_value: Value { name: "_5.1", address: 0x55b970c61f40, is_const: false, is_null: false, is_undef: false, llvm_value: "  %_5.1 = extractvalue { i32, i1 } %0, 1", llvm_type: "i1" } })))
Operand 1 is Some(Right(BasicBlock { address: 0x55b970c61b10, is_const: false, llvm_value: "\nbb7:                                              ; preds = %bb3, %bb1, %start, %bb5\n  %.0 = phi i32 [ %x, %bb5 ], [ 2147483643, %start ], [ %_5.0, %bb1 ], [ %_3.0, %bb3 ]\n  ret i32 %.0\n", llvm_type: "label" }))
Operand 2 is Some(Right(BasicBlock { address: 0x55b970c61ac0, is_const: false, llvm_value: "\npanic:                                            ; preds = %bb1\n  call void @_ZN4core9panicking5panic17h4241c5ccea17facaE([0 x i8]* noundef nonnull align 1 bitcast ([28 x i8]* @str.0 to [0 x i8]*), i64 28, %\"core::panic::location::Location\"* noundef align 8 dereferenceable(24) bitcast (<{ i8*, [16 x i8] }>* @alloc31 to %\"core::panic::location::Location\"*)) #7\n  unreachable\n", llvm_type: "label" }))
IF STATEMENT
terminator is InstructionValue { instruction_value: Value { name: "", address: 0x55b970c62520, is_const: false, is_null: false, is_undef: false, llvm_value: "  br i1 %_3.1, label %panic1, label %bb7, !prof !3", llvm_type: "void" } }
Operand 0 is Some(Left(IntValue(IntValue { int_value: Value { name: "_3.1", address: 0x55b970c62390, is_const: false, is_null: false, is_undef: false, llvm_value: "  %_3.1 = extractvalue { i32, i1 } %1, 1", llvm_type: "i1" } })))
Operand 1 is Some(Right(BasicBlock { address: 0x55b970c61b10, is_const: false, llvm_value: "\nbb7:                                              ; preds = %bb3, %bb1, %start, %bb5\n  %.0 = phi i32 [ %x, %bb5 ], [ 2147483643, %start ], [ %_5.0, %bb1 ], [ %_3.0, %bb3 ]\n  ret i32 %.0\n", llvm_type: "label" }))
Operand 2 is Some(Right(BasicBlock { address: 0x55b970c61bb0, is_const: false, llvm_value: "\npanic1:                                           ; preds = %bb3\n  call void @_ZN4core9panicking5panic17h4241c5ccea17facaE([0 x i8]* noundef nonnull align 1 bitcast ([28 x i8]* @str.0 to [0 x i8]*), i64 28, %\"core::panic::location::Location\"* noundef align 8 dereferenceable(24) bitcast (<{ i8*, [16 x i8] }>* @alloc33 to %\"core::panic::location::Location\"*)) #7\n  unreachable\n", llvm_type: "label" }))
SWITCH STATEMENT
terminator is InstructionValue { instruction_value: Value { name: "", address: 0x55b970c61c08, is_const: false, is_null: false, is_undef: false, llvm_value: "  switch i32 %x, label %bb1 [\n    i32 1, label %bb7\n    i32 2, label %bb3\n    i32 2147483647, label %bb5\n  ]", llvm_type: "void" } }
Operand 0 is Some(Left(IntValue(IntValue { int_value: Value { name: "x", address: 0x55b970c5da50, is_const: false, is_null: false, is_undef: false, llvm_value: "i32 %x", llvm_type: "i32" } })))
Operand 1 is Some(Right(BasicBlock { address: 0x55b970c61930, is_const: false, llvm_value: "\nbb1:                                              ; preds = %start\n  %0 = call { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %x, i32 1)\n  %_5.0 = extractvalue { i32, i1 } %0, 0\n  %_5.1 = extractvalue { i32, i1 } %0, 1\n  br i1 %_5.1, label %panic, label %bb7, !prof !3\n", llvm_type: "label" }))
Operand 2 is Some(Left(IntValue(IntValue { int_value: Value { name: "", address: 0x55b970c590c0, is_const: true, is_null: false, is_undef: false, llvm_value: "i32 1", llvm_type: "i32" } })))
Operand 3 is Some(Right(BasicBlock { address: 0x55b970c61b10, is_const: false, llvm_value: "\nbb7:                                              ; preds = %bb3, %bb1, %start, %bb5\n  %.0 = phi i32 [ %x, %bb5 ], [ 2147483643, %start ], [ %_5.0, %bb1 ], [ %_3.0, %bb3 ]\n  ret i32 %.0\n", llvm_type: "label" }))
Operand 4 is Some(Left(IntValue(IntValue { int_value: Value { name: "", address: 0x55b970c59090, is_const: true, is_null: false, is_undef: false, llvm_value: "i32 2", llvm_type: "i32" } })))
Operand 5 is Some(Right(BasicBlock { address: 0x55b970c619d0, is_const: false, llvm_value: "\nbb3:                                              ; preds = %start\n  %1 = call { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %x, i32 1)\n  %_3.0 = extractvalue { i32, i1 } %1, 0\n  %_3.1 = extractvalue { i32, i1 } %1, 1\n  br i1 %_3.1, label %panic1, label %bb7, !prof !3\n", llvm_type: "label" }))
Operand 6 is Some(Left(IntValue(IntValue { int_value: Value { name: "", address: 0x55b970c5eb70, is_const: true, is_null: false, is_undef: false, llvm_value: "i32 2147483647", llvm_type: "i32" } })))
Operand 7 is Some(Right(BasicBlock { address: 0x55b970c61a20, is_const: false, llvm_value: "\nbb5:                                              ; preds = %start\n  br label %bb7\n", llvm_type: "label" }))
Number of operands is 8
IF STATEMENT
terminator is InstructionValue { instruction_value: Value { name: "", address: 0x55b970c620d0, is_const: false, is_null: false, is_undef: false, llvm_value: "  br i1 %_5.1, label %panic, label %bb7, !prof !3", llvm_type: "void" } }
Operand 0 is Some(Left(IntValue(IntValue { int_value: Value { name: "_5.1", address: 0x55b970c61f40, is_const: false, is_null: false, is_undef: false, llvm_value: "  %_5.1 = extractvalue { i32, i1 } %0, 1", llvm_type: "i1" } })))
Operand 1 is Some(Right(BasicBlock { address: 0x55b970c61b10, is_const: false, llvm_value: "\nbb7:                                              ; preds = %bb3, %bb1, %start, %bb5\n  %.0 = phi i32 [ %x, %bb5 ], [ 2147483643, %start ], [ %_5.0, %bb1 ], [ %_3.0, %bb3 ]\n  ret i32 %.0\n", llvm_type: "label" }))
Operand 2 is Some(Right(BasicBlock { address: 0x55b970c61ac0, is_const: false, llvm_value: "\npanic:                                            ; preds = %bb1\n  call void @_ZN4core9panicking5panic17h4241c5ccea17facaE([0 x i8]* noundef nonnull align 1 bitcast ([28 x i8]* @str.0 to [0 x i8]*), i64 28, %\"core::panic::location::Location\"* noundef align 8 dereferenceable(24) bitcast (<{ i8*, [16 x i8] }>* @alloc31 to %\"core::panic::location::Location\"*)) #7\n  unreachable\n", llvm_type: "label" }))
IF STATEMENT
terminator is InstructionValue { instruction_value: Value { name: "", address: 0x55b970c62520, is_const: false, is_null: false, is_undef: false, llvm_value: "  br i1 %_3.1, label %panic1, label %bb7, !prof !3", llvm_type: "void" } }
Operand 0 is Some(Left(IntValue(IntValue { int_value: Value { name: "_3.1", address: 0x55b970c62390, is_const: false, is_null: false, is_undef: false, llvm_value: "  %_3.1 = extractvalue { i32, i1 } %1, 1", llvm_type: "i1" } })))
Operand 1 is Some(Right(BasicBlock { address: 0x55b970c61b10, is_const: false, llvm_value: "\nbb7:                                              ; preds = %bb3, %bb1, %start, %bb5\n  %.0 = phi i32 [ %x, %bb5 ], [ 2147483643, %start ], [ %_5.0, %bb1 ], [ %_3.0, %bb3 ]\n  ret i32 %.0\n", llvm_type: "label" }))
Operand 2 is Some(Right(BasicBlock { address: 0x55b970c61bb0, is_const: false, llvm_value: "\npanic1:                                           ; preds = %bb3\n  call void @_ZN4core9panicking5panic17h4241c5ccea17facaE([0 x i8]* noundef nonnull align 1 bitcast ([28 x i8]* @str.0 to [0 x i8]*), i64 28, %\"core::panic::location::Location\"* noundef align 8 dereferenceable(24) bitcast (<{ i8*, [16 x i8] }>* @alloc33 to %\"core::panic::location::Location\"*)) #7\n  unreachable\n", llvm_type: "label" }))
SWITCH STATEMENT
terminator is InstructionValue { instruction_value: Value { name: "", address: 0x55b970c61c08, is_const: false, is_null: false, is_undef: false, llvm_value: "  switch i32 %x, label %bb1 [\n    i32 1, label %bb7\n    i32 2, label %bb3\n    i32 2147483647, label %bb5\n  ]", llvm_type: "void" } }
Operand 0 is Some(Left(IntValue(IntValue { int_value: Value { name: "x", address: 0x55b970c5da50, is_const: false, is_null: false, is_undef: false, llvm_value: "i32 %x", llvm_type: "i32" } })))
Operand 1 is Some(Right(BasicBlock { address: 0x55b970c61930, is_const: false, llvm_value: "\nbb1:                                              ; preds = %start\n  %0 = call { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %x, i32 1)\n  %_5.0 = extractvalue { i32, i1 } %0, 0\n  %_5.1 = extractvalue { i32, i1 } %0, 1\n  br i1 %_5.1, label %panic, label %bb7, !prof !3\n", llvm_type: "label" }))
Operand 2 is Some(Left(IntValue(IntValue { int_value: Value { name: "", address: 0x55b970c590c0, is_const: true, is_null: false, is_undef: false, llvm_value: "i32 1", llvm_type: "i32" } })))
Operand 3 is Some(Right(BasicBlock { address: 0x55b970c61b10, is_const: false, llvm_value: "\nbb7:                                              ; preds = %bb3, %bb1, %start, %bb5\n  %.0 = phi i32 [ %x, %bb5 ], [ 2147483643, %start ], [ %_5.0, %bb1 ], [ %_3.0, %bb3 ]\n  ret i32 %.0\n", llvm_type: "label" }))
Operand 4 is Some(Left(IntValue(IntValue { int_value: Value { name: "", address: 0x55b970c59090, is_const: true, is_null: false, is_undef: false, llvm_value: "i32 2", llvm_type: "i32" } })))
Operand 5 is Some(Right(BasicBlock { address: 0x55b970c619d0, is_const: false, llvm_value: "\nbb3:                                              ; preds = %start\n  %1 = call { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %x, i32 1)\n  %_3.0 = extractvalue { i32, i1 } %1, 0\n  %_3.1 = extractvalue { i32, i1 } %1, 1\n  br i1 %_3.1, label %panic1, label %bb7, !prof !3\n", llvm_type: "label" }))
Operand 6 is Some(Left(IntValue(IntValue { int_value: Value { name: "", address: 0x55b970c5eb70, is_const: true, is_null: false, is_undef: false, llvm_value: "i32 2147483647", llvm_type: "i32" } })))
Operand 7 is Some(Right(BasicBlock { address: 0x55b970c61a20, is_const: false, llvm_value: "\nbb5:                                              ; preds = %start\n  br label %bb7\n", llvm_type: "label" }))
Number of operands is 8
IF STATEMENT
terminator is InstructionValue { instruction_value: Value { name: "", address: 0x55b970c620d0, is_const: false, is_null: false, is_undef: false, llvm_value: "  br i1 %_5.1, label %panic, label %bb7, !prof !3", llvm_type: "void" } }
Operand 0 is Some(Left(IntValue(IntValue { int_value: Value { name: "_5.1", address: 0x55b970c61f40, is_const: false, is_null: false, is_undef: false, llvm_value: "  %_5.1 = extractvalue { i32, i1 } %0, 1", llvm_type: "i1" } })))
Operand 1 is Some(Right(BasicBlock { address: 0x55b970c61b10, is_const: false, llvm_value: "\nbb7:                                              ; preds = %bb3, %bb1, %start, %bb5\n  %.0 = phi i32 [ %x, %bb5 ], [ 2147483643, %start ], [ %_5.0, %bb1 ], [ %_3.0, %bb3 ]\n  ret i32 %.0\n", llvm_type: "label" }))
Operand 2 is Some(Right(BasicBlock { address: 0x55b970c61ac0, is_const: false, llvm_value: "\npanic:                                            ; preds = %bb1\n  call void @_ZN4core9panicking5panic17h4241c5ccea17facaE([0 x i8]* noundef nonnull align 1 bitcast ([28 x i8]* @str.0 to [0 x i8]*), i64 28, %\"core::panic::location::Location\"* noundef align 8 dereferenceable(24) bitcast (<{ i8*, [16 x i8] }>* @alloc31 to %\"core::panic::location::Location\"*)) #7\n  unreachable\n", llvm_type: "label" }))
IF STATEMENT
terminator is InstructionValue { instruction_value: Value { name: "", address: 0x55b970c62520, is_const: false, is_null: false, is_undef: false, llvm_value: "  br i1 %_3.1, label %panic1, label %bb7, !prof !3", llvm_type: "void" } }
Operand 0 is Some(Left(IntValue(IntValue { int_value: Value { name: "_3.1", address: 0x55b970c62390, is_const: false, is_null: false, is_undef: false, llvm_value: "  %_3.1 = extractvalue { i32, i1 } %1, 1", llvm_type: "i1" } })))
Operand 1 is Some(Right(BasicBlock { address: 0x55b970c61b10, is_const: false, llvm_value: "\nbb7:                                              ; preds = %bb3, %bb1, %start, %bb5\n  %.0 = phi i32 [ %x, %bb5 ], [ 2147483643, %start ], [ %_5.0, %bb1 ], [ %_3.0, %bb3 ]\n  ret i32 %.0\n", llvm_type: "label" }))
Operand 2 is Some(Right(BasicBlock { address: 0x55b970c61bb0, is_const: false, llvm_value: "\npanic1:                                           ; preds = %bb3\n  call void @_ZN4core9panicking5panic17h4241c5ccea17facaE([0 x i8]* noundef nonnull align 1 bitcast ([28 x i8]* @str.0 to [0 x i8]*), i64 28, %\"core::panic::location::Location\"* noundef align 8 dereferenceable(24) bitcast (<{ i8*, [16 x i8] }>* @alloc33 to %\"core::panic::location::Location\"*)) #7\n  unreachable\n", llvm_type: "label" }))
SWITCH STATEMENT
terminator is InstructionValue { instruction_value: Value { name: "", address: 0x55b970c61c08, is_const: false, is_null: false, is_undef: false, llvm_value: "  switch i32 %x, label %bb1 [\n    i32 1, label %bb7\n    i32 2, label %bb3\n    i32 2147483647, label %bb5\n  ]", llvm_type: "void" } }
Operand 0 is Some(Left(IntValue(IntValue { int_value: Value { name: "x", address: 0x55b970c5da50, is_const: false, is_null: false, is_undef: false, llvm_value: "i32 %x", llvm_type: "i32" } })))
Operand 1 is Some(Right(BasicBlock { address: 0x55b970c61930, is_const: false, llvm_value: "\nbb1:                                              ; preds = %start\n  %0 = call { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %x, i32 1)\n  %_5.0 = extractvalue { i32, i1 } %0, 0\n  %_5.1 = extractvalue { i32, i1 } %0, 1\n  br i1 %_5.1, label %panic, label %bb7, !prof !3\n", llvm_type: "label" }))
Operand 2 is Some(Left(IntValue(IntValue { int_value: Value { name: "", address: 0x55b970c590c0, is_const: true, is_null: false, is_undef: false, llvm_value: "i32 1", llvm_type: "i32" } })))
Operand 3 is Some(Right(BasicBlock { address: 0x55b970c61b10, is_const: false, llvm_value: "\nbb7:                                              ; preds = %bb3, %bb1, %start, %bb5\n  %.0 = phi i32 [ %x, %bb5 ], [ 2147483643, %start ], [ %_5.0, %bb1 ], [ %_3.0, %bb3 ]\n  ret i32 %.0\n", llvm_type: "label" }))
Operand 4 is Some(Left(IntValue(IntValue { int_value: Value { name: "", address: 0x55b970c59090, is_const: true, is_null: false, is_undef: false, llvm_value: "i32 2", llvm_type: "i32" } })))
Operand 5 is Some(Right(BasicBlock { address: 0x55b970c619d0, is_const: false, llvm_value: "\nbb3:                                              ; preds = %start\n  %1 = call { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %x, i32 1)\n  %_3.0 = extractvalue { i32, i1 } %1, 0\n  %_3.1 = extractvalue { i32, i1 } %1, 1\n  br i1 %_3.1, label %panic1, label %bb7, !prof !3\n", llvm_type: "label" }))
Operand 6 is Some(Left(IntValue(IntValue { int_value: Value { name: "", address: 0x55b970c5eb70, is_const: true, is_null: false, is_undef: false, llvm_value: "i32 2147483647", llvm_type: "i32" } })))
Operand 7 is Some(Right(BasicBlock { address: 0x55b970c61a20, is_const: false, llvm_value: "\nbb5:                                              ; preds = %start\n  br label %bb7\n", llvm_type: "label" }))
Number of operands is 8
IF STATEMENT
terminator is InstructionValue { instruction_value: Value { name: "", address: 0x55b970c620d0, is_const: false, is_null: false, is_undef: false, llvm_value: "  br i1 %_5.1, label %panic, label %bb7, !prof !3", llvm_type: "void" } }
Operand 0 is Some(Left(IntValue(IntValue { int_value: Value { name: "_5.1", address: 0x55b970c61f40, is_const: false, is_null: false, is_undef: false, llvm_value: "  %_5.1 = extractvalue { i32, i1 } %0, 1", llvm_type: "i1" } })))
Operand 1 is Some(Right(BasicBlock { address: 0x55b970c61b10, is_const: false, llvm_value: "\nbb7:                                              ; preds = %bb3, %bb1, %start, %bb5\n  %.0 = phi i32 [ %x, %bb5 ], [ 2147483643, %start ], [ %_5.0, %bb1 ], [ %_3.0, %bb3 ]\n  ret i32 %.0\n", llvm_type: "label" }))
Operand 2 is Some(Right(BasicBlock { address: 0x55b970c61ac0, is_const: false, llvm_value: "\npanic:                                            ; preds = %bb1\n  call void @_ZN4core9panicking5panic17h4241c5ccea17facaE([0 x i8]* noundef nonnull align 1 bitcast ([28 x i8]* @str.0 to [0 x i8]*), i64 28, %\"core::panic::location::Location\"* noundef align 8 dereferenceable(24) bitcast (<{ i8*, [16 x i8] }>* @alloc31 to %\"core::panic::location::Location\"*)) #7\n  unreachable\n", llvm_type: "label" }))
IF STATEMENT
terminator is InstructionValue { instruction_value: Value { name: "", address: 0x55b970c62520, is_const: false, is_null: false, is_undef: false, llvm_value: "  br i1 %_3.1, label %panic1, label %bb7, !prof !3", llvm_type: "void" } }
Operand 0 is Some(Left(IntValue(IntValue { int_value: Value { name: "_3.1", address: 0x55b970c62390, is_const: false, is_null: false, is_undef: false, llvm_value: "  %_3.1 = extractvalue { i32, i1 } %1, 1", llvm_type: "i1" } })))
Operand 1 is Some(Right(BasicBlock { address: 0x55b970c61b10, is_const: false, llvm_value: "\nbb7:                                              ; preds = %bb3, %bb1, %start, %bb5\n  %.0 = phi i32 [ %x, %bb5 ], [ 2147483643, %start ], [ %_5.0, %bb1 ], [ %_3.0, %bb3 ]\n  ret i32 %.0\n", llvm_type: "label" }))
Operand 2 is Some(Right(BasicBlock { address: 0x55b970c61bb0, is_const: false, llvm_value: "\npanic1:                                           ; preds = %bb3\n  call void @_ZN4core9panicking5panic17h4241c5ccea17facaE([0 x i8]* noundef nonnull align 1 bitcast ([28 x i8]* @str.0 to [0 x i8]*), i64 28, %\"core::panic::location::Location\"* noundef align 8 dereferenceable(24) bitcast (<{ i8*, [16 x i8] }>* @alloc33 to %\"core::panic::location::Location\"*)) #7\n  unreachable\n", llvm_type: "label" }))
[2mJan 15 20:18:35.458[0m [34mDEBUG[0m wombat_symx: Unsupported Call function "_ZN4core9panicking5panic17h4241c5ccea17facaE"
IF HAS NUM OPERANDS 3
IF HAS TERMINATOR InstructionValue { instruction_value: Value { name: "", address: 0x55b970c62520, is_const: false, is_null: false, is_undef: false, llvm_value: "  br i1 %_3.1, label %panic1, label %bb7, !prof !3", llvm_type: "void" } }
IF HAS NODE "panic1"
TEST 123 "  %_3.1 = extractvalue { i32, i1 } %1, 1"
IF HAS TARGET VAL true
IF HAS TARGET VAL VAR true
IF HAS SWITCH VAR %_3.1
IF HAS DISCRIMINANT IntValue(IntValue { int_value: Value { name: "_3.1", address: 0x55b970c62390, is_const: false, is_null: false, is_undef: false, llvm_value: "  %_3.1 = extractvalue { i32, i1 } %1, 1", llvm_type: "i1" } })
IF HAS ENTRY CONDITION (= %_3.1 true)
SWITCH HAS NUM OPERANDS 8
SWITCH HAS TERMINATOR InstructionValue { instruction_value: Value { name: "", address: 0x55b970c61c08, is_const: false, is_null: false, is_undef: false, llvm_value: "  switch i32 %x, label %bb1 [\n    i32 1, label %bb7\n    i32 2, label %bb3\n    i32 2147483647, label %bb5\n  ]", llvm_type: "void" } }
SWITCH HAS NODE "bb7"
Operand 0 is IntValue(IntValue { int_value: Value { name: "x", address: 0x55b970c5da50, is_const: false, is_null: false, is_undef: false, llvm_value: "i32 %x", llvm_type: "i32" } })
Operand 1 is BasicBlock { address: 0x55b970c61930, is_const: false, llvm_value: "\nbb1:                                              ; preds = %start\n  %0 = call { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %x, i32 1)\n  %_5.0 = extractvalue { i32, i1 } %0, 0\n  %_5.1 = extractvalue { i32, i1 } %0, 1\n  br i1 %_5.1, label %panic, label %bb7, !prof !3\n", llvm_type: "label" }
Operand 2 is IntValue(IntValue { int_value: Value { name: "", address: 0x55b970c590c0, is_const: true, is_null: false, is_undef: false, llvm_value: "i32 1", llvm_type: "i32" } })
Operand 3 is BasicBlock { address: 0x55b970c61b10, is_const: false, llvm_value: "\nbb7:                                              ; preds = %bb3, %bb1, %start, %bb5\n  %.0 = phi i32 [ %x, %bb5 ], [ 2147483643, %start ], [ %_5.0, %bb1 ], [ %_3.0, %bb3 ]\n  ret i32 %.0\n", llvm_type: "label" }
FUCKKKKKKKKKKK
TEST 123 "i32 1"
TEST 123 "i32 %x"
SWITCH HAS TARGET VAL IntValue(IntValue { int_value: Value { name: "", address: 0x55b970c590c0, is_const: true, is_null: false, is_undef: false, llvm_value: "i32 1", llvm_type: "i32" } })
SWITCH HAS TARGET VAL VAR const_1
SWITCH HAS SWITCH VAR %x
SWITCH HAS DISCRIMINANT IntValue(IntValue { int_value: Value { name: "x", address: 0x55b970c5da50, is_const: false, is_null: false, is_undef: false, llvm_value: "i32 %x", llvm_type: "i32" } })
SWITCH HAS UNWRAPPED DISCRIMINANT IntValue { int_value: Value { name: "x", address: 0x55b970c5da50, is_const: false, is_null: false, is_undef: false, llvm_value: "i32 %x", llvm_type: "i32" } }
SWITCH HAS ENTRY CONDITION (= %x const_1)
IF HAS NUM OPERANDS 3
IF HAS TERMINATOR InstructionValue { instruction_value: Value { name: "", address: 0x55b970c620d0, is_const: false, is_null: false, is_undef: false, llvm_value: "  br i1 %_5.1, label %panic, label %bb7, !prof !3", llvm_type: "void" } }
IF HAS NODE "bb7"
TEST 123 "  %_5.1 = extractvalue { i32, i1 } %0, 1"
IF HAS TARGET VAL false
IF HAS TARGET VAL VAR false
IF HAS SWITCH VAR %_5.1
IF HAS DISCRIMINANT IntValue(IntValue { int_value: Value { name: "_5.1", address: 0x55b970c61f40, is_const: false, is_null: false, is_undef: false, llvm_value: "  %_5.1 = extractvalue { i32, i1 } %0, 1", llvm_type: "i1" } })
IF HAS ENTRY CONDITION (= %_5.1 false)
IF HAS NUM OPERANDS 3
IF HAS TERMINATOR InstructionValue { instruction_value: Value { name: "", address: 0x55b970c62520, is_const: false, is_null: false, is_undef: false, llvm_value: "  br i1 %_3.1, label %panic1, label %bb7, !prof !3", llvm_type: "void" } }
IF HAS NODE "bb7"
TEST 123 "  %_3.1 = extractvalue { i32, i1 } %1, 1"
IF HAS TARGET VAL false
IF HAS TARGET VAL VAR false
IF HAS SWITCH VAR %_3.1
IF HAS DISCRIMINANT IntValue(IntValue { int_value: Value { name: "_3.1", address: 0x55b970c62390, is_const: false, is_null: false, is_undef: false, llvm_value: "  %_3.1 = extractvalue { i32, i1 } %1, 1", llvm_type: "i1" } })
IF HAS ENTRY CONDITION (= %_3.1 false)
[2mJan 15 20:18:35.461[0m [34mDEBUG[0m wombat_symx: Unsupported Call function "_ZN4core9panicking5panic17h4241c5ccea17facaE"
IF HAS NUM OPERANDS 3
IF HAS TERMINATOR InstructionValue { instruction_value: Value { name: "", address: 0x55b970c620d0, is_const: false, is_null: false, is_undef: false, llvm_value: "  br i1 %_5.1, label %panic, label %bb7, !prof !3", llvm_type: "void" } }
IF HAS NODE "panic"
TEST 123 "  %_5.1 = extractvalue { i32, i1 } %0, 1"
IF HAS TARGET VAL true
IF HAS TARGET VAL VAR true
IF HAS SWITCH VAR %_5.1
IF HAS DISCRIMINANT IntValue(IntValue { int_value: Value { name: "_5.1", address: 0x55b970c61f40, is_const: false, is_null: false, is_undef: false, llvm_value: "  %_5.1 = extractvalue { i32, i1 } %0, 1", llvm_type: "i1" } })
IF HAS ENTRY CONDITION (= %_5.1 true)
TEST 123 "  %.0 = phi i32 [ %x, %bb5 ], [ 2147483643, %start ], [ %_5.0, %bb1 ], [ %_3.0, %bb3 ]"
TEST 123 "i32 %x"
SWITCH HAS NUM OPERANDS 8
SWITCH HAS TERMINATOR InstructionValue { instruction_value: Value { name: "", address: 0x55b970c61c08, is_const: false, is_null: false, is_undef: false, llvm_value: "  switch i32 %x, label %bb1 [\n    i32 1, label %bb7\n    i32 2, label %bb3\n    i32 2147483647, label %bb5\n  ]", llvm_type: "void" } }
SWITCH HAS NODE "bb5"
Operand 0 is IntValue(IntValue { int_value: Value { name: "x", address: 0x55b970c5da50, is_const: false, is_null: false, is_undef: false, llvm_value: "i32 %x", llvm_type: "i32" } })
Operand 1 is BasicBlock { address: 0x55b970c61930, is_const: false, llvm_value: "\nbb1:                                              ; preds = %start\n  %0 = call { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %x, i32 1)\n  %_5.0 = extractvalue { i32, i1 } %0, 0\n  %_5.1 = extractvalue { i32, i1 } %0, 1\n  br i1 %_5.1, label %panic, label %bb7, !prof !3\n", llvm_type: "label" }
Operand 2 is IntValue(IntValue { int_value: Value { name: "", address: 0x55b970c590c0, is_const: true, is_null: false, is_undef: false, llvm_value: "i32 1", llvm_type: "i32" } })
Operand 3 is BasicBlock { address: 0x55b970c61b10, is_const: false, llvm_value: "\nbb7:                                              ; preds = %bb3, %bb1, %start, %bb5\n  %.0 = phi i32 [ %x, %bb5 ], [ 2147483643, %start ], [ %_5.0, %bb1 ], [ %_3.0, %bb3 ]\n  ret i32 %.0\n", llvm_type: "label" }
Operand 4 is IntValue(IntValue { int_value: Value { name: "", address: 0x55b970c59090, is_const: true, is_null: false, is_undef: false, llvm_value: "i32 2", llvm_type: "i32" } })
Operand 5 is BasicBlock { address: 0x55b970c619d0, is_const: false, llvm_value: "\nbb3:                                              ; preds = %start\n  %1 = call { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %x, i32 1)\n  %_3.0 = extractvalue { i32, i1 } %1, 0\n  %_3.1 = extractvalue { i32, i1 } %1, 1\n  br i1 %_3.1, label %panic1, label %bb7, !prof !3\n", llvm_type: "label" }
Operand 6 is IntValue(IntValue { int_value: Value { name: "", address: 0x55b970c5eb70, is_const: true, is_null: false, is_undef: false, llvm_value: "i32 2147483647", llvm_type: "i32" } })
Operand 7 is BasicBlock { address: 0x55b970c61a20, is_const: false, llvm_value: "\nbb5:                                              ; preds = %start\n  br label %bb7\n", llvm_type: "label" }
FUCKKKKKKKKKKK
TEST 123 "i32 2147483647"
TEST 123 "i32 %x"
SWITCH HAS TARGET VAL IntValue(IntValue { int_value: Value { name: "", address: 0x55b970c5eb70, is_const: true, is_null: false, is_undef: false, llvm_value: "i32 2147483647", llvm_type: "i32" } })
SWITCH HAS TARGET VAL VAR const_2147483647
SWITCH HAS SWITCH VAR %x
SWITCH HAS DISCRIMINANT IntValue(IntValue { int_value: Value { name: "x", address: 0x55b970c5da50, is_const: false, is_null: false, is_undef: false, llvm_value: "i32 %x", llvm_type: "i32" } })
SWITCH HAS UNWRAPPED DISCRIMINANT IntValue { int_value: Value { name: "x", address: 0x55b970c5da50, is_const: false, is_null: false, is_undef: false, llvm_value: "i32 %x", llvm_type: "i32" } }
SWITCH HAS ENTRY CONDITION (= %x const_2147483647)
IF HAS NUM OPERANDS 3
IF HAS TERMINATOR InstructionValue { instruction_value: Value { name: "", address: 0x55b970c62520, is_const: false, is_null: false, is_undef: false, llvm_value: "  br i1 %_3.1, label %panic1, label %bb7, !prof !3", llvm_type: "void" } }
IF HAS NODE "panic1"
TEST 123 "  %_3.1 = extractvalue { i32, i1 } %1, 1"
IF HAS TARGET VAL true
IF HAS TARGET VAL VAR true
IF HAS SWITCH VAR %_3.1
IF HAS DISCRIMINANT IntValue(IntValue { int_value: Value { name: "_3.1", address: 0x55b970c62390, is_const: false, is_null: false, is_undef: false, llvm_value: "  %_3.1 = extractvalue { i32, i1 } %1, 1", llvm_type: "i1" } })
IF HAS ENTRY CONDITION (= %_3.1 true)
IF HAS NUM OPERANDS 3
IF HAS TERMINATOR InstructionValue { instruction_value: Value { name: "", address: 0x55b970c62520, is_const: false, is_null: false, is_undef: false, llvm_value: "  br i1 %_3.1, label %panic1, label %bb7, !prof !3", llvm_type: "void" } }
IF HAS NODE "bb7"
TEST 123 "  %_3.1 = extractvalue { i32, i1 } %1, 1"
IF HAS TARGET VAL false
IF HAS TARGET VAL VAR false
IF HAS SWITCH VAR %_3.1
IF HAS DISCRIMINANT IntValue(IntValue { int_value: Value { name: "_3.1", address: 0x55b970c62390, is_const: false, is_null: false, is_undef: false, llvm_value: "  %_3.1 = extractvalue { i32, i1 } %1, 1", llvm_type: "i1" } })
IF HAS ENTRY CONDITION (= %_3.1 false)
TEST 123 "  %.0 = phi i32 [ %x, %bb5 ], [ 2147483643, %start ], [ %_5.0, %bb1 ], [ %_3.0, %bb3 ]"
TEST 123 "  %_3.0 = extractvalue { i32, i1 } %1, 0"
TEST 123 "  %_3.1 = extractvalue { i32, i1 } %1, 1"
TEST 123 "  %1 = call { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %x, i32 1)"
TEST 123 "  %_3.0 = extractvalue { i32, i1 } %1, 0"
TEST 123 "  %1 = call { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %x, i32 1)"
TEST 123 "i32 %x"
TEST 123 "i32 1"
TEST 123 "  %1 = call { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %x, i32 1)"
TEST 123 "  %1 = call { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %x, i32 1)"
SWITCH HAS NUM OPERANDS 8
SWITCH HAS TERMINATOR InstructionValue { instruction_value: Value { name: "", address: 0x55b970c61c08, is_const: false, is_null: false, is_undef: false, llvm_value: "  switch i32 %x, label %bb1 [\n    i32 1, label %bb7\n    i32 2, label %bb3\n    i32 2147483647, label %bb5\n  ]", llvm_type: "void" } }
SWITCH HAS NODE "bb3"
Operand 0 is IntValue(IntValue { int_value: Value { name: "x", address: 0x55b970c5da50, is_const: false, is_null: false, is_undef: false, llvm_value: "i32 %x", llvm_type: "i32" } })
Operand 1 is BasicBlock { address: 0x55b970c61930, is_const: false, llvm_value: "\nbb1:                                              ; preds = %start\n  %0 = call { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %x, i32 1)\n  %_5.0 = extractvalue { i32, i1 } %0, 0\n  %_5.1 = extractvalue { i32, i1 } %0, 1\n  br i1 %_5.1, label %panic, label %bb7, !prof !3\n", llvm_type: "label" }
Operand 2 is IntValue(IntValue { int_value: Value { name: "", address: 0x55b970c590c0, is_const: true, is_null: false, is_undef: false, llvm_value: "i32 1", llvm_type: "i32" } })
Operand 3 is BasicBlock { address: 0x55b970c61b10, is_const: false, llvm_value: "\nbb7:                                              ; preds = %bb3, %bb1, %start, %bb5\n  %.0 = phi i32 [ %x, %bb5 ], [ 2147483643, %start ], [ %_5.0, %bb1 ], [ %_3.0, %bb3 ]\n  ret i32 %.0\n", llvm_type: "label" }
Operand 4 is IntValue(IntValue { int_value: Value { name: "", address: 0x55b970c59090, is_const: true, is_null: false, is_undef: false, llvm_value: "i32 2", llvm_type: "i32" } })
Operand 5 is BasicBlock { address: 0x55b970c619d0, is_const: false, llvm_value: "\nbb3:                                              ; preds = %start\n  %1 = call { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %x, i32 1)\n  %_3.0 = extractvalue { i32, i1 } %1, 0\n  %_3.1 = extractvalue { i32, i1 } %1, 1\n  br i1 %_3.1, label %panic1, label %bb7, !prof !3\n", llvm_type: "label" }
FUCKKKKKKKKKKK
TEST 123 "i32 2"
TEST 123 "i32 %x"
SWITCH HAS TARGET VAL IntValue(IntValue { int_value: Value { name: "", address: 0x55b970c59090, is_const: true, is_null: false, is_undef: false, llvm_value: "i32 2", llvm_type: "i32" } })
SWITCH HAS TARGET VAL VAR const_2
SWITCH HAS SWITCH VAR %x
SWITCH HAS DISCRIMINANT IntValue(IntValue { int_value: Value { name: "x", address: 0x55b970c5da50, is_const: false, is_null: false, is_undef: false, llvm_value: "i32 %x", llvm_type: "i32" } })
SWITCH HAS UNWRAPPED DISCRIMINANT IntValue { int_value: Value { name: "x", address: 0x55b970c5da50, is_const: false, is_null: false, is_undef: false, llvm_value: "i32 %x", llvm_type: "i32" } }
SWITCH HAS ENTRY CONDITION (= %x const_2)
IF HAS NUM OPERANDS 3
IF HAS TERMINATOR InstructionValue { instruction_value: Value { name: "", address: 0x55b970c620d0, is_const: false, is_null: false, is_undef: false, llvm_value: "  br i1 %_5.1, label %panic, label %bb7, !prof !3", llvm_type: "void" } }
IF HAS NODE "panic"
TEST 123 "  %_5.1 = extractvalue { i32, i1 } %0, 1"
IF HAS TARGET VAL true
IF HAS TARGET VAL VAR true
IF HAS SWITCH VAR %_5.1
IF HAS DISCRIMINANT IntValue(IntValue { int_value: Value { name: "_5.1", address: 0x55b970c61f40, is_const: false, is_null: false, is_undef: false, llvm_value: "  %_5.1 = extractvalue { i32, i1 } %0, 1", llvm_type: "i1" } })
IF HAS ENTRY CONDITION (= %_5.1 true)
IF HAS NUM OPERANDS 3
IF HAS TERMINATOR InstructionValue { instruction_value: Value { name: "", address: 0x55b970c620d0, is_const: false, is_null: false, is_undef: false, llvm_value: "  br i1 %_5.1, label %panic, label %bb7, !prof !3", llvm_type: "void" } }
IF HAS NODE "bb7"
TEST 123 "  %_5.1 = extractvalue { i32, i1 } %0, 1"
IF HAS TARGET VAL false
IF HAS TARGET VAL VAR false
IF HAS SWITCH VAR %_5.1
IF HAS DISCRIMINANT IntValue(IntValue { int_value: Value { name: "_5.1", address: 0x55b970c61f40, is_const: false, is_null: false, is_undef: false, llvm_value: "  %_5.1 = extractvalue { i32, i1 } %0, 1", llvm_type: "i1" } })
IF HAS ENTRY CONDITION (= %_5.1 false)
TEST 123 "  %.0 = phi i32 [ %x, %bb5 ], [ 2147483643, %start ], [ %_5.0, %bb1 ], [ %_3.0, %bb3 ]"
TEST 123 "  %_5.0 = extractvalue { i32, i1 } %0, 0"
TEST 123 "  %_5.1 = extractvalue { i32, i1 } %0, 1"
TEST 123 "  %0 = call { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %x, i32 1)"
TEST 123 "  %_5.0 = extractvalue { i32, i1 } %0, 0"
TEST 123 "  %0 = call { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %x, i32 1)"
TEST 123 "i32 %x"
TEST 123 "i32 1"
TEST 123 "  %0 = call { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %x, i32 1)"
TEST 123 "  %0 = call { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %x, i32 1)"
SWITCH HAS NUM OPERANDS 8
SWITCH HAS TERMINATOR InstructionValue { instruction_value: Value { name: "", address: 0x55b970c61c08, is_const: false, is_null: false, is_undef: false, llvm_value: "  switch i32 %x, label %bb1 [\n    i32 1, label %bb7\n    i32 2, label %bb3\n    i32 2147483647, label %bb5\n  ]", llvm_type: "void" } }
SWITCH HAS NODE "bb1"
Operand 0 is IntValue(IntValue { int_value: Value { name: "x", address: 0x55b970c5da50, is_const: false, is_null: false, is_undef: false, llvm_value: "i32 %x", llvm_type: "i32" } })
Operand 1 is BasicBlock { address: 0x55b970c61930, is_const: false, llvm_value: "\nbb1:                                              ; preds = %start\n  %0 = call { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %x, i32 1)\n  %_5.0 = extractvalue { i32, i1 } %0, 0\n  %_5.1 = extractvalue { i32, i1 } %0, 1\n  br i1 %_5.1, label %panic, label %bb7, !prof !3\n", llvm_type: "label" }
FUCKKKKKKKKKKK
TEST 123 "i32 %x"
TEST 123 "i32 %x"
SWITCH HAS TARGET VAL IntValue(IntValue { int_value: Value { name: "x", address: 0x55b970c5da50, is_const: false, is_null: false, is_undef: false, llvm_value: "i32 %x", llvm_type: "i32" } })
SWITCH HAS TARGET VAL VAR %x
SWITCH HAS SWITCH VAR %x
SWITCH HAS DISCRIMINANT IntValue(IntValue { int_value: Value { name: "x", address: 0x55b970c5da50, is_const: false, is_null: false, is_undef: false, llvm_value: "i32 %x", llvm_type: "i32" } })
SWITCH HAS UNWRAPPED DISCRIMINANT IntValue { int_value: Value { name: "x", address: 0x55b970c5da50, is_const: false, is_null: false, is_undef: false, llvm_value: "i32 %x", llvm_type: "i32" } }
TEST 123 "i32 1"
TEST 123 "i32 2"
TEST 123 "i32 2147483647"
SWITCH HAS ENTRY CONDITION (= (= (= (= %x %x) (not (= %x const_1))) (not (= %x const_2)))
   (not (= %x const_2147483647)))
SWITCH HAS NUM OPERANDS 8
SWITCH HAS TERMINATOR InstructionValue { instruction_value: Value { name: "", address: 0x55b970c61c08, is_const: false, is_null: false, is_undef: false, llvm_value: "  switch i32 %x, label %bb1 [\n    i32 1, label %bb7\n    i32 2, label %bb3\n    i32 2147483647, label %bb5\n  ]", llvm_type: "void" } }
SWITCH HAS NODE "bb5"
Operand 0 is IntValue(IntValue { int_value: Value { name: "x", address: 0x55b970c5da50, is_const: false, is_null: false, is_undef: false, llvm_value: "i32 %x", llvm_type: "i32" } })
Operand 1 is BasicBlock { address: 0x55b970c61930, is_const: false, llvm_value: "\nbb1:                                              ; preds = %start\n  %0 = call { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %x, i32 1)\n  %_5.0 = extractvalue { i32, i1 } %0, 0\n  %_5.1 = extractvalue { i32, i1 } %0, 1\n  br i1 %_5.1, label %panic, label %bb7, !prof !3\n", llvm_type: "label" }
Operand 2 is IntValue(IntValue { int_value: Value { name: "", address: 0x55b970c590c0, is_const: true, is_null: false, is_undef: false, llvm_value: "i32 1", llvm_type: "i32" } })
Operand 3 is BasicBlock { address: 0x55b970c61b10, is_const: false, llvm_value: "\nbb7:                                              ; preds = %bb3, %bb1, %start, %bb5\n  %.0 = phi i32 [ %x, %bb5 ], [ 2147483643, %start ], [ %_5.0, %bb1 ], [ %_3.0, %bb3 ]\n  ret i32 %.0\n", llvm_type: "label" }
Operand 4 is IntValue(IntValue { int_value: Value { name: "", address: 0x55b970c59090, is_const: true, is_null: false, is_undef: false, llvm_value: "i32 2", llvm_type: "i32" } })
Operand 5 is BasicBlock { address: 0x55b970c619d0, is_const: false, llvm_value: "\nbb3:                                              ; preds = %start\n  %1 = call { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %x, i32 1)\n  %_3.0 = extractvalue { i32, i1 } %1, 0\n  %_3.1 = extractvalue { i32, i1 } %1, 1\n  br i1 %_3.1, label %panic1, label %bb7, !prof !3\n", llvm_type: "label" }
Operand 6 is IntValue(IntValue { int_value: Value { name: "", address: 0x55b970c5eb70, is_const: true, is_null: false, is_undef: false, llvm_value: "i32 2147483647", llvm_type: "i32" } })
Operand 7 is BasicBlock { address: 0x55b970c61a20, is_const: false, llvm_value: "\nbb5:                                              ; preds = %start\n  br label %bb7\n", llvm_type: "label" }
FUCKKKKKKKKKKK
TEST 123 "i32 2147483647"
TEST 123 "i32 %x"
SWITCH HAS TARGET VAL IntValue(IntValue { int_value: Value { name: "", address: 0x55b970c5eb70, is_const: true, is_null: false, is_undef: false, llvm_value: "i32 2147483647", llvm_type: "i32" } })
SWITCH HAS TARGET VAL VAR const_2147483647
SWITCH HAS SWITCH VAR %x
SWITCH HAS DISCRIMINANT IntValue(IntValue { int_value: Value { name: "x", address: 0x55b970c5da50, is_const: false, is_null: false, is_undef: false, llvm_value: "i32 %x", llvm_type: "i32" } })
SWITCH HAS UNWRAPPED DISCRIMINANT IntValue { int_value: Value { name: "x", address: 0x55b970c5da50, is_const: false, is_null: false, is_undef: false, llvm_value: "i32 %x", llvm_type: "i32" } }
SWITCH HAS ENTRY CONDITION (= %x const_2147483647)
SWITCH HAS NUM OPERANDS 8
SWITCH HAS TERMINATOR InstructionValue { instruction_value: Value { name: "", address: 0x55b970c61c08, is_const: false, is_null: false, is_undef: false, llvm_value: "  switch i32 %x, label %bb1 [\n    i32 1, label %bb7\n    i32 2, label %bb3\n    i32 2147483647, label %bb5\n  ]", llvm_type: "void" } }
SWITCH HAS NODE "bb7"
Operand 0 is IntValue(IntValue { int_value: Value { name: "x", address: 0x55b970c5da50, is_const: false, is_null: false, is_undef: false, llvm_value: "i32 %x", llvm_type: "i32" } })
Operand 1 is BasicBlock { address: 0x55b970c61930, is_const: false, llvm_value: "\nbb1:                                              ; preds = %start\n  %0 = call { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %x, i32 1)\n  %_5.0 = extractvalue { i32, i1 } %0, 0\n  %_5.1 = extractvalue { i32, i1 } %0, 1\n  br i1 %_5.1, label %panic, label %bb7, !prof !3\n", llvm_type: "label" }
Operand 2 is IntValue(IntValue { int_value: Value { name: "", address: 0x55b970c590c0, is_const: true, is_null: false, is_undef: false, llvm_value: "i32 1", llvm_type: "i32" } })
Operand 3 is BasicBlock { address: 0x55b970c61b10, is_const: false, llvm_value: "\nbb7:                                              ; preds = %bb3, %bb1, %start, %bb5\n  %.0 = phi i32 [ %x, %bb5 ], [ 2147483643, %start ], [ %_5.0, %bb1 ], [ %_3.0, %bb3 ]\n  ret i32 %.0\n", llvm_type: "label" }
FUCKKKKKKKKKKK
TEST 123 "i32 1"
TEST 123 "i32 %x"
SWITCH HAS TARGET VAL IntValue(IntValue { int_value: Value { name: "", address: 0x55b970c590c0, is_const: true, is_null: false, is_undef: false, llvm_value: "i32 1", llvm_type: "i32" } })
SWITCH HAS TARGET VAL VAR const_1
SWITCH HAS SWITCH VAR %x
SWITCH HAS DISCRIMINANT IntValue(IntValue { int_value: Value { name: "x", address: 0x55b970c5da50, is_const: false, is_null: false, is_undef: false, llvm_value: "i32 %x", llvm_type: "i32" } })
SWITCH HAS UNWRAPPED DISCRIMINANT IntValue { int_value: Value { name: "x", address: 0x55b970c5da50, is_const: false, is_null: false, is_undef: false, llvm_value: "i32 %x", llvm_type: "i32" } }
SWITCH HAS ENTRY CONDITION (= %x const_1)
TEST 123 "  %.0 = phi i32 [ %x, %bb5 ], [ 2147483643, %start ], [ %_5.0, %bb1 ], [ %_3.0, %bb3 ]"
TEST 123 "i32 2147483643"
SWITCH HAS NUM OPERANDS 8
SWITCH HAS TERMINATOR InstructionValue { instruction_value: Value { name: "", address: 0x55b970c61c08, is_const: false, is_null: false, is_undef: false, llvm_value: "  switch i32 %x, label %bb1 [\n    i32 1, label %bb7\n    i32 2, label %bb3\n    i32 2147483647, label %bb5\n  ]", llvm_type: "void" } }
SWITCH HAS NODE "bb3"
Operand 0 is IntValue(IntValue { int_value: Value { name: "x", address: 0x55b970c5da50, is_const: false, is_null: false, is_undef: false, llvm_value: "i32 %x", llvm_type: "i32" } })
Operand 1 is BasicBlock { address: 0x55b970c61930, is_const: false, llvm_value: "\nbb1:                                              ; preds = %start\n  %0 = call { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %x, i32 1)\n  %_5.0 = extractvalue { i32, i1 } %0, 0\n  %_5.1 = extractvalue { i32, i1 } %0, 1\n  br i1 %_5.1, label %panic, label %bb7, !prof !3\n", llvm_type: "label" }
Operand 2 is IntValue(IntValue { int_value: Value { name: "", address: 0x55b970c590c0, is_const: true, is_null: false, is_undef: false, llvm_value: "i32 1", llvm_type: "i32" } })
Operand 3 is BasicBlock { address: 0x55b970c61b10, is_const: false, llvm_value: "\nbb7:                                              ; preds = %bb3, %bb1, %start, %bb5\n  %.0 = phi i32 [ %x, %bb5 ], [ 2147483643, %start ], [ %_5.0, %bb1 ], [ %_3.0, %bb3 ]\n  ret i32 %.0\n", llvm_type: "label" }
Operand 4 is IntValue(IntValue { int_value: Value { name: "", address: 0x55b970c59090, is_const: true, is_null: false, is_undef: false, llvm_value: "i32 2", llvm_type: "i32" } })
Operand 5 is BasicBlock { address: 0x55b970c619d0, is_const: false, llvm_value: "\nbb3:                                              ; preds = %start\n  %1 = call { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %x, i32 1)\n  %_3.0 = extractvalue { i32, i1 } %1, 0\n  %_3.1 = extractvalue { i32, i1 } %1, 1\n  br i1 %_3.1, label %panic1, label %bb7, !prof !3\n", llvm_type: "label" }
FUCKKKKKKKKKKK
TEST 123 "i32 2"
TEST 123 "i32 %x"
SWITCH HAS TARGET VAL IntValue(IntValue { int_value: Value { name: "", address: 0x55b970c59090, is_const: true, is_null: false, is_undef: false, llvm_value: "i32 2", llvm_type: "i32" } })
SWITCH HAS TARGET VAL VAR const_2
SWITCH HAS SWITCH VAR %x
SWITCH HAS DISCRIMINANT IntValue(IntValue { int_value: Value { name: "x", address: 0x55b970c5da50, is_const: false, is_null: false, is_undef: false, llvm_value: "i32 %x", llvm_type: "i32" } })
SWITCH HAS UNWRAPPED DISCRIMINANT IntValue { int_value: Value { name: "x", address: 0x55b970c5da50, is_const: false, is_null: false, is_undef: false, llvm_value: "i32 %x", llvm_type: "i32" } }
SWITCH HAS ENTRY CONDITION (= %x const_2)
SWITCH HAS NUM OPERANDS 8
SWITCH HAS TERMINATOR InstructionValue { instruction_value: Value { name: "", address: 0x55b970c61c08, is_const: false, is_null: false, is_undef: false, llvm_value: "  switch i32 %x, label %bb1 [\n    i32 1, label %bb7\n    i32 2, label %bb3\n    i32 2147483647, label %bb5\n  ]", llvm_type: "void" } }
SWITCH HAS NODE "bb1"
Operand 0 is IntValue(IntValue { int_value: Value { name: "x", address: 0x55b970c5da50, is_const: false, is_null: false, is_undef: false, llvm_value: "i32 %x", llvm_type: "i32" } })
Operand 1 is BasicBlock { address: 0x55b970c61930, is_const: false, llvm_value: "\nbb1:                                              ; preds = %start\n  %0 = call { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %x, i32 1)\n  %_5.0 = extractvalue { i32, i1 } %0, 0\n  %_5.1 = extractvalue { i32, i1 } %0, 1\n  br i1 %_5.1, label %panic, label %bb7, !prof !3\n", llvm_type: "label" }
FUCKKKKKKKKKKK
TEST 123 "i32 %x"
TEST 123 "i32 %x"
SWITCH HAS TARGET VAL IntValue(IntValue { int_value: Value { name: "x", address: 0x55b970c5da50, is_const: false, is_null: false, is_undef: false, llvm_value: "i32 %x", llvm_type: "i32" } })
SWITCH HAS TARGET VAL VAR %x
SWITCH HAS SWITCH VAR %x
SWITCH HAS DISCRIMINANT IntValue(IntValue { int_value: Value { name: "x", address: 0x55b970c5da50, is_const: false, is_null: false, is_undef: false, llvm_value: "i32 %x", llvm_type: "i32" } })
SWITCH HAS UNWRAPPED DISCRIMINANT IntValue { int_value: Value { name: "x", address: 0x55b970c5da50, is_const: false, is_null: false, is_undef: false, llvm_value: "i32 %x", llvm_type: "i32" } }
TEST 123 "i32 1"
TEST 123 "i32 2"
TEST 123 "i32 2147483647"
SWITCH HAS ENTRY CONDITION (= (= (= (= %x %x) (not (= %x const_1))) (not (= %x const_2)))
   (not (= %x const_2147483647)))
TEST 123 "i32 %x"
[2mJan 15 20:18:35.473[0m [34mDEBUG[0m wombat_symx: (declare-fun panic_var () Bool)
(declare-fun common_end () Bool)
(declare-fun %_3.1 () Bool)
(declare-fun panic1 () Bool)
(declare-fun const_1 () Int)
(declare-fun %_5.1 () Bool)
(declare-fun %x () Int)
(declare-fun bb7 () Bool)
(declare-fun panic () Bool)
(declare-fun const_2147483647 () Int)
(declare-fun %.0 () Int)
(declare-fun bb5 () Bool)
(declare-fun const_2 () Int)
(declare-fun %_3.0 () Int)
(declare-fun %1.1 () Bool)
(declare-fun %1.0 () Int)
(declare-fun bb3 () Bool)
(declare-fun %_5.0 () Int)
(declare-fun %0.1 () Bool)
(declare-fun %0.0 () Int)
(declare-fun bb1 () Bool)
(declare-fun const_2147483643 () Int)
(declare-fun start () Bool)
(assert (= common_end (=> (and true true true true) (and (not panic_var) true))))
(assert (= panic1
   (=> (and true (= %_3.1 true)) (=> (= panic_var true) (and true common_end)))))
(assert (= const_1 1))
(assert (= bb7
   (=> (and true true (= %x const_1) (= %_5.1 false) (= %_3.1 false))
       (=> (= panic_var false) (and true common_end)))))
(assert (= panic
   (=> (and true (= %_5.1 true)) (=> (= panic_var true) (and true common_end)))))
(assert (= const_2147483647 2147483647))
(assert (let ((a!1 (=> (and true (= %x const_2147483647))
               (=> (=> true (= %.0 %x)) (and true bb7)))))
  (= bb5 a!1)))
(assert (= const_1 1))
(assert (= const_2 2))
(assert (let ((a!1 (> (+ %x const_1)
              (ite (bvslt #x7fffffff #x00000000)
                   (- (bv2int #x7fffffff) 4294967296)
                   (bv2int #x7fffffff))))
      (a!2 (< (+ %x const_1)
              (ite (bvslt #x80000000 #x00000000)
                   (- (bv2int #x80000000) 4294967296)
                   (bv2int #x80000000))))
      (a!3 (=> (= %_3.1 %1.1)
               (=> (=> (= %_3.1 false) (= %.0 %_3.0)) (and true panic1 bb7)))))
(let ((a!4 (=> (and (= %1.0 (+ %x const_1)) (= %1.1 (or a!1 a!2)))
               (=> (= %_3.0 %1.0) a!3))))
  (= bb3 (=> (and true (= %x const_2)) a!4)))))
(assert (= const_1 1))
(assert (= const_1 1))
(assert (= const_2 2))
(assert (= const_2147483647 2147483647))
(assert (let ((a!1 (= (= (= %x %x) (not (= %x const_1))) (not (= %x const_2))))
      (a!3 (> (+ %x const_1)
              (ite (bvslt #x7fffffff #x00000000)
                   (- (bv2int #x7fffffff) 4294967296)
                   (bv2int #x7fffffff))))
      (a!4 (< (+ %x const_1)
              (ite (bvslt #x80000000 #x00000000)
                   (- (bv2int #x80000000) 4294967296)
                   (bv2int #x80000000))))
      (a!5 (=> (= %_5.1 %0.1)
               (=> (=> (= %_5.1 false) (= %.0 %_5.0)) (and true panic bb7)))))
(let ((a!2 (and true (= a!1 (not (= %x const_2147483647)))))
      (a!6 (=> (and (= %0.0 (+ %x const_1)) (= %0.1 (or a!3 a!4)))
               (=> (= %_5.0 %0.0) a!5))))
  (= bb1 (=> a!2 a!6)))))
(assert (= const_2147483647 2147483647))
(assert (= const_1 1))
(assert (= const_2147483643 2147483643))
(assert (= const_2 2))
(assert (= const_1 1))
(assert (= const_2 2))
(assert (= const_2147483647 2147483647))
(assert (let ((a!1 (=> true
               (=> (=> (= %x const_1) (= %.0 const_2147483643))
                   (and true bb5 bb7 bb3 bb1)))))
  (= start a!1)))
(assert (let ((a!1 (>= %x
               (ite (bvslt #x80000000 #x00000000)
                    (- (bv2int #x80000000) 4294967296)
                    (bv2int #x80000000))))
      (a!2 (<= %x
               (ite (bvslt #x7fffffff #x00000000)
                    (- (bv2int #x7fffffff) 4294967296)
                    (bv2int #x7fffffff)))))
  (and a!1 a!2)))
(assert (not start))


Function safety: safe

************************************


[2mJan 15 20:18:35.574[0m [34mDEBUG[0m wombat_symx: Func param instr: IntValue { int_value: Value { name: "x", address: 0x55b970c5da80, is_const: false, is_null: false, is_undef: false, llvm_value: "i64 %x", llvm_type: "i64" } }
[2mJan 15 20:18:35.574[0m [34mDEBUG[0m wombat_symx: Function arg names: {"x": "%x"}
Backward Symbolic Execution in switch::test_unsafe::h189043034e0569c1
[2mJan 15 20:18:35.574[0m [34mDEBUG[0m wombat_symx: Number of Nodes: 7
[2mJan 15 20:18:35.574[0m [34mDEBUG[0m wombat_symx: Arg count: 1
[2mJan 15 20:18:35.574[0m [34mDEBUG[0m wombat_symx: Basic Blocks:
[2mJan 15 20:18:35.574[0m [34mDEBUG[0m wombat_symx: 	Basic Block: "start"
[2mJan 15 20:18:35.575[0m [34mDEBUG[0m wombat_symx: 		is_cleanup: NO
[2mJan 15 20:18:35.575[0m [34mDEBUG[0m wombat_symx: 		Statement: "\"  %_2 = icmp sgt i64 %x, 1\""
[2mJan 15 20:18:35.575[0m [34mDEBUG[0m wombat_symx: 		Statement: "\"  br i1 %_2, label %bb9, label %bb2\""
[2mJan 15 20:18:35.575[0m [34mDEBUG[0m wombat_symx: 		Last statement is a terminator
[2mJan 15 20:18:35.575[0m [34mDEBUG[0m wombat_symx: 	Basic Block: "bb2"
[2mJan 15 20:18:35.575[0m [34mDEBUG[0m wombat_symx: 		is_cleanup: NO
[2mJan 15 20:18:35.575[0m [34mDEBUG[0m wombat_symx: 		Statement: "\"  switch i64 %x, label %bb3 [\\n    i64 1, label %bb9\\n    i64 2, label %bb9\\n    i64 3, label %bb6\\n  ]\""
[2mJan 15 20:18:35.575[0m [34mDEBUG[0m wombat_symx: 		Last statement is a terminator
[2mJan 15 20:18:35.575[0m [34mDEBUG[0m wombat_symx: 	Basic Block: "bb9"
[2mJan 15 20:18:35.575[0m [34mDEBUG[0m wombat_symx: 		is_cleanup: NO
[2mJan 15 20:18:35.575[0m [34mDEBUG[0m wombat_symx: 		Statement: "\"  %.0 = phi i64 [ 2, %start ], [ %x, %bb2 ], [ %x, %bb2 ], [ %_8.0, %bb3 ], [ %_6.0, %bb6 ]\""
[2mJan 15 20:18:35.575[0m [34mDEBUG[0m wombat_symx: 		Statement: "\"  ret i64 %.0\""
[2mJan 15 20:18:35.575[0m [34mDEBUG[0m wombat_symx: 		Last statement is a terminator
[2mJan 15 20:18:35.575[0m [34mDEBUG[0m wombat_symx: 	Basic Block: "bb3"
[2mJan 15 20:18:35.575[0m [34mDEBUG[0m wombat_symx: 		is_cleanup: NO
[2mJan 15 20:18:35.575[0m [34mDEBUG[0m wombat_symx: 		Statement: "\"  %0 = call { i64, i1 } @llvm.sadd.with.overflow.i64(i64 %x, i64 1)\""
[2mJan 15 20:18:35.575[0m [34mDEBUG[0m wombat_symx: 		Statement: "\"  %_8.0 = extractvalue { i64, i1 } %0, 0\""
[2mJan 15 20:18:35.575[0m [34mDEBUG[0m wombat_symx: 		Statement: "\"  %_8.1 = extractvalue { i64, i1 } %0, 1\""
[2mJan 15 20:18:35.575[0m [34mDEBUG[0m wombat_symx: 		Statement: "\"  br i1 %_8.1, label %panic, label %bb9, !prof !3\""
[2mJan 15 20:18:35.575[0m [34mDEBUG[0m wombat_symx: 		Last statement is a terminator
[2mJan 15 20:18:35.575[0m [34mDEBUG[0m wombat_symx: 	Basic Block: "bb6"
[2mJan 15 20:18:35.575[0m [34mDEBUG[0m wombat_symx: 		is_cleanup: NO
[2mJan 15 20:18:35.575[0m [34mDEBUG[0m wombat_symx: 		Statement: "\"  %1 = call { i64, i1 } @llvm.ssub.with.overflow.i64(i64 %x, i64 1)\""
[2mJan 15 20:18:35.575[0m [34mDEBUG[0m wombat_symx: 		Statement: "\"  %_6.0 = extractvalue { i64, i1 } %1, 0\""
[2mJan 15 20:18:35.575[0m [34mDEBUG[0m wombat_symx: 		Statement: "\"  %_6.1 = extractvalue { i64, i1 } %1, 1\""
[2mJan 15 20:18:35.576[0m [34mDEBUG[0m wombat_symx: 		Statement: "\"  br i1 %_6.1, label %panic1, label %bb9, !prof !3\""
[2mJan 15 20:18:35.576[0m [34mDEBUG[0m wombat_symx: 		Last statement is a terminator
[2mJan 15 20:18:35.576[0m [34mDEBUG[0m wombat_symx: 	Basic Block: "panic"
[2mJan 15 20:18:35.576[0m [34mDEBUG[0m wombat_symx: 		is_cleanup: YES
[2mJan 15 20:18:35.576[0m [34mDEBUG[0m wombat_symx: 		Statement: "\"  call void @_ZN4core9panicking5panic17h4241c5ccea17facaE([0 x i8]* noundef nonnull align 1 bitcast ([28 x i8]* @str.0 to [0 x i8]*), i64 28, %\\\"core::panic::location::Location\\\"* noundef align 8 dereferenceable(24) bitcast (<{ i8*, [16 x i8] }>* @alloc35 to %\\\"core::panic::location::Location\\\"*)) #7\""
[2mJan 15 20:18:35.576[0m [34mDEBUG[0m wombat_symx: 		Statement: "\"  unreachable\""
[2mJan 15 20:18:35.576[0m [34mDEBUG[0m wombat_symx: 		Last statement is a terminator
[2mJan 15 20:18:35.576[0m [34mDEBUG[0m wombat_symx: 	Basic Block: "panic1"
[2mJan 15 20:18:35.576[0m [34mDEBUG[0m wombat_symx: 		is_cleanup: YES
[2mJan 15 20:18:35.576[0m [34mDEBUG[0m wombat_symx: 		Statement: "\"  call void @_ZN4core9panicking5panic17h4241c5ccea17facaE([0 x i8]* noundef nonnull align 1 bitcast ([33 x i8]* @str.1 to [0 x i8]*), i64 33, %\\\"core::panic::location::Location\\\"* noundef align 8 dereferenceable(24) bitcast (<{ i8*, [16 x i8] }>* @alloc37 to %\\\"core::panic::location::Location\\\"*)) #7\""
[2mJan 15 20:18:35.576[0m [34mDEBUG[0m wombat_symx: 		Statement: "\"  unreachable\""
[2mJan 15 20:18:35.576[0m [34mDEBUG[0m wombat_symx: 		Last statement is a terminator
[2mJan 15 20:18:35.576[0m [34mDEBUG[0m wombat_symx: 
[2mJan 15 20:18:35.576[0m [34mDEBUG[0m wombat_symx: Start node: "start"
IF STATEMENT
terminator is InstructionValue { instruction_value: Value { name: "", address: 0x55b970c63670, is_const: false, is_null: false, is_undef: false, llvm_value: "  br i1 %_2, label %bb9, label %bb2", llvm_type: "void" } }
Operand 0 is Some(Left(IntValue(IntValue { int_value: Value { name: "_2", address: 0x55b970c635c0, is_const: false, is_null: false, is_undef: false, llvm_value: "  %_2 = icmp sgt i64 %x, 1", llvm_type: "i1" } })))
Operand 1 is Some(Right(BasicBlock { address: 0x55b970c63000, is_const: false, llvm_value: "\nbb2:                                              ; preds = %start\n  switch i64 %x, label %bb3 [\n    i64 1, label %bb9\n    i64 2, label %bb9\n    i64 3, label %bb6\n  ]\n", llvm_type: "label" }))
Operand 2 is Some(Right(BasicBlock { address: 0x55b970c630a0, is_const: false, llvm_value: "\nbb9:                                              ; preds = %bb6, %bb3, %bb2, %bb2, %start\n  %.0 = phi i64 [ 2, %start ], [ %x, %bb2 ], [ %x, %bb2 ], [ %_8.0, %bb3 ], [ %_6.0, %bb6 ]\n  ret i64 %.0\n", llvm_type: "label" }))
SWITCH STATEMENT
terminator is InstructionValue { instruction_value: Value { name: "", address: 0x55b970c63378, is_const: false, is_null: false, is_undef: false, llvm_value: "  switch i64 %x, label %bb3 [\n    i64 1, label %bb9\n    i64 2, label %bb9\n    i64 3, label %bb6\n  ]", llvm_type: "void" } }
Operand 0 is Some(Left(IntValue(IntValue { int_value: Value { name: "x", address: 0x55b970c5da80, is_const: false, is_null: false, is_undef: false, llvm_value: "i64 %x", llvm_type: "i64" } })))
Operand 1 is Some(Right(BasicBlock { address: 0x55b970c630f0, is_const: false, llvm_value: "\nbb3:                                              ; preds = %bb2\n  %0 = call { i64, i1 } @llvm.sadd.with.overflow.i64(i64 %x, i64 1)\n  %_8.0 = extractvalue { i64, i1 } %0, 0\n  %_8.1 = extractvalue { i64, i1 } %0, 1\n  br i1 %_8.1, label %panic, label %bb9, !prof !3\n", llvm_type: "label" }))
Operand 2 is Some(Left(IntValue(IntValue { int_value: Value { name: "", address: 0x55b970c62b20, is_const: true, is_null: false, is_undef: false, llvm_value: "i64 1", llvm_type: "i64" } })))
Operand 3 is Some(Right(BasicBlock { address: 0x55b970c630a0, is_const: false, llvm_value: "\nbb9:                                              ; preds = %bb6, %bb3, %bb2, %bb2, %start\n  %.0 = phi i64 [ 2, %start ], [ %x, %bb2 ], [ %x, %bb2 ], [ %_8.0, %bb3 ], [ %_6.0, %bb6 ]\n  ret i64 %.0\n", llvm_type: "label" }))
Operand 4 is Some(Left(IntValue(IntValue { int_value: Value { name: "", address: 0x55b970c633c0, is_const: true, is_null: false, is_undef: false, llvm_value: "i64 2", llvm_type: "i64" } })))
Operand 5 is Some(Right(BasicBlock { address: 0x55b970c630a0, is_const: false, llvm_value: "\nbb9:                                              ; preds = %bb6, %bb3, %bb2, %bb2, %start\n  %.0 = phi i64 [ 2, %start ], [ %x, %bb2 ], [ %x, %bb2 ], [ %_8.0, %bb3 ], [ %_6.0, %bb6 ]\n  ret i64 %.0\n", llvm_type: "label" }))
Operand 6 is Some(Left(IntValue(IntValue { int_value: Value { name: "", address: 0x55b970c633f0, is_const: true, is_null: false, is_undef: false, llvm_value: "i64 3", llvm_type: "i64" } })))
Operand 7 is Some(Right(BasicBlock { address: 0x55b970c631e0, is_const: false, llvm_value: "\nbb6:                                              ; preds = %bb2\n  %1 = call { i64, i1 } @llvm.ssub.with.overflow.i64(i64 %x, i64 1)\n  %_6.0 = extractvalue { i64, i1 } %1, 0\n  %_6.1 = extractvalue { i64, i1 } %1, 1\n  br i1 %_6.1, label %panic1, label %bb9, !prof !3\n", llvm_type: "label" }))
Number of operands is 8
IF STATEMENT
terminator is InstructionValue { instruction_value: Value { name: "", address: 0x55b970c63cb0, is_const: false, is_null: false, is_undef: false, llvm_value: "  br i1 %_8.1, label %panic, label %bb9, !prof !3", llvm_type: "void" } }
Operand 0 is Some(Left(IntValue(IntValue { int_value: Value { name: "_8.1", address: 0x55b970c63b20, is_const: false, is_null: false, is_undef: false, llvm_value: "  %_8.1 = extractvalue { i64, i1 } %0, 1", llvm_type: "i1" } })))
Operand 1 is Some(Right(BasicBlock { address: 0x55b970c630a0, is_const: false, llvm_value: "\nbb9:                                              ; preds = %bb6, %bb3, %bb2, %bb2, %start\n  %.0 = phi i64 [ 2, %start ], [ %x, %bb2 ], [ %x, %bb2 ], [ %_8.0, %bb3 ], [ %_6.0, %bb6 ]\n  ret i64 %.0\n", llvm_type: "label" }))
Operand 2 is Some(Right(BasicBlock { address: 0x55b970c63280, is_const: false, llvm_value: "\npanic:                                            ; preds = %bb3\n  call void @_ZN4core9panicking5panic17h4241c5ccea17facaE([0 x i8]* noundef nonnull align 1 bitcast ([28 x i8]* @str.0 to [0 x i8]*), i64 28, %\"core::panic::location::Location\"* noundef align 8 dereferenceable(24) bitcast (<{ i8*, [16 x i8] }>* @alloc35 to %\"core::panic::location::Location\"*)) #7\n  unreachable\n", llvm_type: "label" }))
IF STATEMENT
terminator is InstructionValue { instruction_value: Value { name: "", address: 0x55b970c64200, is_const: false, is_null: false, is_undef: false, llvm_value: "  br i1 %_6.1, label %panic1, label %bb9, !prof !3", llvm_type: "void" } }
Operand 0 is Some(Left(IntValue(IntValue { int_value: Value { name: "_6.1", address: 0x55b970c64070, is_const: false, is_null: false, is_undef: false, llvm_value: "  %_6.1 = extractvalue { i64, i1 } %1, 1", llvm_type: "i1" } })))
Operand 1 is Some(Right(BasicBlock { address: 0x55b970c630a0, is_const: false, llvm_value: "\nbb9:                                              ; preds = %bb6, %bb3, %bb2, %bb2, %start\n  %.0 = phi i64 [ 2, %start ], [ %x, %bb2 ], [ %x, %bb2 ], [ %_8.0, %bb3 ], [ %_6.0, %bb6 ]\n  ret i64 %.0\n", llvm_type: "label" }))
Operand 2 is Some(Right(BasicBlock { address: 0x55b970c63320, is_const: false, llvm_value: "\npanic1:                                           ; preds = %bb6\n  call void @_ZN4core9panicking5panic17h4241c5ccea17facaE([0 x i8]* noundef nonnull align 1 bitcast ([33 x i8]* @str.1 to [0 x i8]*), i64 33, %\"core::panic::location::Location\"* noundef align 8 dereferenceable(24) bitcast (<{ i8*, [16 x i8] }>* @alloc37 to %\"core::panic::location::Location\"*)) #7\n  unreachable\n", llvm_type: "label" }))
[2mJan 15 20:18:35.577[0m [34mDEBUG[0m wombat_symx: 	Successor to start node: "bb9"
[2mJan 15 20:18:35.577[0m [34mDEBUG[0m wombat_symx: 	Successor to start node: "bb2"
IF STATEMENT
terminator is InstructionValue { instruction_value: Value { name: "", address: 0x55b970c63670, is_const: false, is_null: false, is_undef: false, llvm_value: "  br i1 %_2, label %bb9, label %bb2", llvm_type: "void" } }
Operand 0 is Some(Left(IntValue(IntValue { int_value: Value { name: "_2", address: 0x55b970c635c0, is_const: false, is_null: false, is_undef: false, llvm_value: "  %_2 = icmp sgt i64 %x, 1", llvm_type: "i1" } })))
Operand 1 is Some(Right(BasicBlock { address: 0x55b970c63000, is_const: false, llvm_value: "\nbb2:                                              ; preds = %start\n  switch i64 %x, label %bb3 [\n    i64 1, label %bb9\n    i64 2, label %bb9\n    i64 3, label %bb6\n  ]\n", llvm_type: "label" }))
Operand 2 is Some(Right(BasicBlock { address: 0x55b970c630a0, is_const: false, llvm_value: "\nbb9:                                              ; preds = %bb6, %bb3, %bb2, %bb2, %start\n  %.0 = phi i64 [ 2, %start ], [ %x, %bb2 ], [ %x, %bb2 ], [ %_8.0, %bb3 ], [ %_6.0, %bb6 ]\n  ret i64 %.0\n", llvm_type: "label" }))
SWITCH STATEMENT
terminator is InstructionValue { instruction_value: Value { name: "", address: 0x55b970c63378, is_const: false, is_null: false, is_undef: false, llvm_value: "  switch i64 %x, label %bb3 [\n    i64 1, label %bb9\n    i64 2, label %bb9\n    i64 3, label %bb6\n  ]", llvm_type: "void" } }
Operand 0 is Some(Left(IntValue(IntValue { int_value: Value { name: "x", address: 0x55b970c5da80, is_const: false, is_null: false, is_undef: false, llvm_value: "i64 %x", llvm_type: "i64" } })))
Operand 1 is Some(Right(BasicBlock { address: 0x55b970c630f0, is_const: false, llvm_value: "\nbb3:                                              ; preds = %bb2\n  %0 = call { i64, i1 } @llvm.sadd.with.overflow.i64(i64 %x, i64 1)\n  %_8.0 = extractvalue { i64, i1 } %0, 0\n  %_8.1 = extractvalue { i64, i1 } %0, 1\n  br i1 %_8.1, label %panic, label %bb9, !prof !3\n", llvm_type: "label" }))
Operand 2 is Some(Left(IntValue(IntValue { int_value: Value { name: "", address: 0x55b970c62b20, is_const: true, is_null: false, is_undef: false, llvm_value: "i64 1", llvm_type: "i64" } })))
Operand 3 is Some(Right(BasicBlock { address: 0x55b970c630a0, is_const: false, llvm_value: "\nbb9:                                              ; preds = %bb6, %bb3, %bb2, %bb2, %start\n  %.0 = phi i64 [ 2, %start ], [ %x, %bb2 ], [ %x, %bb2 ], [ %_8.0, %bb3 ], [ %_6.0, %bb6 ]\n  ret i64 %.0\n", llvm_type: "label" }))
Operand 4 is Some(Left(IntValue(IntValue { int_value: Value { name: "", address: 0x55b970c633c0, is_const: true, is_null: false, is_undef: false, llvm_value: "i64 2", llvm_type: "i64" } })))
Operand 5 is Some(Right(BasicBlock { address: 0x55b970c630a0, is_const: false, llvm_value: "\nbb9:                                              ; preds = %bb6, %bb3, %bb2, %bb2, %start\n  %.0 = phi i64 [ 2, %start ], [ %x, %bb2 ], [ %x, %bb2 ], [ %_8.0, %bb3 ], [ %_6.0, %bb6 ]\n  ret i64 %.0\n", llvm_type: "label" }))
Operand 6 is Some(Left(IntValue(IntValue { int_value: Value { name: "", address: 0x55b970c633f0, is_const: true, is_null: false, is_undef: false, llvm_value: "i64 3", llvm_type: "i64" } })))
Operand 7 is Some(Right(BasicBlock { address: 0x55b970c631e0, is_const: false, llvm_value: "\nbb6:                                              ; preds = %bb2\n  %1 = call { i64, i1 } @llvm.ssub.with.overflow.i64(i64 %x, i64 1)\n  %_6.0 = extractvalue { i64, i1 } %1, 0\n  %_6.1 = extractvalue { i64, i1 } %1, 1\n  br i1 %_6.1, label %panic1, label %bb9, !prof !3\n", llvm_type: "label" }))
Number of operands is 8
IF STATEMENT
terminator is InstructionValue { instruction_value: Value { name: "", address: 0x55b970c63cb0, is_const: false, is_null: false, is_undef: false, llvm_value: "  br i1 %_8.1, label %panic, label %bb9, !prof !3", llvm_type: "void" } }
Operand 0 is Some(Left(IntValue(IntValue { int_value: Value { name: "_8.1", address: 0x55b970c63b20, is_const: false, is_null: false, is_undef: false, llvm_value: "  %_8.1 = extractvalue { i64, i1 } %0, 1", llvm_type: "i1" } })))
Operand 1 is Some(Right(BasicBlock { address: 0x55b970c630a0, is_const: false, llvm_value: "\nbb9:                                              ; preds = %bb6, %bb3, %bb2, %bb2, %start\n  %.0 = phi i64 [ 2, %start ], [ %x, %bb2 ], [ %x, %bb2 ], [ %_8.0, %bb3 ], [ %_6.0, %bb6 ]\n  ret i64 %.0\n", llvm_type: "label" }))
Operand 2 is Some(Right(BasicBlock { address: 0x55b970c63280, is_const: false, llvm_value: "\npanic:                                            ; preds = %bb3\n  call void @_ZN4core9panicking5panic17h4241c5ccea17facaE([0 x i8]* noundef nonnull align 1 bitcast ([28 x i8]* @str.0 to [0 x i8]*), i64 28, %\"core::panic::location::Location\"* noundef align 8 dereferenceable(24) bitcast (<{ i8*, [16 x i8] }>* @alloc35 to %\"core::panic::location::Location\"*)) #7\n  unreachable\n", llvm_type: "label" }))
IF STATEMENT
terminator is InstructionValue { instruction_value: Value { name: "", address: 0x55b970c64200, is_const: false, is_null: false, is_undef: false, llvm_value: "  br i1 %_6.1, label %panic1, label %bb9, !prof !3", llvm_type: "void" } }
Operand 0 is Some(Left(IntValue(IntValue { int_value: Value { name: "_6.1", address: 0x55b970c64070, is_const: false, is_null: false, is_undef: false, llvm_value: "  %_6.1 = extractvalue { i64, i1 } %1, 1", llvm_type: "i1" } })))
Operand 1 is Some(Right(BasicBlock { address: 0x55b970c630a0, is_const: false, llvm_value: "\nbb9:                                              ; preds = %bb6, %bb3, %bb2, %bb2, %start\n  %.0 = phi i64 [ 2, %start ], [ %x, %bb2 ], [ %x, %bb2 ], [ %_8.0, %bb3 ], [ %_6.0, %bb6 ]\n  ret i64 %.0\n", llvm_type: "label" }))
Operand 2 is Some(Right(BasicBlock { address: 0x55b970c63320, is_const: false, llvm_value: "\npanic1:                                           ; preds = %bb6\n  call void @_ZN4core9panicking5panic17h4241c5ccea17facaE([0 x i8]* noundef nonnull align 1 bitcast ([33 x i8]* @str.1 to [0 x i8]*), i64 33, %\"core::panic::location::Location\"* noundef align 8 dereferenceable(24) bitcast (<{ i8*, [16 x i8] }>* @alloc37 to %\"core::panic::location::Location\"*)) #7\n  unreachable\n", llvm_type: "label" }))
[2mJan 15 20:18:35.577[0m [34mDEBUG[0m wombat_symx: Forward edges:	{"bb3": {"bb9", "panic"}, "panic": {"common_end"}, "start": {"bb2", "bb9"}, "panic1": {"common_end"}, "bb2": {"bb3", "bb6", "bb9"}, "bb6": {"bb9", "panic1"}, "bb9": {"common_end"}}
IF STATEMENT
terminator is InstructionValue { instruction_value: Value { name: "", address: 0x55b970c63670, is_const: false, is_null: false, is_undef: false, llvm_value: "  br i1 %_2, label %bb9, label %bb2", llvm_type: "void" } }
Operand 0 is Some(Left(IntValue(IntValue { int_value: Value { name: "_2", address: 0x55b970c635c0, is_const: false, is_null: false, is_undef: false, llvm_value: "  %_2 = icmp sgt i64 %x, 1", llvm_type: "i1" } })))
Operand 1 is Some(Right(BasicBlock { address: 0x55b970c63000, is_const: false, llvm_value: "\nbb2:                                              ; preds = %start\n  switch i64 %x, label %bb3 [\n    i64 1, label %bb9\n    i64 2, label %bb9\n    i64 3, label %bb6\n  ]\n", llvm_type: "label" }))
Operand 2 is Some(Right(BasicBlock { address: 0x55b970c630a0, is_const: false, llvm_value: "\nbb9:                                              ; preds = %bb6, %bb3, %bb2, %bb2, %start\n  %.0 = phi i64 [ 2, %start ], [ %x, %bb2 ], [ %x, %bb2 ], [ %_8.0, %bb3 ], [ %_6.0, %bb6 ]\n  ret i64 %.0\n", llvm_type: "label" }))
SWITCH STATEMENT
terminator is InstructionValue { instruction_value: Value { name: "", address: 0x55b970c63378, is_const: false, is_null: false, is_undef: false, llvm_value: "  switch i64 %x, label %bb3 [\n    i64 1, label %bb9\n    i64 2, label %bb9\n    i64 3, label %bb6\n  ]", llvm_type: "void" } }
Operand 0 is Some(Left(IntValue(IntValue { int_value: Value { name: "x", address: 0x55b970c5da80, is_const: false, is_null: false, is_undef: false, llvm_value: "i64 %x", llvm_type: "i64" } })))
Operand 1 is Some(Right(BasicBlock { address: 0x55b970c630f0, is_const: false, llvm_value: "\nbb3:                                              ; preds = %bb2\n  %0 = call { i64, i1 } @llvm.sadd.with.overflow.i64(i64 %x, i64 1)\n  %_8.0 = extractvalue { i64, i1 } %0, 0\n  %_8.1 = extractvalue { i64, i1 } %0, 1\n  br i1 %_8.1, label %panic, label %bb9, !prof !3\n", llvm_type: "label" }))
Operand 2 is Some(Left(IntValue(IntValue { int_value: Value { name: "", address: 0x55b970c62b20, is_const: true, is_null: false, is_undef: false, llvm_value: "i64 1", llvm_type: "i64" } })))
Operand 3 is Some(Right(BasicBlock { address: 0x55b970c630a0, is_const: false, llvm_value: "\nbb9:                                              ; preds = %bb6, %bb3, %bb2, %bb2, %start\n  %.0 = phi i64 [ 2, %start ], [ %x, %bb2 ], [ %x, %bb2 ], [ %_8.0, %bb3 ], [ %_6.0, %bb6 ]\n  ret i64 %.0\n", llvm_type: "label" }))
Operand 4 is Some(Left(IntValue(IntValue { int_value: Value { name: "", address: 0x55b970c633c0, is_const: true, is_null: false, is_undef: false, llvm_value: "i64 2", llvm_type: "i64" } })))
Operand 5 is Some(Right(BasicBlock { address: 0x55b970c630a0, is_const: false, llvm_value: "\nbb9:                                              ; preds = %bb6, %bb3, %bb2, %bb2, %start\n  %.0 = phi i64 [ 2, %start ], [ %x, %bb2 ], [ %x, %bb2 ], [ %_8.0, %bb3 ], [ %_6.0, %bb6 ]\n  ret i64 %.0\n", llvm_type: "label" }))
Operand 6 is Some(Left(IntValue(IntValue { int_value: Value { name: "", address: 0x55b970c633f0, is_const: true, is_null: false, is_undef: false, llvm_value: "i64 3", llvm_type: "i64" } })))
Operand 7 is Some(Right(BasicBlock { address: 0x55b970c631e0, is_const: false, llvm_value: "\nbb6:                                              ; preds = %bb2\n  %1 = call { i64, i1 } @llvm.ssub.with.overflow.i64(i64 %x, i64 1)\n  %_6.0 = extractvalue { i64, i1 } %1, 0\n  %_6.1 = extractvalue { i64, i1 } %1, 1\n  br i1 %_6.1, label %panic1, label %bb9, !prof !3\n", llvm_type: "label" }))
Number of operands is 8
IF STATEMENT
terminator is InstructionValue { instruction_value: Value { name: "", address: 0x55b970c63cb0, is_const: false, is_null: false, is_undef: false, llvm_value: "  br i1 %_8.1, label %panic, label %bb9, !prof !3", llvm_type: "void" } }
Operand 0 is Some(Left(IntValue(IntValue { int_value: Value { name: "_8.1", address: 0x55b970c63b20, is_const: false, is_null: false, is_undef: false, llvm_value: "  %_8.1 = extractvalue { i64, i1 } %0, 1", llvm_type: "i1" } })))
Operand 1 is Some(Right(BasicBlock { address: 0x55b970c630a0, is_const: false, llvm_value: "\nbb9:                                              ; preds = %bb6, %bb3, %bb2, %bb2, %start\n  %.0 = phi i64 [ 2, %start ], [ %x, %bb2 ], [ %x, %bb2 ], [ %_8.0, %bb3 ], [ %_6.0, %bb6 ]\n  ret i64 %.0\n", llvm_type: "label" }))
Operand 2 is Some(Right(BasicBlock { address: 0x55b970c63280, is_const: false, llvm_value: "\npanic:                                            ; preds = %bb3\n  call void @_ZN4core9panicking5panic17h4241c5ccea17facaE([0 x i8]* noundef nonnull align 1 bitcast ([28 x i8]* @str.0 to [0 x i8]*), i64 28, %\"core::panic::location::Location\"* noundef align 8 dereferenceable(24) bitcast (<{ i8*, [16 x i8] }>* @alloc35 to %\"core::panic::location::Location\"*)) #7\n  unreachable\n", llvm_type: "label" }))
IF STATEMENT
terminator is InstructionValue { instruction_value: Value { name: "", address: 0x55b970c64200, is_const: false, is_null: false, is_undef: false, llvm_value: "  br i1 %_6.1, label %panic1, label %bb9, !prof !3", llvm_type: "void" } }
Operand 0 is Some(Left(IntValue(IntValue { int_value: Value { name: "_6.1", address: 0x55b970c64070, is_const: false, is_null: false, is_undef: false, llvm_value: "  %_6.1 = extractvalue { i64, i1 } %1, 1", llvm_type: "i1" } })))
Operand 1 is Some(Right(BasicBlock { address: 0x55b970c630a0, is_const: false, llvm_value: "\nbb9:                                              ; preds = %bb6, %bb3, %bb2, %bb2, %start\n  %.0 = phi i64 [ 2, %start ], [ %x, %bb2 ], [ %x, %bb2 ], [ %_8.0, %bb3 ], [ %_6.0, %bb6 ]\n  ret i64 %.0\n", llvm_type: "label" }))
Operand 2 is Some(Right(BasicBlock { address: 0x55b970c63320, is_const: false, llvm_value: "\npanic1:                                           ; preds = %bb6\n  call void @_ZN4core9panicking5panic17h4241c5ccea17facaE([0 x i8]* noundef nonnull align 1 bitcast ([33 x i8]* @str.1 to [0 x i8]*), i64 33, %\"core::panic::location::Location\"* noundef align 8 dereferenceable(24) bitcast (<{ i8*, [16 x i8] }>* @alloc37 to %\"core::panic::location::Location\"*)) #7\n  unreachable\n", llvm_type: "label" }))
[2mJan 15 20:18:35.578[0m [34mDEBUG[0m wombat_symx: Backward edges:	{"panic": {"bb3"}, "start": {}, "panic1": {"bb6"}, "bb6": {"bb2"}, "bb9": {"start", "bb3", "bb6", "bb2"}, "bb3": {"bb2"}, "bb2": {"start"}, "common_end": {"panic", "panic1", "bb9"}}
IF STATEMENT
terminator is InstructionValue { instruction_value: Value { name: "", address: 0x55b970c63670, is_const: false, is_null: false, is_undef: false, llvm_value: "  br i1 %_2, label %bb9, label %bb2", llvm_type: "void" } }
Operand 0 is Some(Left(IntValue(IntValue { int_value: Value { name: "_2", address: 0x55b970c635c0, is_const: false, is_null: false, is_undef: false, llvm_value: "  %_2 = icmp sgt i64 %x, 1", llvm_type: "i1" } })))
Operand 1 is Some(Right(BasicBlock { address: 0x55b970c63000, is_const: false, llvm_value: "\nbb2:                                              ; preds = %start\n  switch i64 %x, label %bb3 [\n    i64 1, label %bb9\n    i64 2, label %bb9\n    i64 3, label %bb6\n  ]\n", llvm_type: "label" }))
Operand 2 is Some(Right(BasicBlock { address: 0x55b970c630a0, is_const: false, llvm_value: "\nbb9:                                              ; preds = %bb6, %bb3, %bb2, %bb2, %start\n  %.0 = phi i64 [ 2, %start ], [ %x, %bb2 ], [ %x, %bb2 ], [ %_8.0, %bb3 ], [ %_6.0, %bb6 ]\n  ret i64 %.0\n", llvm_type: "label" }))
SWITCH STATEMENT
terminator is InstructionValue { instruction_value: Value { name: "", address: 0x55b970c63378, is_const: false, is_null: false, is_undef: false, llvm_value: "  switch i64 %x, label %bb3 [\n    i64 1, label %bb9\n    i64 2, label %bb9\n    i64 3, label %bb6\n  ]", llvm_type: "void" } }
Operand 0 is Some(Left(IntValue(IntValue { int_value: Value { name: "x", address: 0x55b970c5da80, is_const: false, is_null: false, is_undef: false, llvm_value: "i64 %x", llvm_type: "i64" } })))
Operand 1 is Some(Right(BasicBlock { address: 0x55b970c630f0, is_const: false, llvm_value: "\nbb3:                                              ; preds = %bb2\n  %0 = call { i64, i1 } @llvm.sadd.with.overflow.i64(i64 %x, i64 1)\n  %_8.0 = extractvalue { i64, i1 } %0, 0\n  %_8.1 = extractvalue { i64, i1 } %0, 1\n  br i1 %_8.1, label %panic, label %bb9, !prof !3\n", llvm_type: "label" }))
Operand 2 is Some(Left(IntValue(IntValue { int_value: Value { name: "", address: 0x55b970c62b20, is_const: true, is_null: false, is_undef: false, llvm_value: "i64 1", llvm_type: "i64" } })))
Operand 3 is Some(Right(BasicBlock { address: 0x55b970c630a0, is_const: false, llvm_value: "\nbb9:                                              ; preds = %bb6, %bb3, %bb2, %bb2, %start\n  %.0 = phi i64 [ 2, %start ], [ %x, %bb2 ], [ %x, %bb2 ], [ %_8.0, %bb3 ], [ %_6.0, %bb6 ]\n  ret i64 %.0\n", llvm_type: "label" }))
Operand 4 is Some(Left(IntValue(IntValue { int_value: Value { name: "", address: 0x55b970c633c0, is_const: true, is_null: false, is_undef: false, llvm_value: "i64 2", llvm_type: "i64" } })))
Operand 5 is Some(Right(BasicBlock { address: 0x55b970c630a0, is_const: false, llvm_value: "\nbb9:                                              ; preds = %bb6, %bb3, %bb2, %bb2, %start\n  %.0 = phi i64 [ 2, %start ], [ %x, %bb2 ], [ %x, %bb2 ], [ %_8.0, %bb3 ], [ %_6.0, %bb6 ]\n  ret i64 %.0\n", llvm_type: "label" }))
Operand 6 is Some(Left(IntValue(IntValue { int_value: Value { name: "", address: 0x55b970c633f0, is_const: true, is_null: false, is_undef: false, llvm_value: "i64 3", llvm_type: "i64" } })))
Operand 7 is Some(Right(BasicBlock { address: 0x55b970c631e0, is_const: false, llvm_value: "\nbb6:                                              ; preds = %bb2\n  %1 = call { i64, i1 } @llvm.ssub.with.overflow.i64(i64 %x, i64 1)\n  %_6.0 = extractvalue { i64, i1 } %1, 0\n  %_6.1 = extractvalue { i64, i1 } %1, 1\n  br i1 %_6.1, label %panic1, label %bb9, !prof !3\n", llvm_type: "label" }))
Number of operands is 8
IF STATEMENT
terminator is InstructionValue { instruction_value: Value { name: "", address: 0x55b970c63cb0, is_const: false, is_null: false, is_undef: false, llvm_value: "  br i1 %_8.1, label %panic, label %bb9, !prof !3", llvm_type: "void" } }
Operand 0 is Some(Left(IntValue(IntValue { int_value: Value { name: "_8.1", address: 0x55b970c63b20, is_const: false, is_null: false, is_undef: false, llvm_value: "  %_8.1 = extractvalue { i64, i1 } %0, 1", llvm_type: "i1" } })))
Operand 1 is Some(Right(BasicBlock { address: 0x55b970c630a0, is_const: false, llvm_value: "\nbb9:                                              ; preds = %bb6, %bb3, %bb2, %bb2, %start\n  %.0 = phi i64 [ 2, %start ], [ %x, %bb2 ], [ %x, %bb2 ], [ %_8.0, %bb3 ], [ %_6.0, %bb6 ]\n  ret i64 %.0\n", llvm_type: "label" }))
Operand 2 is Some(Right(BasicBlock { address: 0x55b970c63280, is_const: false, llvm_value: "\npanic:                                            ; preds = %bb3\n  call void @_ZN4core9panicking5panic17h4241c5ccea17facaE([0 x i8]* noundef nonnull align 1 bitcast ([28 x i8]* @str.0 to [0 x i8]*), i64 28, %\"core::panic::location::Location\"* noundef align 8 dereferenceable(24) bitcast (<{ i8*, [16 x i8] }>* @alloc35 to %\"core::panic::location::Location\"*)) #7\n  unreachable\n", llvm_type: "label" }))
IF STATEMENT
terminator is InstructionValue { instruction_value: Value { name: "", address: 0x55b970c64200, is_const: false, is_null: false, is_undef: false, llvm_value: "  br i1 %_6.1, label %panic1, label %bb9, !prof !3", llvm_type: "void" } }
Operand 0 is Some(Left(IntValue(IntValue { int_value: Value { name: "_6.1", address: 0x55b970c64070, is_const: false, is_null: false, is_undef: false, llvm_value: "  %_6.1 = extractvalue { i64, i1 } %1, 1", llvm_type: "i1" } })))
Operand 1 is Some(Right(BasicBlock { address: 0x55b970c630a0, is_const: false, llvm_value: "\nbb9:                                              ; preds = %bb6, %bb3, %bb2, %bb2, %start\n  %.0 = phi i64 [ 2, %start ], [ %x, %bb2 ], [ %x, %bb2 ], [ %_8.0, %bb3 ], [ %_6.0, %bb6 ]\n  ret i64 %.0\n", llvm_type: "label" }))
Operand 2 is Some(Right(BasicBlock { address: 0x55b970c63320, is_const: false, llvm_value: "\npanic1:                                           ; preds = %bb6\n  call void @_ZN4core9panicking5panic17h4241c5ccea17facaE([0 x i8]* noundef nonnull align 1 bitcast ([33 x i8]* @str.1 to [0 x i8]*), i64 33, %\"core::panic::location::Location\"* noundef align 8 dereferenceable(24) bitcast (<{ i8*, [16 x i8] }>* @alloc37 to %\"core::panic::location::Location\"*)) #7\n  unreachable\n", llvm_type: "label" }))
IF STATEMENT
terminator is InstructionValue { instruction_value: Value { name: "", address: 0x55b970c63670, is_const: false, is_null: false, is_undef: false, llvm_value: "  br i1 %_2, label %bb9, label %bb2", llvm_type: "void" } }
Operand 0 is Some(Left(IntValue(IntValue { int_value: Value { name: "_2", address: 0x55b970c635c0, is_const: false, is_null: false, is_undef: false, llvm_value: "  %_2 = icmp sgt i64 %x, 1", llvm_type: "i1" } })))
Operand 1 is Some(Right(BasicBlock { address: 0x55b970c63000, is_const: false, llvm_value: "\nbb2:                                              ; preds = %start\n  switch i64 %x, label %bb3 [\n    i64 1, label %bb9\n    i64 2, label %bb9\n    i64 3, label %bb6\n  ]\n", llvm_type: "label" }))
Operand 2 is Some(Right(BasicBlock { address: 0x55b970c630a0, is_const: false, llvm_value: "\nbb9:                                              ; preds = %bb6, %bb3, %bb2, %bb2, %start\n  %.0 = phi i64 [ 2, %start ], [ %x, %bb2 ], [ %x, %bb2 ], [ %_8.0, %bb3 ], [ %_6.0, %bb6 ]\n  ret i64 %.0\n", llvm_type: "label" }))
SWITCH STATEMENT
terminator is InstructionValue { instruction_value: Value { name: "", address: 0x55b970c63378, is_const: false, is_null: false, is_undef: false, llvm_value: "  switch i64 %x, label %bb3 [\n    i64 1, label %bb9\n    i64 2, label %bb9\n    i64 3, label %bb6\n  ]", llvm_type: "void" } }
Operand 0 is Some(Left(IntValue(IntValue { int_value: Value { name: "x", address: 0x55b970c5da80, is_const: false, is_null: false, is_undef: false, llvm_value: "i64 %x", llvm_type: "i64" } })))
Operand 1 is Some(Right(BasicBlock { address: 0x55b970c630f0, is_const: false, llvm_value: "\nbb3:                                              ; preds = %bb2\n  %0 = call { i64, i1 } @llvm.sadd.with.overflow.i64(i64 %x, i64 1)\n  %_8.0 = extractvalue { i64, i1 } %0, 0\n  %_8.1 = extractvalue { i64, i1 } %0, 1\n  br i1 %_8.1, label %panic, label %bb9, !prof !3\n", llvm_type: "label" }))
Operand 2 is Some(Left(IntValue(IntValue { int_value: Value { name: "", address: 0x55b970c62b20, is_const: true, is_null: false, is_undef: false, llvm_value: "i64 1", llvm_type: "i64" } })))
Operand 3 is Some(Right(BasicBlock { address: 0x55b970c630a0, is_const: false, llvm_value: "\nbb9:                                              ; preds = %bb6, %bb3, %bb2, %bb2, %start\n  %.0 = phi i64 [ 2, %start ], [ %x, %bb2 ], [ %x, %bb2 ], [ %_8.0, %bb3 ], [ %_6.0, %bb6 ]\n  ret i64 %.0\n", llvm_type: "label" }))
Operand 4 is Some(Left(IntValue(IntValue { int_value: Value { name: "", address: 0x55b970c633c0, is_const: true, is_null: false, is_undef: false, llvm_value: "i64 2", llvm_type: "i64" } })))
Operand 5 is Some(Right(BasicBlock { address: 0x55b970c630a0, is_const: false, llvm_value: "\nbb9:                                              ; preds = %bb6, %bb3, %bb2, %bb2, %start\n  %.0 = phi i64 [ 2, %start ], [ %x, %bb2 ], [ %x, %bb2 ], [ %_8.0, %bb3 ], [ %_6.0, %bb6 ]\n  ret i64 %.0\n", llvm_type: "label" }))
Operand 6 is Some(Left(IntValue(IntValue { int_value: Value { name: "", address: 0x55b970c633f0, is_const: true, is_null: false, is_undef: false, llvm_value: "i64 3", llvm_type: "i64" } })))
Operand 7 is Some(Right(BasicBlock { address: 0x55b970c631e0, is_const: false, llvm_value: "\nbb6:                                              ; preds = %bb2\n  %1 = call { i64, i1 } @llvm.ssub.with.overflow.i64(i64 %x, i64 1)\n  %_6.0 = extractvalue { i64, i1 } %1, 0\n  %_6.1 = extractvalue { i64, i1 } %1, 1\n  br i1 %_6.1, label %panic1, label %bb9, !prof !3\n", llvm_type: "label" }))
Number of operands is 8
IF STATEMENT
terminator is InstructionValue { instruction_value: Value { name: "", address: 0x55b970c63cb0, is_const: false, is_null: false, is_undef: false, llvm_value: "  br i1 %_8.1, label %panic, label %bb9, !prof !3", llvm_type: "void" } }
Operand 0 is Some(Left(IntValue(IntValue { int_value: Value { name: "_8.1", address: 0x55b970c63b20, is_const: false, is_null: false, is_undef: false, llvm_value: "  %_8.1 = extractvalue { i64, i1 } %0, 1", llvm_type: "i1" } })))
Operand 1 is Some(Right(BasicBlock { address: 0x55b970c630a0, is_const: false, llvm_value: "\nbb9:                                              ; preds = %bb6, %bb3, %bb2, %bb2, %start\n  %.0 = phi i64 [ 2, %start ], [ %x, %bb2 ], [ %x, %bb2 ], [ %_8.0, %bb3 ], [ %_6.0, %bb6 ]\n  ret i64 %.0\n", llvm_type: "label" }))
Operand 2 is Some(Right(BasicBlock { address: 0x55b970c63280, is_const: false, llvm_value: "\npanic:                                            ; preds = %bb3\n  call void @_ZN4core9panicking5panic17h4241c5ccea17facaE([0 x i8]* noundef nonnull align 1 bitcast ([28 x i8]* @str.0 to [0 x i8]*), i64 28, %\"core::panic::location::Location\"* noundef align 8 dereferenceable(24) bitcast (<{ i8*, [16 x i8] }>* @alloc35 to %\"core::panic::location::Location\"*)) #7\n  unreachable\n", llvm_type: "label" }))
IF STATEMENT
terminator is InstructionValue { instruction_value: Value { name: "", address: 0x55b970c64200, is_const: false, is_null: false, is_undef: false, llvm_value: "  br i1 %_6.1, label %panic1, label %bb9, !prof !3", llvm_type: "void" } }
Operand 0 is Some(Left(IntValue(IntValue { int_value: Value { name: "_6.1", address: 0x55b970c64070, is_const: false, is_null: false, is_undef: false, llvm_value: "  %_6.1 = extractvalue { i64, i1 } %1, 1", llvm_type: "i1" } })))
Operand 1 is Some(Right(BasicBlock { address: 0x55b970c630a0, is_const: false, llvm_value: "\nbb9:                                              ; preds = %bb6, %bb3, %bb2, %bb2, %start\n  %.0 = phi i64 [ 2, %start ], [ %x, %bb2 ], [ %x, %bb2 ], [ %_8.0, %bb3 ], [ %_6.0, %bb6 ]\n  ret i64 %.0\n", llvm_type: "label" }))
Operand 2 is Some(Right(BasicBlock { address: 0x55b970c63320, is_const: false, llvm_value: "\npanic1:                                           ; preds = %bb6\n  call void @_ZN4core9panicking5panic17h4241c5ccea17facaE([0 x i8]* noundef nonnull align 1 bitcast ([33 x i8]* @str.1 to [0 x i8]*), i64 33, %\"core::panic::location::Location\"* noundef align 8 dereferenceable(24) bitcast (<{ i8*, [16 x i8] }>* @alloc37 to %\"core::panic::location::Location\"*)) #7\n  unreachable\n", llvm_type: "label" }))
[2mJan 15 20:18:35.579[0m [34mDEBUG[0m wombat_symx: Forward sorted nodes:	["start", "bb2", "bb3", "bb6", "panic", "panic1", "bb9", "common_end"]
IF STATEMENT
terminator is InstructionValue { instruction_value: Value { name: "", address: 0x55b970c63670, is_const: false, is_null: false, is_undef: false, llvm_value: "  br i1 %_2, label %bb9, label %bb2", llvm_type: "void" } }
Operand 0 is Some(Left(IntValue(IntValue { int_value: Value { name: "_2", address: 0x55b970c635c0, is_const: false, is_null: false, is_undef: false, llvm_value: "  %_2 = icmp sgt i64 %x, 1", llvm_type: "i1" } })))
Operand 1 is Some(Right(BasicBlock { address: 0x55b970c63000, is_const: false, llvm_value: "\nbb2:                                              ; preds = %start\n  switch i64 %x, label %bb3 [\n    i64 1, label %bb9\n    i64 2, label %bb9\n    i64 3, label %bb6\n  ]\n", llvm_type: "label" }))
Operand 2 is Some(Right(BasicBlock { address: 0x55b970c630a0, is_const: false, llvm_value: "\nbb9:                                              ; preds = %bb6, %bb3, %bb2, %bb2, %start\n  %.0 = phi i64 [ 2, %start ], [ %x, %bb2 ], [ %x, %bb2 ], [ %_8.0, %bb3 ], [ %_6.0, %bb6 ]\n  ret i64 %.0\n", llvm_type: "label" }))
SWITCH STATEMENT
terminator is InstructionValue { instruction_value: Value { name: "", address: 0x55b970c63378, is_const: false, is_null: false, is_undef: false, llvm_value: "  switch i64 %x, label %bb3 [\n    i64 1, label %bb9\n    i64 2, label %bb9\n    i64 3, label %bb6\n  ]", llvm_type: "void" } }
Operand 0 is Some(Left(IntValue(IntValue { int_value: Value { name: "x", address: 0x55b970c5da80, is_const: false, is_null: false, is_undef: false, llvm_value: "i64 %x", llvm_type: "i64" } })))
Operand 1 is Some(Right(BasicBlock { address: 0x55b970c630f0, is_const: false, llvm_value: "\nbb3:                                              ; preds = %bb2\n  %0 = call { i64, i1 } @llvm.sadd.with.overflow.i64(i64 %x, i64 1)\n  %_8.0 = extractvalue { i64, i1 } %0, 0\n  %_8.1 = extractvalue { i64, i1 } %0, 1\n  br i1 %_8.1, label %panic, label %bb9, !prof !3\n", llvm_type: "label" }))
Operand 2 is Some(Left(IntValue(IntValue { int_value: Value { name: "", address: 0x55b970c62b20, is_const: true, is_null: false, is_undef: false, llvm_value: "i64 1", llvm_type: "i64" } })))
Operand 3 is Some(Right(BasicBlock { address: 0x55b970c630a0, is_const: false, llvm_value: "\nbb9:                                              ; preds = %bb6, %bb3, %bb2, %bb2, %start\n  %.0 = phi i64 [ 2, %start ], [ %x, %bb2 ], [ %x, %bb2 ], [ %_8.0, %bb3 ], [ %_6.0, %bb6 ]\n  ret i64 %.0\n", llvm_type: "label" }))
Operand 4 is Some(Left(IntValue(IntValue { int_value: Value { name: "", address: 0x55b970c633c0, is_const: true, is_null: false, is_undef: false, llvm_value: "i64 2", llvm_type: "i64" } })))
Operand 5 is Some(Right(BasicBlock { address: 0x55b970c630a0, is_const: false, llvm_value: "\nbb9:                                              ; preds = %bb6, %bb3, %bb2, %bb2, %start\n  %.0 = phi i64 [ 2, %start ], [ %x, %bb2 ], [ %x, %bb2 ], [ %_8.0, %bb3 ], [ %_6.0, %bb6 ]\n  ret i64 %.0\n", llvm_type: "label" }))
Operand 6 is Some(Left(IntValue(IntValue { int_value: Value { name: "", address: 0x55b970c633f0, is_const: true, is_null: false, is_undef: false, llvm_value: "i64 3", llvm_type: "i64" } })))
Operand 7 is Some(Right(BasicBlock { address: 0x55b970c631e0, is_const: false, llvm_value: "\nbb6:                                              ; preds = %bb2\n  %1 = call { i64, i1 } @llvm.ssub.with.overflow.i64(i64 %x, i64 1)\n  %_6.0 = extractvalue { i64, i1 } %1, 0\n  %_6.1 = extractvalue { i64, i1 } %1, 1\n  br i1 %_6.1, label %panic1, label %bb9, !prof !3\n", llvm_type: "label" }))
Number of operands is 8
IF STATEMENT
terminator is InstructionValue { instruction_value: Value { name: "", address: 0x55b970c63cb0, is_const: false, is_null: false, is_undef: false, llvm_value: "  br i1 %_8.1, label %panic, label %bb9, !prof !3", llvm_type: "void" } }
Operand 0 is Some(Left(IntValue(IntValue { int_value: Value { name: "_8.1", address: 0x55b970c63b20, is_const: false, is_null: false, is_undef: false, llvm_value: "  %_8.1 = extractvalue { i64, i1 } %0, 1", llvm_type: "i1" } })))
Operand 1 is Some(Right(BasicBlock { address: 0x55b970c630a0, is_const: false, llvm_value: "\nbb9:                                              ; preds = %bb6, %bb3, %bb2, %bb2, %start\n  %.0 = phi i64 [ 2, %start ], [ %x, %bb2 ], [ %x, %bb2 ], [ %_8.0, %bb3 ], [ %_6.0, %bb6 ]\n  ret i64 %.0\n", llvm_type: "label" }))
Operand 2 is Some(Right(BasicBlock { address: 0x55b970c63280, is_const: false, llvm_value: "\npanic:                                            ; preds = %bb3\n  call void @_ZN4core9panicking5panic17h4241c5ccea17facaE([0 x i8]* noundef nonnull align 1 bitcast ([28 x i8]* @str.0 to [0 x i8]*), i64 28, %\"core::panic::location::Location\"* noundef align 8 dereferenceable(24) bitcast (<{ i8*, [16 x i8] }>* @alloc35 to %\"core::panic::location::Location\"*)) #7\n  unreachable\n", llvm_type: "label" }))
IF STATEMENT
terminator is InstructionValue { instruction_value: Value { name: "", address: 0x55b970c64200, is_const: false, is_null: false, is_undef: false, llvm_value: "  br i1 %_6.1, label %panic1, label %bb9, !prof !3", llvm_type: "void" } }
Operand 0 is Some(Left(IntValue(IntValue { int_value: Value { name: "_6.1", address: 0x55b970c64070, is_const: false, is_null: false, is_undef: false, llvm_value: "  %_6.1 = extractvalue { i64, i1 } %1, 1", llvm_type: "i1" } })))
Operand 1 is Some(Right(BasicBlock { address: 0x55b970c630a0, is_const: false, llvm_value: "\nbb9:                                              ; preds = %bb6, %bb3, %bb2, %bb2, %start\n  %.0 = phi i64 [ 2, %start ], [ %x, %bb2 ], [ %x, %bb2 ], [ %_8.0, %bb3 ], [ %_6.0, %bb6 ]\n  ret i64 %.0\n", llvm_type: "label" }))
Operand 2 is Some(Right(BasicBlock { address: 0x55b970c63320, is_const: false, llvm_value: "\npanic1:                                           ; preds = %bb6\n  call void @_ZN4core9panicking5panic17h4241c5ccea17facaE([0 x i8]* noundef nonnull align 1 bitcast ([33 x i8]* @str.1 to [0 x i8]*), i64 33, %\"core::panic::location::Location\"* noundef align 8 dereferenceable(24) bitcast (<{ i8*, [16 x i8] }>* @alloc37 to %\"core::panic::location::Location\"*)) #7\n  unreachable\n", llvm_type: "label" }))
IF STATEMENT
terminator is InstructionValue { instruction_value: Value { name: "", address: 0x55b970c63670, is_const: false, is_null: false, is_undef: false, llvm_value: "  br i1 %_2, label %bb9, label %bb2", llvm_type: "void" } }
Operand 0 is Some(Left(IntValue(IntValue { int_value: Value { name: "_2", address: 0x55b970c635c0, is_const: false, is_null: false, is_undef: false, llvm_value: "  %_2 = icmp sgt i64 %x, 1", llvm_type: "i1" } })))
Operand 1 is Some(Right(BasicBlock { address: 0x55b970c63000, is_const: false, llvm_value: "\nbb2:                                              ; preds = %start\n  switch i64 %x, label %bb3 [\n    i64 1, label %bb9\n    i64 2, label %bb9\n    i64 3, label %bb6\n  ]\n", llvm_type: "label" }))
Operand 2 is Some(Right(BasicBlock { address: 0x55b970c630a0, is_const: false, llvm_value: "\nbb9:                                              ; preds = %bb6, %bb3, %bb2, %bb2, %start\n  %.0 = phi i64 [ 2, %start ], [ %x, %bb2 ], [ %x, %bb2 ], [ %_8.0, %bb3 ], [ %_6.0, %bb6 ]\n  ret i64 %.0\n", llvm_type: "label" }))
SWITCH STATEMENT
terminator is InstructionValue { instruction_value: Value { name: "", address: 0x55b970c63378, is_const: false, is_null: false, is_undef: false, llvm_value: "  switch i64 %x, label %bb3 [\n    i64 1, label %bb9\n    i64 2, label %bb9\n    i64 3, label %bb6\n  ]", llvm_type: "void" } }
Operand 0 is Some(Left(IntValue(IntValue { int_value: Value { name: "x", address: 0x55b970c5da80, is_const: false, is_null: false, is_undef: false, llvm_value: "i64 %x", llvm_type: "i64" } })))
Operand 1 is Some(Right(BasicBlock { address: 0x55b970c630f0, is_const: false, llvm_value: "\nbb3:                                              ; preds = %bb2\n  %0 = call { i64, i1 } @llvm.sadd.with.overflow.i64(i64 %x, i64 1)\n  %_8.0 = extractvalue { i64, i1 } %0, 0\n  %_8.1 = extractvalue { i64, i1 } %0, 1\n  br i1 %_8.1, label %panic, label %bb9, !prof !3\n", llvm_type: "label" }))
Operand 2 is Some(Left(IntValue(IntValue { int_value: Value { name: "", address: 0x55b970c62b20, is_const: true, is_null: false, is_undef: false, llvm_value: "i64 1", llvm_type: "i64" } })))
Operand 3 is Some(Right(BasicBlock { address: 0x55b970c630a0, is_const: false, llvm_value: "\nbb9:                                              ; preds = %bb6, %bb3, %bb2, %bb2, %start\n  %.0 = phi i64 [ 2, %start ], [ %x, %bb2 ], [ %x, %bb2 ], [ %_8.0, %bb3 ], [ %_6.0, %bb6 ]\n  ret i64 %.0\n", llvm_type: "label" }))
Operand 4 is Some(Left(IntValue(IntValue { int_value: Value { name: "", address: 0x55b970c633c0, is_const: true, is_null: false, is_undef: false, llvm_value: "i64 2", llvm_type: "i64" } })))
Operand 5 is Some(Right(BasicBlock { address: 0x55b970c630a0, is_const: false, llvm_value: "\nbb9:                                              ; preds = %bb6, %bb3, %bb2, %bb2, %start\n  %.0 = phi i64 [ 2, %start ], [ %x, %bb2 ], [ %x, %bb2 ], [ %_8.0, %bb3 ], [ %_6.0, %bb6 ]\n  ret i64 %.0\n", llvm_type: "label" }))
Operand 6 is Some(Left(IntValue(IntValue { int_value: Value { name: "", address: 0x55b970c633f0, is_const: true, is_null: false, is_undef: false, llvm_value: "i64 3", llvm_type: "i64" } })))
Operand 7 is Some(Right(BasicBlock { address: 0x55b970c631e0, is_const: false, llvm_value: "\nbb6:                                              ; preds = %bb2\n  %1 = call { i64, i1 } @llvm.ssub.with.overflow.i64(i64 %x, i64 1)\n  %_6.0 = extractvalue { i64, i1 } %1, 0\n  %_6.1 = extractvalue { i64, i1 } %1, 1\n  br i1 %_6.1, label %panic1, label %bb9, !prof !3\n", llvm_type: "label" }))
Number of operands is 8
IF STATEMENT
terminator is InstructionValue { instruction_value: Value { name: "", address: 0x55b970c63cb0, is_const: false, is_null: false, is_undef: false, llvm_value: "  br i1 %_8.1, label %panic, label %bb9, !prof !3", llvm_type: "void" } }
Operand 0 is Some(Left(IntValue(IntValue { int_value: Value { name: "_8.1", address: 0x55b970c63b20, is_const: false, is_null: false, is_undef: false, llvm_value: "  %_8.1 = extractvalue { i64, i1 } %0, 1", llvm_type: "i1" } })))
Operand 1 is Some(Right(BasicBlock { address: 0x55b970c630a0, is_const: false, llvm_value: "\nbb9:                                              ; preds = %bb6, %bb3, %bb2, %bb2, %start\n  %.0 = phi i64 [ 2, %start ], [ %x, %bb2 ], [ %x, %bb2 ], [ %_8.0, %bb3 ], [ %_6.0, %bb6 ]\n  ret i64 %.0\n", llvm_type: "label" }))
Operand 2 is Some(Right(BasicBlock { address: 0x55b970c63280, is_const: false, llvm_value: "\npanic:                                            ; preds = %bb3\n  call void @_ZN4core9panicking5panic17h4241c5ccea17facaE([0 x i8]* noundef nonnull align 1 bitcast ([28 x i8]* @str.0 to [0 x i8]*), i64 28, %\"core::panic::location::Location\"* noundef align 8 dereferenceable(24) bitcast (<{ i8*, [16 x i8] }>* @alloc35 to %\"core::panic::location::Location\"*)) #7\n  unreachable\n", llvm_type: "label" }))
IF STATEMENT
terminator is InstructionValue { instruction_value: Value { name: "", address: 0x55b970c64200, is_const: false, is_null: false, is_undef: false, llvm_value: "  br i1 %_6.1, label %panic1, label %bb9, !prof !3", llvm_type: "void" } }
Operand 0 is Some(Left(IntValue(IntValue { int_value: Value { name: "_6.1", address: 0x55b970c64070, is_const: false, is_null: false, is_undef: false, llvm_value: "  %_6.1 = extractvalue { i64, i1 } %1, 1", llvm_type: "i1" } })))
Operand 1 is Some(Right(BasicBlock { address: 0x55b970c630a0, is_const: false, llvm_value: "\nbb9:                                              ; preds = %bb6, %bb3, %bb2, %bb2, %start\n  %.0 = phi i64 [ 2, %start ], [ %x, %bb2 ], [ %x, %bb2 ], [ %_8.0, %bb3 ], [ %_6.0, %bb6 ]\n  ret i64 %.0\n", llvm_type: "label" }))
Operand 2 is Some(Right(BasicBlock { address: 0x55b970c63320, is_const: false, llvm_value: "\npanic1:                                           ; preds = %bb6\n  call void @_ZN4core9panicking5panic17h4241c5ccea17facaE([0 x i8]* noundef nonnull align 1 bitcast ([33 x i8]* @str.1 to [0 x i8]*), i64 33, %\"core::panic::location::Location\"* noundef align 8 dereferenceable(24) bitcast (<{ i8*, [16 x i8] }>* @alloc37 to %\"core::panic::location::Location\"*)) #7\n  unreachable\n", llvm_type: "label" }))
[2mJan 15 20:18:35.580[0m [34mDEBUG[0m wombat_symx: Backward sorted nodes:	["common_end", "bb9", "panic1", "panic", "bb6", "bb3", "bb2", "start"]
IF STATEMENT
terminator is InstructionValue { instruction_value: Value { name: "", address: 0x55b970c63670, is_const: false, is_null: false, is_undef: false, llvm_value: "  br i1 %_2, label %bb9, label %bb2", llvm_type: "void" } }
Operand 0 is Some(Left(IntValue(IntValue { int_value: Value { name: "_2", address: 0x55b970c635c0, is_const: false, is_null: false, is_undef: false, llvm_value: "  %_2 = icmp sgt i64 %x, 1", llvm_type: "i1" } })))
Operand 1 is Some(Right(BasicBlock { address: 0x55b970c63000, is_const: false, llvm_value: "\nbb2:                                              ; preds = %start\n  switch i64 %x, label %bb3 [\n    i64 1, label %bb9\n    i64 2, label %bb9\n    i64 3, label %bb6\n  ]\n", llvm_type: "label" }))
Operand 2 is Some(Right(BasicBlock { address: 0x55b970c630a0, is_const: false, llvm_value: "\nbb9:                                              ; preds = %bb6, %bb3, %bb2, %bb2, %start\n  %.0 = phi i64 [ 2, %start ], [ %x, %bb2 ], [ %x, %bb2 ], [ %_8.0, %bb3 ], [ %_6.0, %bb6 ]\n  ret i64 %.0\n", llvm_type: "label" }))
SWITCH STATEMENT
terminator is InstructionValue { instruction_value: Value { name: "", address: 0x55b970c63378, is_const: false, is_null: false, is_undef: false, llvm_value: "  switch i64 %x, label %bb3 [\n    i64 1, label %bb9\n    i64 2, label %bb9\n    i64 3, label %bb6\n  ]", llvm_type: "void" } }
Operand 0 is Some(Left(IntValue(IntValue { int_value: Value { name: "x", address: 0x55b970c5da80, is_const: false, is_null: false, is_undef: false, llvm_value: "i64 %x", llvm_type: "i64" } })))
Operand 1 is Some(Right(BasicBlock { address: 0x55b970c630f0, is_const: false, llvm_value: "\nbb3:                                              ; preds = %bb2\n  %0 = call { i64, i1 } @llvm.sadd.with.overflow.i64(i64 %x, i64 1)\n  %_8.0 = extractvalue { i64, i1 } %0, 0\n  %_8.1 = extractvalue { i64, i1 } %0, 1\n  br i1 %_8.1, label %panic, label %bb9, !prof !3\n", llvm_type: "label" }))
Operand 2 is Some(Left(IntValue(IntValue { int_value: Value { name: "", address: 0x55b970c62b20, is_const: true, is_null: false, is_undef: false, llvm_value: "i64 1", llvm_type: "i64" } })))
Operand 3 is Some(Right(BasicBlock { address: 0x55b970c630a0, is_const: false, llvm_value: "\nbb9:                                              ; preds = %bb6, %bb3, %bb2, %bb2, %start\n  %.0 = phi i64 [ 2, %start ], [ %x, %bb2 ], [ %x, %bb2 ], [ %_8.0, %bb3 ], [ %_6.0, %bb6 ]\n  ret i64 %.0\n", llvm_type: "label" }))
Operand 4 is Some(Left(IntValue(IntValue { int_value: Value { name: "", address: 0x55b970c633c0, is_const: true, is_null: false, is_undef: false, llvm_value: "i64 2", llvm_type: "i64" } })))
Operand 5 is Some(Right(BasicBlock { address: 0x55b970c630a0, is_const: false, llvm_value: "\nbb9:                                              ; preds = %bb6, %bb3, %bb2, %bb2, %start\n  %.0 = phi i64 [ 2, %start ], [ %x, %bb2 ], [ %x, %bb2 ], [ %_8.0, %bb3 ], [ %_6.0, %bb6 ]\n  ret i64 %.0\n", llvm_type: "label" }))
Operand 6 is Some(Left(IntValue(IntValue { int_value: Value { name: "", address: 0x55b970c633f0, is_const: true, is_null: false, is_undef: false, llvm_value: "i64 3", llvm_type: "i64" } })))
Operand 7 is Some(Right(BasicBlock { address: 0x55b970c631e0, is_const: false, llvm_value: "\nbb6:                                              ; preds = %bb2\n  %1 = call { i64, i1 } @llvm.ssub.with.overflow.i64(i64 %x, i64 1)\n  %_6.0 = extractvalue { i64, i1 } %1, 0\n  %_6.1 = extractvalue { i64, i1 } %1, 1\n  br i1 %_6.1, label %panic1, label %bb9, !prof !3\n", llvm_type: "label" }))
Number of operands is 8
IF STATEMENT
terminator is InstructionValue { instruction_value: Value { name: "", address: 0x55b970c63cb0, is_const: false, is_null: false, is_undef: false, llvm_value: "  br i1 %_8.1, label %panic, label %bb9, !prof !3", llvm_type: "void" } }
Operand 0 is Some(Left(IntValue(IntValue { int_value: Value { name: "_8.1", address: 0x55b970c63b20, is_const: false, is_null: false, is_undef: false, llvm_value: "  %_8.1 = extractvalue { i64, i1 } %0, 1", llvm_type: "i1" } })))
Operand 1 is Some(Right(BasicBlock { address: 0x55b970c630a0, is_const: false, llvm_value: "\nbb9:                                              ; preds = %bb6, %bb3, %bb2, %bb2, %start\n  %.0 = phi i64 [ 2, %start ], [ %x, %bb2 ], [ %x, %bb2 ], [ %_8.0, %bb3 ], [ %_6.0, %bb6 ]\n  ret i64 %.0\n", llvm_type: "label" }))
Operand 2 is Some(Right(BasicBlock { address: 0x55b970c63280, is_const: false, llvm_value: "\npanic:                                            ; preds = %bb3\n  call void @_ZN4core9panicking5panic17h4241c5ccea17facaE([0 x i8]* noundef nonnull align 1 bitcast ([28 x i8]* @str.0 to [0 x i8]*), i64 28, %\"core::panic::location::Location\"* noundef align 8 dereferenceable(24) bitcast (<{ i8*, [16 x i8] }>* @alloc35 to %\"core::panic::location::Location\"*)) #7\n  unreachable\n", llvm_type: "label" }))
IF STATEMENT
terminator is InstructionValue { instruction_value: Value { name: "", address: 0x55b970c64200, is_const: false, is_null: false, is_undef: false, llvm_value: "  br i1 %_6.1, label %panic1, label %bb9, !prof !3", llvm_type: "void" } }
Operand 0 is Some(Left(IntValue(IntValue { int_value: Value { name: "_6.1", address: 0x55b970c64070, is_const: false, is_null: false, is_undef: false, llvm_value: "  %_6.1 = extractvalue { i64, i1 } %1, 1", llvm_type: "i1" } })))
Operand 1 is Some(Right(BasicBlock { address: 0x55b970c630a0, is_const: false, llvm_value: "\nbb9:                                              ; preds = %bb6, %bb3, %bb2, %bb2, %start\n  %.0 = phi i64 [ 2, %start ], [ %x, %bb2 ], [ %x, %bb2 ], [ %_8.0, %bb3 ], [ %_6.0, %bb6 ]\n  ret i64 %.0\n", llvm_type: "label" }))
Operand 2 is Some(Right(BasicBlock { address: 0x55b970c63320, is_const: false, llvm_value: "\npanic1:                                           ; preds = %bb6\n  call void @_ZN4core9panicking5panic17h4241c5ccea17facaE([0 x i8]* noundef nonnull align 1 bitcast ([33 x i8]* @str.1 to [0 x i8]*), i64 33, %\"core::panic::location::Location\"* noundef align 8 dereferenceable(24) bitcast (<{ i8*, [16 x i8] }>* @alloc37 to %\"core::panic::location::Location\"*)) #7\n  unreachable\n", llvm_type: "label" }))
IF STATEMENT
terminator is InstructionValue { instruction_value: Value { name: "", address: 0x55b970c63670, is_const: false, is_null: false, is_undef: false, llvm_value: "  br i1 %_2, label %bb9, label %bb2", llvm_type: "void" } }
Operand 0 is Some(Left(IntValue(IntValue { int_value: Value { name: "_2", address: 0x55b970c635c0, is_const: false, is_null: false, is_undef: false, llvm_value: "  %_2 = icmp sgt i64 %x, 1", llvm_type: "i1" } })))
Operand 1 is Some(Right(BasicBlock { address: 0x55b970c63000, is_const: false, llvm_value: "\nbb2:                                              ; preds = %start\n  switch i64 %x, label %bb3 [\n    i64 1, label %bb9\n    i64 2, label %bb9\n    i64 3, label %bb6\n  ]\n", llvm_type: "label" }))
Operand 2 is Some(Right(BasicBlock { address: 0x55b970c630a0, is_const: false, llvm_value: "\nbb9:                                              ; preds = %bb6, %bb3, %bb2, %bb2, %start\n  %.0 = phi i64 [ 2, %start ], [ %x, %bb2 ], [ %x, %bb2 ], [ %_8.0, %bb3 ], [ %_6.0, %bb6 ]\n  ret i64 %.0\n", llvm_type: "label" }))
SWITCH STATEMENT
terminator is InstructionValue { instruction_value: Value { name: "", address: 0x55b970c63378, is_const: false, is_null: false, is_undef: false, llvm_value: "  switch i64 %x, label %bb3 [\n    i64 1, label %bb9\n    i64 2, label %bb9\n    i64 3, label %bb6\n  ]", llvm_type: "void" } }
Operand 0 is Some(Left(IntValue(IntValue { int_value: Value { name: "x", address: 0x55b970c5da80, is_const: false, is_null: false, is_undef: false, llvm_value: "i64 %x", llvm_type: "i64" } })))
Operand 1 is Some(Right(BasicBlock { address: 0x55b970c630f0, is_const: false, llvm_value: "\nbb3:                                              ; preds = %bb2\n  %0 = call { i64, i1 } @llvm.sadd.with.overflow.i64(i64 %x, i64 1)\n  %_8.0 = extractvalue { i64, i1 } %0, 0\n  %_8.1 = extractvalue { i64, i1 } %0, 1\n  br i1 %_8.1, label %panic, label %bb9, !prof !3\n", llvm_type: "label" }))
Operand 2 is Some(Left(IntValue(IntValue { int_value: Value { name: "", address: 0x55b970c62b20, is_const: true, is_null: false, is_undef: false, llvm_value: "i64 1", llvm_type: "i64" } })))
Operand 3 is Some(Right(BasicBlock { address: 0x55b970c630a0, is_const: false, llvm_value: "\nbb9:                                              ; preds = %bb6, %bb3, %bb2, %bb2, %start\n  %.0 = phi i64 [ 2, %start ], [ %x, %bb2 ], [ %x, %bb2 ], [ %_8.0, %bb3 ], [ %_6.0, %bb6 ]\n  ret i64 %.0\n", llvm_type: "label" }))
Operand 4 is Some(Left(IntValue(IntValue { int_value: Value { name: "", address: 0x55b970c633c0, is_const: true, is_null: false, is_undef: false, llvm_value: "i64 2", llvm_type: "i64" } })))
Operand 5 is Some(Right(BasicBlock { address: 0x55b970c630a0, is_const: false, llvm_value: "\nbb9:                                              ; preds = %bb6, %bb3, %bb2, %bb2, %start\n  %.0 = phi i64 [ 2, %start ], [ %x, %bb2 ], [ %x, %bb2 ], [ %_8.0, %bb3 ], [ %_6.0, %bb6 ]\n  ret i64 %.0\n", llvm_type: "label" }))
Operand 6 is Some(Left(IntValue(IntValue { int_value: Value { name: "", address: 0x55b970c633f0, is_const: true, is_null: false, is_undef: false, llvm_value: "i64 3", llvm_type: "i64" } })))
Operand 7 is Some(Right(BasicBlock { address: 0x55b970c631e0, is_const: false, llvm_value: "\nbb6:                                              ; preds = %bb2\n  %1 = call { i64, i1 } @llvm.ssub.with.overflow.i64(i64 %x, i64 1)\n  %_6.0 = extractvalue { i64, i1 } %1, 0\n  %_6.1 = extractvalue { i64, i1 } %1, 1\n  br i1 %_6.1, label %panic1, label %bb9, !prof !3\n", llvm_type: "label" }))
Number of operands is 8
IF STATEMENT
terminator is InstructionValue { instruction_value: Value { name: "", address: 0x55b970c63cb0, is_const: false, is_null: false, is_undef: false, llvm_value: "  br i1 %_8.1, label %panic, label %bb9, !prof !3", llvm_type: "void" } }
Operand 0 is Some(Left(IntValue(IntValue { int_value: Value { name: "_8.1", address: 0x55b970c63b20, is_const: false, is_null: false, is_undef: false, llvm_value: "  %_8.1 = extractvalue { i64, i1 } %0, 1", llvm_type: "i1" } })))
Operand 1 is Some(Right(BasicBlock { address: 0x55b970c630a0, is_const: false, llvm_value: "\nbb9:                                              ; preds = %bb6, %bb3, %bb2, %bb2, %start\n  %.0 = phi i64 [ 2, %start ], [ %x, %bb2 ], [ %x, %bb2 ], [ %_8.0, %bb3 ], [ %_6.0, %bb6 ]\n  ret i64 %.0\n", llvm_type: "label" }))
Operand 2 is Some(Right(BasicBlock { address: 0x55b970c63280, is_const: false, llvm_value: "\npanic:                                            ; preds = %bb3\n  call void @_ZN4core9panicking5panic17h4241c5ccea17facaE([0 x i8]* noundef nonnull align 1 bitcast ([28 x i8]* @str.0 to [0 x i8]*), i64 28, %\"core::panic::location::Location\"* noundef align 8 dereferenceable(24) bitcast (<{ i8*, [16 x i8] }>* @alloc35 to %\"core::panic::location::Location\"*)) #7\n  unreachable\n", llvm_type: "label" }))
IF STATEMENT
terminator is InstructionValue { instruction_value: Value { name: "", address: 0x55b970c64200, is_const: false, is_null: false, is_undef: false, llvm_value: "  br i1 %_6.1, label %panic1, label %bb9, !prof !3", llvm_type: "void" } }
Operand 0 is Some(Left(IntValue(IntValue { int_value: Value { name: "_6.1", address: 0x55b970c64070, is_const: false, is_null: false, is_undef: false, llvm_value: "  %_6.1 = extractvalue { i64, i1 } %1, 1", llvm_type: "i1" } })))
Operand 1 is Some(Right(BasicBlock { address: 0x55b970c630a0, is_const: false, llvm_value: "\nbb9:                                              ; preds = %bb6, %bb3, %bb2, %bb2, %start\n  %.0 = phi i64 [ 2, %start ], [ %x, %bb2 ], [ %x, %bb2 ], [ %_8.0, %bb3 ], [ %_6.0, %bb6 ]\n  ret i64 %.0\n", llvm_type: "label" }))
Operand 2 is Some(Right(BasicBlock { address: 0x55b970c63320, is_const: false, llvm_value: "\npanic1:                                           ; preds = %bb6\n  call void @_ZN4core9panicking5panic17h4241c5ccea17facaE([0 x i8]* noundef nonnull align 1 bitcast ([33 x i8]* @str.1 to [0 x i8]*), i64 33, %\"core::panic::location::Location\"* noundef align 8 dereferenceable(24) bitcast (<{ i8*, [16 x i8] }>* @alloc37 to %\"core::panic::location::Location\"*)) #7\n  unreachable\n", llvm_type: "label" }))
IF STATEMENT
terminator is InstructionValue { instruction_value: Value { name: "", address: 0x55b970c63670, is_const: false, is_null: false, is_undef: false, llvm_value: "  br i1 %_2, label %bb9, label %bb2", llvm_type: "void" } }
Operand 0 is Some(Left(IntValue(IntValue { int_value: Value { name: "_2", address: 0x55b970c635c0, is_const: false, is_null: false, is_undef: false, llvm_value: "  %_2 = icmp sgt i64 %x, 1", llvm_type: "i1" } })))
Operand 1 is Some(Right(BasicBlock { address: 0x55b970c63000, is_const: false, llvm_value: "\nbb2:                                              ; preds = %start\n  switch i64 %x, label %bb3 [\n    i64 1, label %bb9\n    i64 2, label %bb9\n    i64 3, label %bb6\n  ]\n", llvm_type: "label" }))
Operand 2 is Some(Right(BasicBlock { address: 0x55b970c630a0, is_const: false, llvm_value: "\nbb9:                                              ; preds = %bb6, %bb3, %bb2, %bb2, %start\n  %.0 = phi i64 [ 2, %start ], [ %x, %bb2 ], [ %x, %bb2 ], [ %_8.0, %bb3 ], [ %_6.0, %bb6 ]\n  ret i64 %.0\n", llvm_type: "label" }))
SWITCH STATEMENT
terminator is InstructionValue { instruction_value: Value { name: "", address: 0x55b970c63378, is_const: false, is_null: false, is_undef: false, llvm_value: "  switch i64 %x, label %bb3 [\n    i64 1, label %bb9\n    i64 2, label %bb9\n    i64 3, label %bb6\n  ]", llvm_type: "void" } }
Operand 0 is Some(Left(IntValue(IntValue { int_value: Value { name: "x", address: 0x55b970c5da80, is_const: false, is_null: false, is_undef: false, llvm_value: "i64 %x", llvm_type: "i64" } })))
Operand 1 is Some(Right(BasicBlock { address: 0x55b970c630f0, is_const: false, llvm_value: "\nbb3:                                              ; preds = %bb2\n  %0 = call { i64, i1 } @llvm.sadd.with.overflow.i64(i64 %x, i64 1)\n  %_8.0 = extractvalue { i64, i1 } %0, 0\n  %_8.1 = extractvalue { i64, i1 } %0, 1\n  br i1 %_8.1, label %panic, label %bb9, !prof !3\n", llvm_type: "label" }))
Operand 2 is Some(Left(IntValue(IntValue { int_value: Value { name: "", address: 0x55b970c62b20, is_const: true, is_null: false, is_undef: false, llvm_value: "i64 1", llvm_type: "i64" } })))
Operand 3 is Some(Right(BasicBlock { address: 0x55b970c630a0, is_const: false, llvm_value: "\nbb9:                                              ; preds = %bb6, %bb3, %bb2, %bb2, %start\n  %.0 = phi i64 [ 2, %start ], [ %x, %bb2 ], [ %x, %bb2 ], [ %_8.0, %bb3 ], [ %_6.0, %bb6 ]\n  ret i64 %.0\n", llvm_type: "label" }))
Operand 4 is Some(Left(IntValue(IntValue { int_value: Value { name: "", address: 0x55b970c633c0, is_const: true, is_null: false, is_undef: false, llvm_value: "i64 2", llvm_type: "i64" } })))
Operand 5 is Some(Right(BasicBlock { address: 0x55b970c630a0, is_const: false, llvm_value: "\nbb9:                                              ; preds = %bb6, %bb3, %bb2, %bb2, %start\n  %.0 = phi i64 [ 2, %start ], [ %x, %bb2 ], [ %x, %bb2 ], [ %_8.0, %bb3 ], [ %_6.0, %bb6 ]\n  ret i64 %.0\n", llvm_type: "label" }))
Operand 6 is Some(Left(IntValue(IntValue { int_value: Value { name: "", address: 0x55b970c633f0, is_const: true, is_null: false, is_undef: false, llvm_value: "i64 3", llvm_type: "i64" } })))
Operand 7 is Some(Right(BasicBlock { address: 0x55b970c631e0, is_const: false, llvm_value: "\nbb6:                                              ; preds = %bb2\n  %1 = call { i64, i1 } @llvm.ssub.with.overflow.i64(i64 %x, i64 1)\n  %_6.0 = extractvalue { i64, i1 } %1, 0\n  %_6.1 = extractvalue { i64, i1 } %1, 1\n  br i1 %_6.1, label %panic1, label %bb9, !prof !3\n", llvm_type: "label" }))
Number of operands is 8
IF STATEMENT
terminator is InstructionValue { instruction_value: Value { name: "", address: 0x55b970c63cb0, is_const: false, is_null: false, is_undef: false, llvm_value: "  br i1 %_8.1, label %panic, label %bb9, !prof !3", llvm_type: "void" } }
Operand 0 is Some(Left(IntValue(IntValue { int_value: Value { name: "_8.1", address: 0x55b970c63b20, is_const: false, is_null: false, is_undef: false, llvm_value: "  %_8.1 = extractvalue { i64, i1 } %0, 1", llvm_type: "i1" } })))
Operand 1 is Some(Right(BasicBlock { address: 0x55b970c630a0, is_const: false, llvm_value: "\nbb9:                                              ; preds = %bb6, %bb3, %bb2, %bb2, %start\n  %.0 = phi i64 [ 2, %start ], [ %x, %bb2 ], [ %x, %bb2 ], [ %_8.0, %bb3 ], [ %_6.0, %bb6 ]\n  ret i64 %.0\n", llvm_type: "label" }))
Operand 2 is Some(Right(BasicBlock { address: 0x55b970c63280, is_const: false, llvm_value: "\npanic:                                            ; preds = %bb3\n  call void @_ZN4core9panicking5panic17h4241c5ccea17facaE([0 x i8]* noundef nonnull align 1 bitcast ([28 x i8]* @str.0 to [0 x i8]*), i64 28, %\"core::panic::location::Location\"* noundef align 8 dereferenceable(24) bitcast (<{ i8*, [16 x i8] }>* @alloc35 to %\"core::panic::location::Location\"*)) #7\n  unreachable\n", llvm_type: "label" }))
IF STATEMENT
terminator is InstructionValue { instruction_value: Value { name: "", address: 0x55b970c64200, is_const: false, is_null: false, is_undef: false, llvm_value: "  br i1 %_6.1, label %panic1, label %bb9, !prof !3", llvm_type: "void" } }
Operand 0 is Some(Left(IntValue(IntValue { int_value: Value { name: "_6.1", address: 0x55b970c64070, is_const: false, is_null: false, is_undef: false, llvm_value: "  %_6.1 = extractvalue { i64, i1 } %1, 1", llvm_type: "i1" } })))
Operand 1 is Some(Right(BasicBlock { address: 0x55b970c630a0, is_const: false, llvm_value: "\nbb9:                                              ; preds = %bb6, %bb3, %bb2, %bb2, %start\n  %.0 = phi i64 [ 2, %start ], [ %x, %bb2 ], [ %x, %bb2 ], [ %_8.0, %bb3 ], [ %_6.0, %bb6 ]\n  ret i64 %.0\n", llvm_type: "label" }))
Operand 2 is Some(Right(BasicBlock { address: 0x55b970c63320, is_const: false, llvm_value: "\npanic1:                                           ; preds = %bb6\n  call void @_ZN4core9panicking5panic17h4241c5ccea17facaE([0 x i8]* noundef nonnull align 1 bitcast ([33 x i8]* @str.1 to [0 x i8]*), i64 33, %\"core::panic::location::Location\"* noundef align 8 dereferenceable(24) bitcast (<{ i8*, [16 x i8] }>* @alloc37 to %\"core::panic::location::Location\"*)) #7\n  unreachable\n", llvm_type: "label" }))
IF STATEMENT
terminator is InstructionValue { instruction_value: Value { name: "", address: 0x55b970c63670, is_const: false, is_null: false, is_undef: false, llvm_value: "  br i1 %_2, label %bb9, label %bb2", llvm_type: "void" } }
Operand 0 is Some(Left(IntValue(IntValue { int_value: Value { name: "_2", address: 0x55b970c635c0, is_const: false, is_null: false, is_undef: false, llvm_value: "  %_2 = icmp sgt i64 %x, 1", llvm_type: "i1" } })))
Operand 1 is Some(Right(BasicBlock { address: 0x55b970c63000, is_const: false, llvm_value: "\nbb2:                                              ; preds = %start\n  switch i64 %x, label %bb3 [\n    i64 1, label %bb9\n    i64 2, label %bb9\n    i64 3, label %bb6\n  ]\n", llvm_type: "label" }))
Operand 2 is Some(Right(BasicBlock { address: 0x55b970c630a0, is_const: false, llvm_value: "\nbb9:                                              ; preds = %bb6, %bb3, %bb2, %bb2, %start\n  %.0 = phi i64 [ 2, %start ], [ %x, %bb2 ], [ %x, %bb2 ], [ %_8.0, %bb3 ], [ %_6.0, %bb6 ]\n  ret i64 %.0\n", llvm_type: "label" }))
SWITCH STATEMENT
terminator is InstructionValue { instruction_value: Value { name: "", address: 0x55b970c63378, is_const: false, is_null: false, is_undef: false, llvm_value: "  switch i64 %x, label %bb3 [\n    i64 1, label %bb9\n    i64 2, label %bb9\n    i64 3, label %bb6\n  ]", llvm_type: "void" } }
Operand 0 is Some(Left(IntValue(IntValue { int_value: Value { name: "x", address: 0x55b970c5da80, is_const: false, is_null: false, is_undef: false, llvm_value: "i64 %x", llvm_type: "i64" } })))
Operand 1 is Some(Right(BasicBlock { address: 0x55b970c630f0, is_const: false, llvm_value: "\nbb3:                                              ; preds = %bb2\n  %0 = call { i64, i1 } @llvm.sadd.with.overflow.i64(i64 %x, i64 1)\n  %_8.0 = extractvalue { i64, i1 } %0, 0\n  %_8.1 = extractvalue { i64, i1 } %0, 1\n  br i1 %_8.1, label %panic, label %bb9, !prof !3\n", llvm_type: "label" }))
Operand 2 is Some(Left(IntValue(IntValue { int_value: Value { name: "", address: 0x55b970c62b20, is_const: true, is_null: false, is_undef: false, llvm_value: "i64 1", llvm_type: "i64" } })))
Operand 3 is Some(Right(BasicBlock { address: 0x55b970c630a0, is_const: false, llvm_value: "\nbb9:                                              ; preds = %bb6, %bb3, %bb2, %bb2, %start\n  %.0 = phi i64 [ 2, %start ], [ %x, %bb2 ], [ %x, %bb2 ], [ %_8.0, %bb3 ], [ %_6.0, %bb6 ]\n  ret i64 %.0\n", llvm_type: "label" }))
Operand 4 is Some(Left(IntValue(IntValue { int_value: Value { name: "", address: 0x55b970c633c0, is_const: true, is_null: false, is_undef: false, llvm_value: "i64 2", llvm_type: "i64" } })))
Operand 5 is Some(Right(BasicBlock { address: 0x55b970c630a0, is_const: false, llvm_value: "\nbb9:                                              ; preds = %bb6, %bb3, %bb2, %bb2, %start\n  %.0 = phi i64 [ 2, %start ], [ %x, %bb2 ], [ %x, %bb2 ], [ %_8.0, %bb3 ], [ %_6.0, %bb6 ]\n  ret i64 %.0\n", llvm_type: "label" }))
Operand 6 is Some(Left(IntValue(IntValue { int_value: Value { name: "", address: 0x55b970c633f0, is_const: true, is_null: false, is_undef: false, llvm_value: "i64 3", llvm_type: "i64" } })))
Operand 7 is Some(Right(BasicBlock { address: 0x55b970c631e0, is_const: false, llvm_value: "\nbb6:                                              ; preds = %bb2\n  %1 = call { i64, i1 } @llvm.ssub.with.overflow.i64(i64 %x, i64 1)\n  %_6.0 = extractvalue { i64, i1 } %1, 0\n  %_6.1 = extractvalue { i64, i1 } %1, 1\n  br i1 %_6.1, label %panic1, label %bb9, !prof !3\n", llvm_type: "label" }))
Number of operands is 8
IF STATEMENT
terminator is InstructionValue { instruction_value: Value { name: "", address: 0x55b970c63cb0, is_const: false, is_null: false, is_undef: false, llvm_value: "  br i1 %_8.1, label %panic, label %bb9, !prof !3", llvm_type: "void" } }
Operand 0 is Some(Left(IntValue(IntValue { int_value: Value { name: "_8.1", address: 0x55b970c63b20, is_const: false, is_null: false, is_undef: false, llvm_value: "  %_8.1 = extractvalue { i64, i1 } %0, 1", llvm_type: "i1" } })))
Operand 1 is Some(Right(BasicBlock { address: 0x55b970c630a0, is_const: false, llvm_value: "\nbb9:                                              ; preds = %bb6, %bb3, %bb2, %bb2, %start\n  %.0 = phi i64 [ 2, %start ], [ %x, %bb2 ], [ %x, %bb2 ], [ %_8.0, %bb3 ], [ %_6.0, %bb6 ]\n  ret i64 %.0\n", llvm_type: "label" }))
Operand 2 is Some(Right(BasicBlock { address: 0x55b970c63280, is_const: false, llvm_value: "\npanic:                                            ; preds = %bb3\n  call void @_ZN4core9panicking5panic17h4241c5ccea17facaE([0 x i8]* noundef nonnull align 1 bitcast ([28 x i8]* @str.0 to [0 x i8]*), i64 28, %\"core::panic::location::Location\"* noundef align 8 dereferenceable(24) bitcast (<{ i8*, [16 x i8] }>* @alloc35 to %\"core::panic::location::Location\"*)) #7\n  unreachable\n", llvm_type: "label" }))
IF STATEMENT
terminator is InstructionValue { instruction_value: Value { name: "", address: 0x55b970c64200, is_const: false, is_null: false, is_undef: false, llvm_value: "  br i1 %_6.1, label %panic1, label %bb9, !prof !3", llvm_type: "void" } }
Operand 0 is Some(Left(IntValue(IntValue { int_value: Value { name: "_6.1", address: 0x55b970c64070, is_const: false, is_null: false, is_undef: false, llvm_value: "  %_6.1 = extractvalue { i64, i1 } %1, 1", llvm_type: "i1" } })))
Operand 1 is Some(Right(BasicBlock { address: 0x55b970c630a0, is_const: false, llvm_value: "\nbb9:                                              ; preds = %bb6, %bb3, %bb2, %bb2, %start\n  %.0 = phi i64 [ 2, %start ], [ %x, %bb2 ], [ %x, %bb2 ], [ %_8.0, %bb3 ], [ %_6.0, %bb6 ]\n  ret i64 %.0\n", llvm_type: "label" }))
Operand 2 is Some(Right(BasicBlock { address: 0x55b970c63320, is_const: false, llvm_value: "\npanic1:                                           ; preds = %bb6\n  call void @_ZN4core9panicking5panic17h4241c5ccea17facaE([0 x i8]* noundef nonnull align 1 bitcast ([33 x i8]* @str.1 to [0 x i8]*), i64 33, %\"core::panic::location::Location\"* noundef align 8 dereferenceable(24) bitcast (<{ i8*, [16 x i8] }>* @alloc37 to %\"core::panic::location::Location\"*)) #7\n  unreachable\n", llvm_type: "label" }))
IF HAS NUM OPERANDS 3
IF HAS TERMINATOR InstructionValue { instruction_value: Value { name: "", address: 0x55b970c63cb0, is_const: false, is_null: false, is_undef: false, llvm_value: "  br i1 %_8.1, label %panic, label %bb9, !prof !3", llvm_type: "void" } }
IF HAS NODE "bb9"
TEST 123 "  %_8.1 = extractvalue { i64, i1 } %0, 1"
IF HAS TARGET VAL false
IF HAS TARGET VAL VAR false
IF HAS SWITCH VAR %_8.1
IF HAS DISCRIMINANT IntValue(IntValue { int_value: Value { name: "_8.1", address: 0x55b970c63b20, is_const: false, is_null: false, is_undef: false, llvm_value: "  %_8.1 = extractvalue { i64, i1 } %0, 1", llvm_type: "i1" } })
IF HAS ENTRY CONDITION (= %_8.1 false)
IF HAS NUM OPERANDS 3
IF HAS TERMINATOR InstructionValue { instruction_value: Value { name: "", address: 0x55b970c64200, is_const: false, is_null: false, is_undef: false, llvm_value: "  br i1 %_6.1, label %panic1, label %bb9, !prof !3", llvm_type: "void" } }
IF HAS NODE "bb9"
TEST 123 "  %_6.1 = extractvalue { i64, i1 } %1, 1"
IF HAS TARGET VAL false
IF HAS TARGET VAL VAR false
IF HAS SWITCH VAR %_6.1
IF HAS DISCRIMINANT IntValue(IntValue { int_value: Value { name: "_6.1", address: 0x55b970c64070, is_const: false, is_null: false, is_undef: false, llvm_value: "  %_6.1 = extractvalue { i64, i1 } %1, 1", llvm_type: "i1" } })
IF HAS ENTRY CONDITION (= %_6.1 false)
IF HAS NUM OPERANDS 3
IF HAS TERMINATOR InstructionValue { instruction_value: Value { name: "", address: 0x55b970c63670, is_const: false, is_null: false, is_undef: false, llvm_value: "  br i1 %_2, label %bb9, label %bb2", llvm_type: "void" } }
IF HAS NODE "bb9"
TEST 123 "  %_2 = icmp sgt i64 %x, 1"
IF HAS TARGET VAL true
IF HAS TARGET VAL VAR true
IF HAS SWITCH VAR %_2
IF HAS DISCRIMINANT IntValue(IntValue { int_value: Value { name: "_2", address: 0x55b970c635c0, is_const: false, is_null: false, is_undef: false, llvm_value: "  %_2 = icmp sgt i64 %x, 1", llvm_type: "i1" } })
IF HAS ENTRY CONDITION (= %_2 true)
SWITCH HAS NUM OPERANDS 8
SWITCH HAS TERMINATOR InstructionValue { instruction_value: Value { name: "", address: 0x55b970c63378, is_const: false, is_null: false, is_undef: false, llvm_value: "  switch i64 %x, label %bb3 [\n    i64 1, label %bb9\n    i64 2, label %bb9\n    i64 3, label %bb6\n  ]", llvm_type: "void" } }
SWITCH HAS NODE "bb9"
Operand 0 is IntValue(IntValue { int_value: Value { name: "x", address: 0x55b970c5da80, is_const: false, is_null: false, is_undef: false, llvm_value: "i64 %x", llvm_type: "i64" } })
Operand 1 is BasicBlock { address: 0x55b970c630f0, is_const: false, llvm_value: "\nbb3:                                              ; preds = %bb2\n  %0 = call { i64, i1 } @llvm.sadd.with.overflow.i64(i64 %x, i64 1)\n  %_8.0 = extractvalue { i64, i1 } %0, 0\n  %_8.1 = extractvalue { i64, i1 } %0, 1\n  br i1 %_8.1, label %panic, label %bb9, !prof !3\n", llvm_type: "label" }
Operand 2 is IntValue(IntValue { int_value: Value { name: "", address: 0x55b970c62b20, is_const: true, is_null: false, is_undef: false, llvm_value: "i64 1", llvm_type: "i64" } })
Operand 3 is BasicBlock { address: 0x55b970c630a0, is_const: false, llvm_value: "\nbb9:                                              ; preds = %bb6, %bb3, %bb2, %bb2, %start\n  %.0 = phi i64 [ 2, %start ], [ %x, %bb2 ], [ %x, %bb2 ], [ %_8.0, %bb3 ], [ %_6.0, %bb6 ]\n  ret i64 %.0\n", llvm_type: "label" }
FUCKKKKKKKKKKK
TEST 123 "i64 1"
TEST 123 "i64 %x"
SWITCH HAS TARGET VAL IntValue(IntValue { int_value: Value { name: "", address: 0x55b970c62b20, is_const: true, is_null: false, is_undef: false, llvm_value: "i64 1", llvm_type: "i64" } })
SWITCH HAS TARGET VAL VAR const_1
SWITCH HAS SWITCH VAR %x
SWITCH HAS DISCRIMINANT IntValue(IntValue { int_value: Value { name: "x", address: 0x55b970c5da80, is_const: false, is_null: false, is_undef: false, llvm_value: "i64 %x", llvm_type: "i64" } })
SWITCH HAS UNWRAPPED DISCRIMINANT IntValue { int_value: Value { name: "x", address: 0x55b970c5da80, is_const: false, is_null: false, is_undef: false, llvm_value: "i64 %x", llvm_type: "i64" } }
SWITCH HAS ENTRY CONDITION (= %x const_1)
[2mJan 15 20:18:35.619[0m [34mDEBUG[0m wombat_symx: Unsupported Call function "_ZN4core9panicking5panic17h4241c5ccea17facaE"
IF HAS NUM OPERANDS 3
IF HAS TERMINATOR InstructionValue { instruction_value: Value { name: "", address: 0x55b970c64200, is_const: false, is_null: false, is_undef: false, llvm_value: "  br i1 %_6.1, label %panic1, label %bb9, !prof !3", llvm_type: "void" } }
IF HAS NODE "panic1"
TEST 123 "  %_6.1 = extractvalue { i64, i1 } %1, 1"
IF HAS TARGET VAL true
IF HAS TARGET VAL VAR true
IF HAS SWITCH VAR %_6.1
IF HAS DISCRIMINANT IntValue(IntValue { int_value: Value { name: "_6.1", address: 0x55b970c64070, is_const: false, is_null: false, is_undef: false, llvm_value: "  %_6.1 = extractvalue { i64, i1 } %1, 1", llvm_type: "i1" } })
IF HAS ENTRY CONDITION (= %_6.1 true)
[2mJan 15 20:18:35.619[0m [34mDEBUG[0m wombat_symx: Unsupported Call function "_ZN4core9panicking5panic17h4241c5ccea17facaE"
IF HAS NUM OPERANDS 3
IF HAS TERMINATOR InstructionValue { instruction_value: Value { name: "", address: 0x55b970c63cb0, is_const: false, is_null: false, is_undef: false, llvm_value: "  br i1 %_8.1, label %panic, label %bb9, !prof !3", llvm_type: "void" } }
IF HAS NODE "panic"
TEST 123 "  %_8.1 = extractvalue { i64, i1 } %0, 1"
IF HAS TARGET VAL true
IF HAS TARGET VAL VAR true
IF HAS SWITCH VAR %_8.1
IF HAS DISCRIMINANT IntValue(IntValue { int_value: Value { name: "_8.1", address: 0x55b970c63b20, is_const: false, is_null: false, is_undef: false, llvm_value: "  %_8.1 = extractvalue { i64, i1 } %0, 1", llvm_type: "i1" } })
IF HAS ENTRY CONDITION (= %_8.1 true)
IF HAS NUM OPERANDS 3
IF HAS TERMINATOR InstructionValue { instruction_value: Value { name: "", address: 0x55b970c64200, is_const: false, is_null: false, is_undef: false, llvm_value: "  br i1 %_6.1, label %panic1, label %bb9, !prof !3", llvm_type: "void" } }
IF HAS NODE "panic1"
TEST 123 "  %_6.1 = extractvalue { i64, i1 } %1, 1"
IF HAS TARGET VAL true
IF HAS TARGET VAL VAR true
IF HAS SWITCH VAR %_6.1
IF HAS DISCRIMINANT IntValue(IntValue { int_value: Value { name: "_6.1", address: 0x55b970c64070, is_const: false, is_null: false, is_undef: false, llvm_value: "  %_6.1 = extractvalue { i64, i1 } %1, 1", llvm_type: "i1" } })
IF HAS ENTRY CONDITION (= %_6.1 true)
IF HAS NUM OPERANDS 3
IF HAS TERMINATOR InstructionValue { instruction_value: Value { name: "", address: 0x55b970c64200, is_const: false, is_null: false, is_undef: false, llvm_value: "  br i1 %_6.1, label %panic1, label %bb9, !prof !3", llvm_type: "void" } }
IF HAS NODE "bb9"
TEST 123 "  %_6.1 = extractvalue { i64, i1 } %1, 1"
IF HAS TARGET VAL false
IF HAS TARGET VAL VAR false
IF HAS SWITCH VAR %_6.1
IF HAS DISCRIMINANT IntValue(IntValue { int_value: Value { name: "_6.1", address: 0x55b970c64070, is_const: false, is_null: false, is_undef: false, llvm_value: "  %_6.1 = extractvalue { i64, i1 } %1, 1", llvm_type: "i1" } })
IF HAS ENTRY CONDITION (= %_6.1 false)
TEST 123 "  %.0 = phi i64 [ 2, %start ], [ %x, %bb2 ], [ %x, %bb2 ], [ %_8.0, %bb3 ], [ %_6.0, %bb6 ]"
TEST 123 "  %_6.0 = extractvalue { i64, i1 } %1, 0"
TEST 123 "  %_6.1 = extractvalue { i64, i1 } %1, 1"
TEST 123 "  %1 = call { i64, i1 } @llvm.ssub.with.overflow.i64(i64 %x, i64 1)"
TEST 123 "  %_6.0 = extractvalue { i64, i1 } %1, 0"
TEST 123 "  %1 = call { i64, i1 } @llvm.ssub.with.overflow.i64(i64 %x, i64 1)"
TEST 123 "i64 %x"
TEST 123 "i64 1"
TEST 123 "  %1 = call { i64, i1 } @llvm.ssub.with.overflow.i64(i64 %x, i64 1)"
TEST 123 "  %1 = call { i64, i1 } @llvm.ssub.with.overflow.i64(i64 %x, i64 1)"
SWITCH HAS NUM OPERANDS 8
SWITCH HAS TERMINATOR InstructionValue { instruction_value: Value { name: "", address: 0x55b970c63378, is_const: false, is_null: false, is_undef: false, llvm_value: "  switch i64 %x, label %bb3 [\n    i64 1, label %bb9\n    i64 2, label %bb9\n    i64 3, label %bb6\n  ]", llvm_type: "void" } }
SWITCH HAS NODE "bb6"
Operand 0 is IntValue(IntValue { int_value: Value { name: "x", address: 0x55b970c5da80, is_const: false, is_null: false, is_undef: false, llvm_value: "i64 %x", llvm_type: "i64" } })
Operand 1 is BasicBlock { address: 0x55b970c630f0, is_const: false, llvm_value: "\nbb3:                                              ; preds = %bb2\n  %0 = call { i64, i1 } @llvm.sadd.with.overflow.i64(i64 %x, i64 1)\n  %_8.0 = extractvalue { i64, i1 } %0, 0\n  %_8.1 = extractvalue { i64, i1 } %0, 1\n  br i1 %_8.1, label %panic, label %bb9, !prof !3\n", llvm_type: "label" }
Operand 2 is IntValue(IntValue { int_value: Value { name: "", address: 0x55b970c62b20, is_const: true, is_null: false, is_undef: false, llvm_value: "i64 1", llvm_type: "i64" } })
Operand 3 is BasicBlock { address: 0x55b970c630a0, is_const: false, llvm_value: "\nbb9:                                              ; preds = %bb6, %bb3, %bb2, %bb2, %start\n  %.0 = phi i64 [ 2, %start ], [ %x, %bb2 ], [ %x, %bb2 ], [ %_8.0, %bb3 ], [ %_6.0, %bb6 ]\n  ret i64 %.0\n", llvm_type: "label" }
Operand 4 is IntValue(IntValue { int_value: Value { name: "", address: 0x55b970c633c0, is_const: true, is_null: false, is_undef: false, llvm_value: "i64 2", llvm_type: "i64" } })
Operand 5 is BasicBlock { address: 0x55b970c630a0, is_const: false, llvm_value: "\nbb9:                                              ; preds = %bb6, %bb3, %bb2, %bb2, %start\n  %.0 = phi i64 [ 2, %start ], [ %x, %bb2 ], [ %x, %bb2 ], [ %_8.0, %bb3 ], [ %_6.0, %bb6 ]\n  ret i64 %.0\n", llvm_type: "label" }
Operand 6 is IntValue(IntValue { int_value: Value { name: "", address: 0x55b970c633f0, is_const: true, is_null: false, is_undef: false, llvm_value: "i64 3", llvm_type: "i64" } })
Operand 7 is BasicBlock { address: 0x55b970c631e0, is_const: false, llvm_value: "\nbb6:                                              ; preds = %bb2\n  %1 = call { i64, i1 } @llvm.ssub.with.overflow.i64(i64 %x, i64 1)\n  %_6.0 = extractvalue { i64, i1 } %1, 0\n  %_6.1 = extractvalue { i64, i1 } %1, 1\n  br i1 %_6.1, label %panic1, label %bb9, !prof !3\n", llvm_type: "label" }
FUCKKKKKKKKKKK
TEST 123 "i64 3"
TEST 123 "i64 %x"
SWITCH HAS TARGET VAL IntValue(IntValue { int_value: Value { name: "", address: 0x55b970c633f0, is_const: true, is_null: false, is_undef: false, llvm_value: "i64 3", llvm_type: "i64" } })
SWITCH HAS TARGET VAL VAR const_3
SWITCH HAS SWITCH VAR %x
SWITCH HAS DISCRIMINANT IntValue(IntValue { int_value: Value { name: "x", address: 0x55b970c5da80, is_const: false, is_null: false, is_undef: false, llvm_value: "i64 %x", llvm_type: "i64" } })
SWITCH HAS UNWRAPPED DISCRIMINANT IntValue { int_value: Value { name: "x", address: 0x55b970c5da80, is_const: false, is_null: false, is_undef: false, llvm_value: "i64 %x", llvm_type: "i64" } }
SWITCH HAS ENTRY CONDITION (= %x const_3)
IF HAS NUM OPERANDS 3
IF HAS TERMINATOR InstructionValue { instruction_value: Value { name: "", address: 0x55b970c63cb0, is_const: false, is_null: false, is_undef: false, llvm_value: "  br i1 %_8.1, label %panic, label %bb9, !prof !3", llvm_type: "void" } }
IF HAS NODE "bb9"
TEST 123 "  %_8.1 = extractvalue { i64, i1 } %0, 1"
IF HAS TARGET VAL false
IF HAS TARGET VAL VAR false
IF HAS SWITCH VAR %_8.1
IF HAS DISCRIMINANT IntValue(IntValue { int_value: Value { name: "_8.1", address: 0x55b970c63b20, is_const: false, is_null: false, is_undef: false, llvm_value: "  %_8.1 = extractvalue { i64, i1 } %0, 1", llvm_type: "i1" } })
IF HAS ENTRY CONDITION (= %_8.1 false)
TEST 123 "  %.0 = phi i64 [ 2, %start ], [ %x, %bb2 ], [ %x, %bb2 ], [ %_8.0, %bb3 ], [ %_6.0, %bb6 ]"
TEST 123 "  %_8.0 = extractvalue { i64, i1 } %0, 0"
IF HAS NUM OPERANDS 3
IF HAS TERMINATOR InstructionValue { instruction_value: Value { name: "", address: 0x55b970c63cb0, is_const: false, is_null: false, is_undef: false, llvm_value: "  br i1 %_8.1, label %panic, label %bb9, !prof !3", llvm_type: "void" } }
IF HAS NODE "panic"
TEST 123 "  %_8.1 = extractvalue { i64, i1 } %0, 1"
IF HAS TARGET VAL true
IF HAS TARGET VAL VAR true
IF HAS SWITCH VAR %_8.1
IF HAS DISCRIMINANT IntValue(IntValue { int_value: Value { name: "_8.1", address: 0x55b970c63b20, is_const: false, is_null: false, is_undef: false, llvm_value: "  %_8.1 = extractvalue { i64, i1 } %0, 1", llvm_type: "i1" } })
IF HAS ENTRY CONDITION (= %_8.1 true)
TEST 123 "  %_8.1 = extractvalue { i64, i1 } %0, 1"
TEST 123 "  %0 = call { i64, i1 } @llvm.sadd.with.overflow.i64(i64 %x, i64 1)"
TEST 123 "  %_8.0 = extractvalue { i64, i1 } %0, 0"
TEST 123 "  %0 = call { i64, i1 } @llvm.sadd.with.overflow.i64(i64 %x, i64 1)"
TEST 123 "i64 %x"
TEST 123 "i64 1"
TEST 123 "  %0 = call { i64, i1 } @llvm.sadd.with.overflow.i64(i64 %x, i64 1)"
TEST 123 "  %0 = call { i64, i1 } @llvm.sadd.with.overflow.i64(i64 %x, i64 1)"
SWITCH HAS NUM OPERANDS 8
SWITCH HAS TERMINATOR InstructionValue { instruction_value: Value { name: "", address: 0x55b970c63378, is_const: false, is_null: false, is_undef: false, llvm_value: "  switch i64 %x, label %bb3 [\n    i64 1, label %bb9\n    i64 2, label %bb9\n    i64 3, label %bb6\n  ]", llvm_type: "void" } }
SWITCH HAS NODE "bb3"
Operand 0 is IntValue(IntValue { int_value: Value { name: "x", address: 0x55b970c5da80, is_const: false, is_null: false, is_undef: false, llvm_value: "i64 %x", llvm_type: "i64" } })
Operand 1 is BasicBlock { address: 0x55b970c630f0, is_const: false, llvm_value: "\nbb3:                                              ; preds = %bb2\n  %0 = call { i64, i1 } @llvm.sadd.with.overflow.i64(i64 %x, i64 1)\n  %_8.0 = extractvalue { i64, i1 } %0, 0\n  %_8.1 = extractvalue { i64, i1 } %0, 1\n  br i1 %_8.1, label %panic, label %bb9, !prof !3\n", llvm_type: "label" }
FUCKKKKKKKKKKK
TEST 123 "i64 %x"
TEST 123 "i64 %x"
SWITCH HAS TARGET VAL IntValue(IntValue { int_value: Value { name: "x", address: 0x55b970c5da80, is_const: false, is_null: false, is_undef: false, llvm_value: "i64 %x", llvm_type: "i64" } })
SWITCH HAS TARGET VAL VAR %x
SWITCH HAS SWITCH VAR %x
SWITCH HAS DISCRIMINANT IntValue(IntValue { int_value: Value { name: "x", address: 0x55b970c5da80, is_const: false, is_null: false, is_undef: false, llvm_value: "i64 %x", llvm_type: "i64" } })
SWITCH HAS UNWRAPPED DISCRIMINANT IntValue { int_value: Value { name: "x", address: 0x55b970c5da80, is_const: false, is_null: false, is_undef: false, llvm_value: "i64 %x", llvm_type: "i64" } }
TEST 123 "i64 1"
TEST 123 "i64 2"
TEST 123 "i64 3"
SWITCH HAS ENTRY CONDITION (= (= (= (= %x %x) (not (= %x const_1))) (not (= %x const_2)))
   (not (= %x const_3)))
SWITCH HAS NUM OPERANDS 8
SWITCH HAS TERMINATOR InstructionValue { instruction_value: Value { name: "", address: 0x55b970c63378, is_const: false, is_null: false, is_undef: false, llvm_value: "  switch i64 %x, label %bb3 [\n    i64 1, label %bb9\n    i64 2, label %bb9\n    i64 3, label %bb6\n  ]", llvm_type: "void" } }
SWITCH HAS NODE "bb6"
Operand 0 is IntValue(IntValue { int_value: Value { name: "x", address: 0x55b970c5da80, is_const: false, is_null: false, is_undef: false, llvm_value: "i64 %x", llvm_type: "i64" } })
Operand 1 is BasicBlock { address: 0x55b970c630f0, is_const: false, llvm_value: "\nbb3:                                              ; preds = %bb2\n  %0 = call { i64, i1 } @llvm.sadd.with.overflow.i64(i64 %x, i64 1)\n  %_8.0 = extractvalue { i64, i1 } %0, 0\n  %_8.1 = extractvalue { i64, i1 } %0, 1\n  br i1 %_8.1, label %panic, label %bb9, !prof !3\n", llvm_type: "label" }
Operand 2 is IntValue(IntValue { int_value: Value { name: "", address: 0x55b970c62b20, is_const: true, is_null: false, is_undef: false, llvm_value: "i64 1", llvm_type: "i64" } })
Operand 3 is BasicBlock { address: 0x55b970c630a0, is_const: false, llvm_value: "\nbb9:                                              ; preds = %bb6, %bb3, %bb2, %bb2, %start\n  %.0 = phi i64 [ 2, %start ], [ %x, %bb2 ], [ %x, %bb2 ], [ %_8.0, %bb3 ], [ %_6.0, %bb6 ]\n  ret i64 %.0\n", llvm_type: "label" }
Operand 4 is IntValue(IntValue { int_value: Value { name: "", address: 0x55b970c633c0, is_const: true, is_null: false, is_undef: false, llvm_value: "i64 2", llvm_type: "i64" } })
Operand 5 is BasicBlock { address: 0x55b970c630a0, is_const: false, llvm_value: "\nbb9:                                              ; preds = %bb6, %bb3, %bb2, %bb2, %start\n  %.0 = phi i64 [ 2, %start ], [ %x, %bb2 ], [ %x, %bb2 ], [ %_8.0, %bb3 ], [ %_6.0, %bb6 ]\n  ret i64 %.0\n", llvm_type: "label" }
Operand 6 is IntValue(IntValue { int_value: Value { name: "", address: 0x55b970c633f0, is_const: true, is_null: false, is_undef: false, llvm_value: "i64 3", llvm_type: "i64" } })
Operand 7 is BasicBlock { address: 0x55b970c631e0, is_const: false, llvm_value: "\nbb6:                                              ; preds = %bb2\n  %1 = call { i64, i1 } @llvm.ssub.with.overflow.i64(i64 %x, i64 1)\n  %_6.0 = extractvalue { i64, i1 } %1, 0\n  %_6.1 = extractvalue { i64, i1 } %1, 1\n  br i1 %_6.1, label %panic1, label %bb9, !prof !3\n", llvm_type: "label" }
FUCKKKKKKKKKKK
TEST 123 "i64 3"
TEST 123 "i64 %x"
SWITCH HAS TARGET VAL IntValue(IntValue { int_value: Value { name: "", address: 0x55b970c633f0, is_const: true, is_null: false, is_undef: false, llvm_value: "i64 3", llvm_type: "i64" } })
SWITCH HAS TARGET VAL VAR const_3
SWITCH HAS SWITCH VAR %x
SWITCH HAS DISCRIMINANT IntValue(IntValue { int_value: Value { name: "x", address: 0x55b970c5da80, is_const: false, is_null: false, is_undef: false, llvm_value: "i64 %x", llvm_type: "i64" } })
SWITCH HAS UNWRAPPED DISCRIMINANT IntValue { int_value: Value { name: "x", address: 0x55b970c5da80, is_const: false, is_null: false, is_undef: false, llvm_value: "i64 %x", llvm_type: "i64" } }
SWITCH HAS ENTRY CONDITION (= %x const_3)
SWITCH HAS NUM OPERANDS 8
SWITCH HAS TERMINATOR InstructionValue { instruction_value: Value { name: "", address: 0x55b970c63378, is_const: false, is_null: false, is_undef: false, llvm_value: "  switch i64 %x, label %bb3 [\n    i64 1, label %bb9\n    i64 2, label %bb9\n    i64 3, label %bb6\n  ]", llvm_type: "void" } }
SWITCH HAS NODE "bb9"
Operand 0 is IntValue(IntValue { int_value: Value { name: "x", address: 0x55b970c5da80, is_const: false, is_null: false, is_undef: false, llvm_value: "i64 %x", llvm_type: "i64" } })
Operand 1 is BasicBlock { address: 0x55b970c630f0, is_const: false, llvm_value: "\nbb3:                                              ; preds = %bb2\n  %0 = call { i64, i1 } @llvm.sadd.with.overflow.i64(i64 %x, i64 1)\n  %_8.0 = extractvalue { i64, i1 } %0, 0\n  %_8.1 = extractvalue { i64, i1 } %0, 1\n  br i1 %_8.1, label %panic, label %bb9, !prof !3\n", llvm_type: "label" }
Operand 2 is IntValue(IntValue { int_value: Value { name: "", address: 0x55b970c62b20, is_const: true, is_null: false, is_undef: false, llvm_value: "i64 1", llvm_type: "i64" } })
Operand 3 is BasicBlock { address: 0x55b970c630a0, is_const: false, llvm_value: "\nbb9:                                              ; preds = %bb6, %bb3, %bb2, %bb2, %start\n  %.0 = phi i64 [ 2, %start ], [ %x, %bb2 ], [ %x, %bb2 ], [ %_8.0, %bb3 ], [ %_6.0, %bb6 ]\n  ret i64 %.0\n", llvm_type: "label" }
FUCKKKKKKKKKKK
TEST 123 "i64 1"
TEST 123 "i64 %x"
SWITCH HAS TARGET VAL IntValue(IntValue { int_value: Value { name: "", address: 0x55b970c62b20, is_const: true, is_null: false, is_undef: false, llvm_value: "i64 1", llvm_type: "i64" } })
SWITCH HAS TARGET VAL VAR const_1
SWITCH HAS SWITCH VAR %x
SWITCH HAS DISCRIMINANT IntValue(IntValue { int_value: Value { name: "x", address: 0x55b970c5da80, is_const: false, is_null: false, is_undef: false, llvm_value: "i64 %x", llvm_type: "i64" } })
SWITCH HAS UNWRAPPED DISCRIMINANT IntValue { int_value: Value { name: "x", address: 0x55b970c5da80, is_const: false, is_null: false, is_undef: false, llvm_value: "i64 %x", llvm_type: "i64" } }
SWITCH HAS ENTRY CONDITION (= %x const_1)
TEST 123 "  %.0 = phi i64 [ 2, %start ], [ %x, %bb2 ], [ %x, %bb2 ], [ %_8.0, %bb3 ], [ %_6.0, %bb6 ]"
TEST 123 "i64 %x"
TEST 123 "  %.0 = phi i64 [ 2, %start ], [ %x, %bb2 ], [ %x, %bb2 ], [ %_8.0, %bb3 ], [ %_6.0, %bb6 ]"
TEST 123 "i64 %x"
SWITCH HAS NUM OPERANDS 8
SWITCH HAS TERMINATOR InstructionValue { instruction_value: Value { name: "", address: 0x55b970c63378, is_const: false, is_null: false, is_undef: false, llvm_value: "  switch i64 %x, label %bb3 [\n    i64 1, label %bb9\n    i64 2, label %bb9\n    i64 3, label %bb6\n  ]", llvm_type: "void" } }
SWITCH HAS NODE "bb3"
Operand 0 is IntValue(IntValue { int_value: Value { name: "x", address: 0x55b970c5da80, is_const: false, is_null: false, is_undef: false, llvm_value: "i64 %x", llvm_type: "i64" } })
Operand 1 is BasicBlock { address: 0x55b970c630f0, is_const: false, llvm_value: "\nbb3:                                              ; preds = %bb2\n  %0 = call { i64, i1 } @llvm.sadd.with.overflow.i64(i64 %x, i64 1)\n  %_8.0 = extractvalue { i64, i1 } %0, 0\n  %_8.1 = extractvalue { i64, i1 } %0, 1\n  br i1 %_8.1, label %panic, label %bb9, !prof !3\n", llvm_type: "label" }
FUCKKKKKKKKKKK
TEST 123 "i64 %x"
TEST 123 "i64 %x"
SWITCH HAS TARGET VAL IntValue(IntValue { int_value: Value { name: "x", address: 0x55b970c5da80, is_const: false, is_null: false, is_undef: false, llvm_value: "i64 %x", llvm_type: "i64" } })
SWITCH HAS TARGET VAL VAR %x
SWITCH HAS SWITCH VAR %x
SWITCH HAS DISCRIMINANT IntValue(IntValue { int_value: Value { name: "x", address: 0x55b970c5da80, is_const: false, is_null: false, is_undef: false, llvm_value: "i64 %x", llvm_type: "i64" } })
SWITCH HAS UNWRAPPED DISCRIMINANT IntValue { int_value: Value { name: "x", address: 0x55b970c5da80, is_const: false, is_null: false, is_undef: false, llvm_value: "i64 %x", llvm_type: "i64" } }
TEST 123 "i64 1"
TEST 123 "i64 2"
TEST 123 "i64 3"
SWITCH HAS ENTRY CONDITION (= (= (= (= %x %x) (not (= %x const_1))) (not (= %x const_2)))
   (not (= %x const_3)))
IF HAS NUM OPERANDS 3
IF HAS TERMINATOR InstructionValue { instruction_value: Value { name: "", address: 0x55b970c63670, is_const: false, is_null: false, is_undef: false, llvm_value: "  br i1 %_2, label %bb9, label %bb2", llvm_type: "void" } }
IF HAS NODE "bb2"
TEST 123 "  %_2 = icmp sgt i64 %x, 1"
IF HAS TARGET VAL false
IF HAS TARGET VAL VAR false
IF HAS SWITCH VAR %_2
IF HAS DISCRIMINANT IntValue(IntValue { int_value: Value { name: "_2", address: 0x55b970c635c0, is_const: false, is_null: false, is_undef: false, llvm_value: "  %_2 = icmp sgt i64 %x, 1", llvm_type: "i1" } })
IF HAS ENTRY CONDITION (= %_2 false)
IF HAS NUM OPERANDS 3
IF HAS TERMINATOR InstructionValue { instruction_value: Value { name: "", address: 0x55b970c63670, is_const: false, is_null: false, is_undef: false, llvm_value: "  br i1 %_2, label %bb9, label %bb2", llvm_type: "void" } }
IF HAS NODE "bb2"
TEST 123 "  %_2 = icmp sgt i64 %x, 1"
IF HAS TARGET VAL false
IF HAS TARGET VAL VAR false
IF HAS SWITCH VAR %_2
IF HAS DISCRIMINANT IntValue(IntValue { int_value: Value { name: "_2", address: 0x55b970c635c0, is_const: false, is_null: false, is_undef: false, llvm_value: "  %_2 = icmp sgt i64 %x, 1", llvm_type: "i1" } })
IF HAS ENTRY CONDITION (= %_2 false)
IF HAS NUM OPERANDS 3
IF HAS TERMINATOR InstructionValue { instruction_value: Value { name: "", address: 0x55b970c63670, is_const: false, is_null: false, is_undef: false, llvm_value: "  br i1 %_2, label %bb9, label %bb2", llvm_type: "void" } }
IF HAS NODE "bb9"
TEST 123 "  %_2 = icmp sgt i64 %x, 1"
IF HAS TARGET VAL true
IF HAS TARGET VAL VAR true
IF HAS SWITCH VAR %_2
IF HAS DISCRIMINANT IntValue(IntValue { int_value: Value { name: "_2", address: 0x55b970c635c0, is_const: false, is_null: false, is_undef: false, llvm_value: "  %_2 = icmp sgt i64 %x, 1", llvm_type: "i1" } })
IF HAS ENTRY CONDITION (= %_2 true)
TEST 123 "  %.0 = phi i64 [ 2, %start ], [ %x, %bb2 ], [ %x, %bb2 ], [ %_8.0, %bb3 ], [ %_6.0, %bb6 ]"
TEST 123 "i64 2"
TEST 123 "  %_2 = icmp sgt i64 %x, 1"
TEST 123 "i64 %x"
TEST 123 "i64 1"
TEST 123 "i64 %x"
[2mJan 15 20:18:35.632[0m [34mDEBUG[0m wombat_symx: (declare-fun panic_var () Bool)
(declare-fun common_end () Bool)
(declare-fun const_1 () Int)
(declare-fun %x () Int)
(declare-fun %_2 () Bool)
(declare-fun %_6.1 () Bool)
(declare-fun %_8.1 () Bool)
(declare-fun bb9 () Bool)
(declare-fun panic1 () Bool)
(declare-fun panic () Bool)
(declare-fun const_3 () Int)
(declare-fun %_6.0 () Int)
(declare-fun %.0 () Int)
(declare-fun %1.1 () Bool)
(declare-fun %1.0 () Int)
(declare-fun bb6 () Bool)
(declare-fun const_2 () Int)
(declare-fun %_8.0 () Int)
(declare-fun %0.1 () Bool)
(declare-fun %0.0 () Int)
(declare-fun bb3 () Bool)
(declare-fun bb2 () Bool)
(declare-fun start () Bool)
(assert (= common_end (=> (and true true true true) (and (not panic_var) true))))
(assert (= const_1 1))
(assert (= bb9
   (=> (and true (= %_8.1 false) (= %_6.1 false) (= %_2 true) (= %x const_1))
       (=> (= panic_var false) (and true common_end)))))
(assert (= panic1
   (=> (and true (= %_6.1 true)) (=> (= panic_var true) (and true common_end)))))
(assert (= panic
   (=> (and true (= %_8.1 true)) (=> (= panic_var true) (and true common_end)))))
(assert (= const_1 1))
(assert (= const_3 3))
(assert (let ((a!1 (> (- %x const_1)
              (ite (bvslt #x7fffffffffffffff #x0000000000000000)
                   (- (bv2int #x7fffffffffffffff) 18446744073709551616)
                   (bv2int #x7fffffffffffffff))))
      (a!2 (< (- %x const_1)
              (ite (bvslt #x8000000000000000 #x0000000000000000)
                   (- (bv2int #x8000000000000000) 18446744073709551616)
                   (bv2int #x8000000000000000))))
      (a!3 (=> (= %_6.1 %1.1)
               (=> (=> (= %_6.1 false) (= %.0 %_6.0)) (and true panic1 bb9)))))
(let ((a!4 (=> (and (= %1.0 (- %x const_1)) (= %1.1 (or a!1 a!2)))
               (=> (= %_6.0 %1.0) a!3))))
  (= bb6 (=> (and true (= %x const_3)) a!4)))))
(assert (= const_1 1))
(assert (= const_1 1))
(assert (= const_2 2))
(assert (= const_3 3))
(assert (let ((a!1 (= (= (= %x %x) (not (= %x const_1))) (not (= %x const_2))))
      (a!3 (> (+ %x const_1)
              (ite (bvslt #x7fffffffffffffff #x0000000000000000)
                   (- (bv2int #x7fffffffffffffff) 18446744073709551616)
                   (bv2int #x7fffffffffffffff))))
      (a!4 (< (+ %x const_1)
              (ite (bvslt #x8000000000000000 #x0000000000000000)
                   (- (bv2int #x8000000000000000) 18446744073709551616)
                   (bv2int #x8000000000000000))))
      (a!5 (=> (= %_8.1 %0.1)
               (=> (=> (= %_8.1 false) (= %.0 %_8.0)) (and true bb9 panic)))))
(let ((a!2 (and true (= a!1 (not (= %x const_3)))))
      (a!6 (=> (and (= %0.0 (+ %x const_1)) (= %0.1 (or a!3 a!4)))
               (=> (= %_8.0 %0.0) a!5))))
  (= bb3 (=> a!2 a!6)))))
(assert (= const_3 3))
(assert (= const_1 1))
(assert (= const_1 1))
(assert (= const_2 2))
(assert (= const_3 3))
(assert (let ((a!1 (=> (=> (= %x const_1) (= %.0 %x))
               (=> (=> (= %x const_1) (= %.0 %x)) (and true bb6 bb9 bb3)))))
  (= bb2 (=> (and true (= %_2 false)) a!1))))
(assert (= const_2 2))
(assert (= const_1 1))
(assert (let ((a!1 (=> (= %_2 (> %x const_1))
               (=> (=> (= %_2 true) (= %.0 const_2)) (and true bb2 bb9)))))
  (= start (=> true a!1))))
(assert (let ((a!1 (>= %x
               (ite (bvslt #x8000000000000000 #x0000000000000000)
                    (- (bv2int #x8000000000000000) 18446744073709551616)
                    (bv2int #x8000000000000000))))
      (a!2 (<= %x
               (ite (bvslt #x7fffffffffffffff #x0000000000000000)
                    (- (bv2int #x7fffffffffffffff) 18446744073709551616)
                    (bv2int #x7fffffffffffffff)))))
  (and a!1 a!2)))
(assert (not start))


Function safety: safe

************************************


