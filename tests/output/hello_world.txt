[2mJan 15 20:18:34.444[0m [34mDEBUG[0m wombat_symx: Func param instr: IntValue { int_value: Value { name: "", address: 0x55add2974570, is_const: false, is_null: false, is_undef: false, llvm_value: "i32 %0", llvm_type: "i32" } }
TEST 123 "i32 %0"
TEST 123 "  store i32 %0, i32* %x_mut, align 4"
TEST 123 "  %x_mut = alloca i32, align 4"
[2mJan 15 20:18:34.491[0m [34mDEBUG[0m wombat_symx: Function arg names: {"x_mut": "%0"}
Backward Symbolic Execution in hello_world::neg_abs::h8bd18ec7b7f1f032
[2mJan 15 20:18:34.492[0m [34mDEBUG[0m wombat_symx: Number of Nodes: 8
[2mJan 15 20:18:34.492[0m [34mDEBUG[0m wombat_symx: Arg count: 1
[2mJan 15 20:18:34.492[0m [34mDEBUG[0m wombat_symx: Basic Blocks:
[2mJan 15 20:18:34.492[0m [34mDEBUG[0m wombat_symx: 	Basic Block: "start"
[2mJan 15 20:18:34.492[0m [34mDEBUG[0m wombat_symx: 		is_cleanup: NO
[2mJan 15 20:18:34.492[0m [34mDEBUG[0m wombat_symx: 		Statement: "\"  %_2 = icmp sgt i32 %0, 0\""
[2mJan 15 20:18:34.492[0m [34mDEBUG[0m wombat_symx: 		Statement: "\"  br i1 %_2, label %bb1, label %bb3\""
[2mJan 15 20:18:34.492[0m [34mDEBUG[0m wombat_symx: 		Last statement is a terminator
[2mJan 15 20:18:34.492[0m [34mDEBUG[0m wombat_symx: 	Basic Block: "bb3"
[2mJan 15 20:18:34.492[0m [34mDEBUG[0m wombat_symx: 		is_cleanup: NO
[2mJan 15 20:18:34.492[0m [34mDEBUG[0m wombat_symx: 		Statement: "\"  %x_mut.0 = phi i32 [ %0, %start ], [ %_5.0, %bb1 ]\""
[2mJan 15 20:18:34.492[0m [34mDEBUG[0m wombat_symx: 		Statement: "\"  %_7 = icmp sle i32 %x_mut.0, 0\""
[2mJan 15 20:18:34.492[0m [34mDEBUG[0m wombat_symx: 		Statement: "\"  %_6 = xor i1 %_7, true\""
[2mJan 15 20:18:34.492[0m [34mDEBUG[0m wombat_symx: 		Statement: "\"  br i1 %_6, label %bb4, label %bb5\""
[2mJan 15 20:18:34.492[0m [34mDEBUG[0m wombat_symx: 		Last statement is a terminator
[2mJan 15 20:18:34.492[0m [34mDEBUG[0m wombat_symx: 	Basic Block: "bb1"
[2mJan 15 20:18:34.492[0m [34mDEBUG[0m wombat_symx: 		is_cleanup: NO
[2mJan 15 20:18:34.492[0m [34mDEBUG[0m wombat_symx: 		Statement: "\"  %1 = call { i32, i1 } @llvm.smul.with.overflow.i32(i32 -1, i32 %0)\""
[2mJan 15 20:18:34.492[0m [34mDEBUG[0m wombat_symx: 		Statement: "\"  %_5.0 = extractvalue { i32, i1 } %1, 0\""
[2mJan 15 20:18:34.493[0m [34mDEBUG[0m wombat_symx: 		Statement: "\"  %_5.1 = extractvalue { i32, i1 } %1, 1\""
[2mJan 15 20:18:34.493[0m [34mDEBUG[0m wombat_symx: 		Statement: "\"  br i1 %_5.1, label %panic, label %bb3, !prof !3\""
[2mJan 15 20:18:34.493[0m [34mDEBUG[0m wombat_symx: 		Last statement is a terminator
[2mJan 15 20:18:34.493[0m [34mDEBUG[0m wombat_symx: 	Basic Block: "panic"
[2mJan 15 20:18:34.493[0m [34mDEBUG[0m wombat_symx: 		is_cleanup: YES
[2mJan 15 20:18:34.493[0m [34mDEBUG[0m wombat_symx: 		Statement: "\"  call void @_ZN4core9panicking5panic17h4241c5ccea17facaE([0 x i8]* noundef nonnull align 1 bitcast ([33 x i8]* @str.0 to [0 x i8]*), i64 33, %\\\"core::panic::location::Location\\\"* noundef align 8 dereferenceable(24) bitcast (<{ i8*, [16 x i8] }>* @alloc41 to %\\\"core::panic::location::Location\\\"*)) #7\""
[2mJan 15 20:18:34.493[0m [34mDEBUG[0m wombat_symx: 		Statement: "\"  unreachable\""
[2mJan 15 20:18:34.493[0m [34mDEBUG[0m wombat_symx: 		Last statement is a terminator
[2mJan 15 20:18:34.493[0m [34mDEBUG[0m wombat_symx: 	Basic Block: "bb5"
[2mJan 15 20:18:34.493[0m [34mDEBUG[0m wombat_symx: 		is_cleanup: NO
[2mJan 15 20:18:34.493[0m [34mDEBUG[0m wombat_symx: 		Statement: "\"  %2 = call { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %x_mut.0, i32 1)\""
[2mJan 15 20:18:34.493[0m [34mDEBUG[0m wombat_symx: 		Statement: "\"  %_10.0 = extractvalue { i32, i1 } %2, 0\""
[2mJan 15 20:18:34.493[0m [34mDEBUG[0m wombat_symx: 		Statement: "\"  %_10.1 = extractvalue { i32, i1 } %2, 1\""
[2mJan 15 20:18:34.493[0m [34mDEBUG[0m wombat_symx: 		Statement: "\"  br i1 %_10.1, label %panic1, label %bb6, !prof !3\""
[2mJan 15 20:18:34.493[0m [34mDEBUG[0m wombat_symx: 		Last statement is a terminator
[2mJan 15 20:18:34.493[0m [34mDEBUG[0m wombat_symx: 	Basic Block: "bb4"
[2mJan 15 20:18:34.493[0m [34mDEBUG[0m wombat_symx: 		is_cleanup: YES
[2mJan 15 20:18:34.493[0m [34mDEBUG[0m wombat_symx: 		Statement: "\"  call void @_ZN4core9panicking5panic17h4241c5ccea17facaE([0 x i8]* noundef nonnull align 1 bitcast (<{ [28 x i8] }>* @alloc51 to [0 x i8]*), i64 28, %\\\"core::panic::location::Location\\\"* noundef align 8 dereferenceable(24) bitcast (<{ i8*, [16 x i8] }>* @alloc44 to %\\\"core::panic::location::Location\\\"*)) #7\""
[2mJan 15 20:18:34.493[0m [34mDEBUG[0m wombat_symx: 		Statement: "\"  unreachable\""
[2mJan 15 20:18:34.493[0m [34mDEBUG[0m wombat_symx: 		Last statement is a terminator
[2mJan 15 20:18:34.493[0m [34mDEBUG[0m wombat_symx: 	Basic Block: "bb6"
[2mJan 15 20:18:34.493[0m [34mDEBUG[0m wombat_symx: 		is_cleanup: NO
[2mJan 15 20:18:34.493[0m [34mDEBUG[0m wombat_symx: 		Statement: "\"  ret i32 %_10.0\""
[2mJan 15 20:18:34.494[0m [34mDEBUG[0m wombat_symx: 		Last statement is a terminator
[2mJan 15 20:18:34.494[0m [34mDEBUG[0m wombat_symx: 	Basic Block: "panic1"
[2mJan 15 20:18:34.494[0m [34mDEBUG[0m wombat_symx: 		is_cleanup: YES
[2mJan 15 20:18:34.494[0m [34mDEBUG[0m wombat_symx: 		Statement: "\"  call void @_ZN4core9panicking5panic17h4241c5ccea17facaE([0 x i8]* noundef nonnull align 1 bitcast ([33 x i8]* @str.1 to [0 x i8]*), i64 33, %\\\"core::panic::location::Location\\\"* noundef align 8 dereferenceable(24) bitcast (<{ i8*, [16 x i8] }>* @alloc46 to %\\\"core::panic::location::Location\\\"*)) #7\""
[2mJan 15 20:18:34.494[0m [34mDEBUG[0m wombat_symx: 		Statement: "\"  unreachable\""
[2mJan 15 20:18:34.494[0m [34mDEBUG[0m wombat_symx: 		Last statement is a terminator
[2mJan 15 20:18:34.494[0m [34mDEBUG[0m wombat_symx: 
[2mJan 15 20:18:34.494[0m [34mDEBUG[0m wombat_symx: Start node: "start"
IF STATEMENT
terminator is InstructionValue { instruction_value: Value { name: "", address: 0x55add2978af0, is_const: false, is_null: false, is_undef: false, llvm_value: "  br i1 %_2, label %bb1, label %bb3", llvm_type: "void" } }
Operand 0 is Some(Left(IntValue(IntValue { int_value: Value { name: "_2", address: 0x55add2978a40, is_const: false, is_null: false, is_undef: false, llvm_value: "  %_2 = icmp sgt i32 %0, 0", llvm_type: "i1" } })))
Operand 1 is Some(Right(BasicBlock { address: 0x55add296f6a0, is_const: false, llvm_value: "\nbb3:                                              ; preds = %bb1, %start\n  %x_mut.0 = phi i32 [ %0, %start ], [ %_5.0, %bb1 ]\n  %_7 = icmp sle i32 %x_mut.0, 0\n  %_6 = xor i1 %_7, true\n  br i1 %_6, label %bb4, label %bb5\n", llvm_type: "label" }))
Operand 2 is Some(Right(BasicBlock { address: 0x55add296f6f0, is_const: false, llvm_value: "\nbb1:                                              ; preds = %start\n  %1 = call { i32, i1 } @llvm.smul.with.overflow.i32(i32 -1, i32 %0)\n  %_5.0 = extractvalue { i32, i1 } %1, 0\n  %_5.1 = extractvalue { i32, i1 } %1, 1\n  br i1 %_5.1, label %panic, label %bb3, !prof !3\n", llvm_type: "label" }))
IF STATEMENT
terminator is InstructionValue { instruction_value: Value { name: "", address: 0x55add2978d30, is_const: false, is_null: false, is_undef: false, llvm_value: "  br i1 %_6, label %bb4, label %bb5", llvm_type: "void" } }
Operand 0 is Some(Left(IntValue(IntValue { int_value: Value { name: "_6", address: 0x55add2978c80, is_const: false, is_null: false, is_undef: false, llvm_value: "  %_6 = xor i1 %_7, true", llvm_type: "i1" } })))
Operand 1 is Some(Right(BasicBlock { address: 0x55add296f7e0, is_const: false, llvm_value: "\nbb5:                                              ; preds = %bb3\n  %2 = call { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %x_mut.0, i32 1)\n  %_10.0 = extractvalue { i32, i1 } %2, 0\n  %_10.1 = extractvalue { i32, i1 } %2, 1\n  br i1 %_10.1, label %panic1, label %bb6, !prof !3\n", llvm_type: "label" }))
Operand 2 is Some(Right(BasicBlock { address: 0x55add296f830, is_const: false, llvm_value: "\nbb4:                                              ; preds = %bb3\n  call void @_ZN4core9panicking5panic17h4241c5ccea17facaE([0 x i8]* noundef nonnull align 1 bitcast (<{ [28 x i8] }>* @alloc51 to [0 x i8]*), i64 28, %\"core::panic::location::Location\"* noundef align 8 dereferenceable(24) bitcast (<{ i8*, [16 x i8] }>* @alloc44 to %\"core::panic::location::Location\"*)) #7\n  unreachable\n", llvm_type: "label" }))
IF STATEMENT
terminator is InstructionValue { instruction_value: Value { name: "", address: 0x55add29790f0, is_const: false, is_null: false, is_undef: false, llvm_value: "  br i1 %_5.1, label %panic, label %bb3, !prof !3", llvm_type: "void" } }
Operand 0 is Some(Left(IntValue(IntValue { int_value: Value { name: "_5.1", address: 0x55add2978f60, is_const: false, is_null: false, is_undef: false, llvm_value: "  %_5.1 = extractvalue { i32, i1 } %1, 1", llvm_type: "i1" } })))
Operand 1 is Some(Right(BasicBlock { address: 0x55add296f6a0, is_const: false, llvm_value: "\nbb3:                                              ; preds = %bb1, %start\n  %x_mut.0 = phi i32 [ %0, %start ], [ %_5.0, %bb1 ]\n  %_7 = icmp sle i32 %x_mut.0, 0\n  %_6 = xor i1 %_7, true\n  br i1 %_6, label %bb4, label %bb5\n", llvm_type: "label" }))
Operand 2 is Some(Right(BasicBlock { address: 0x55add296f790, is_const: false, llvm_value: "\npanic:                                            ; preds = %bb1\n  call void @_ZN4core9panicking5panic17h4241c5ccea17facaE([0 x i8]* noundef nonnull align 1 bitcast ([33 x i8]* @str.0 to [0 x i8]*), i64 33, %\"core::panic::location::Location\"* noundef align 8 dereferenceable(24) bitcast (<{ i8*, [16 x i8] }>* @alloc41 to %\"core::panic::location::Location\"*)) #7\n  unreachable\n", llvm_type: "label" }))
IF STATEMENT
terminator is InstructionValue { instruction_value: Value { name: "", address: 0x55add29795b0, is_const: false, is_null: false, is_undef: false, llvm_value: "  br i1 %_10.1, label %panic1, label %bb6, !prof !3", llvm_type: "void" } }
Operand 0 is Some(Left(IntValue(IntValue { int_value: Value { name: "_10.1", address: 0x55add2979420, is_const: false, is_null: false, is_undef: false, llvm_value: "  %_10.1 = extractvalue { i32, i1 } %2, 1", llvm_type: "i1" } })))
Operand 1 is Some(Right(BasicBlock { address: 0x55add296f880, is_const: false, llvm_value: "\nbb6:                                              ; preds = %bb5\n  ret i32 %_10.0\n", llvm_type: "label" }))
Operand 2 is Some(Right(BasicBlock { address: 0x55add296f8d0, is_const: false, llvm_value: "\npanic1:                                           ; preds = %bb5\n  call void @_ZN4core9panicking5panic17h4241c5ccea17facaE([0 x i8]* noundef nonnull align 1 bitcast ([33 x i8]* @str.1 to [0 x i8]*), i64 33, %\"core::panic::location::Location\"* noundef align 8 dereferenceable(24) bitcast (<{ i8*, [16 x i8] }>* @alloc46 to %\"core::panic::location::Location\"*)) #7\n  unreachable\n", llvm_type: "label" }))
[2mJan 15 20:18:34.494[0m [34mDEBUG[0m wombat_symx: 	Successor to start node: "bb1"
[2mJan 15 20:18:34.494[0m [34mDEBUG[0m wombat_symx: 	Successor to start node: "bb3"
IF STATEMENT
terminator is InstructionValue { instruction_value: Value { name: "", address: 0x55add2978af0, is_const: false, is_null: false, is_undef: false, llvm_value: "  br i1 %_2, label %bb1, label %bb3", llvm_type: "void" } }
Operand 0 is Some(Left(IntValue(IntValue { int_value: Value { name: "_2", address: 0x55add2978a40, is_const: false, is_null: false, is_undef: false, llvm_value: "  %_2 = icmp sgt i32 %0, 0", llvm_type: "i1" } })))
Operand 1 is Some(Right(BasicBlock { address: 0x55add296f6a0, is_const: false, llvm_value: "\nbb3:                                              ; preds = %bb1, %start\n  %x_mut.0 = phi i32 [ %0, %start ], [ %_5.0, %bb1 ]\n  %_7 = icmp sle i32 %x_mut.0, 0\n  %_6 = xor i1 %_7, true\n  br i1 %_6, label %bb4, label %bb5\n", llvm_type: "label" }))
Operand 2 is Some(Right(BasicBlock { address: 0x55add296f6f0, is_const: false, llvm_value: "\nbb1:                                              ; preds = %start\n  %1 = call { i32, i1 } @llvm.smul.with.overflow.i32(i32 -1, i32 %0)\n  %_5.0 = extractvalue { i32, i1 } %1, 0\n  %_5.1 = extractvalue { i32, i1 } %1, 1\n  br i1 %_5.1, label %panic, label %bb3, !prof !3\n", llvm_type: "label" }))
IF STATEMENT
terminator is InstructionValue { instruction_value: Value { name: "", address: 0x55add2978d30, is_const: false, is_null: false, is_undef: false, llvm_value: "  br i1 %_6, label %bb4, label %bb5", llvm_type: "void" } }
Operand 0 is Some(Left(IntValue(IntValue { int_value: Value { name: "_6", address: 0x55add2978c80, is_const: false, is_null: false, is_undef: false, llvm_value: "  %_6 = xor i1 %_7, true", llvm_type: "i1" } })))
Operand 1 is Some(Right(BasicBlock { address: 0x55add296f7e0, is_const: false, llvm_value: "\nbb5:                                              ; preds = %bb3\n  %2 = call { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %x_mut.0, i32 1)\n  %_10.0 = extractvalue { i32, i1 } %2, 0\n  %_10.1 = extractvalue { i32, i1 } %2, 1\n  br i1 %_10.1, label %panic1, label %bb6, !prof !3\n", llvm_type: "label" }))
Operand 2 is Some(Right(BasicBlock { address: 0x55add296f830, is_const: false, llvm_value: "\nbb4:                                              ; preds = %bb3\n  call void @_ZN4core9panicking5panic17h4241c5ccea17facaE([0 x i8]* noundef nonnull align 1 bitcast (<{ [28 x i8] }>* @alloc51 to [0 x i8]*), i64 28, %\"core::panic::location::Location\"* noundef align 8 dereferenceable(24) bitcast (<{ i8*, [16 x i8] }>* @alloc44 to %\"core::panic::location::Location\"*)) #7\n  unreachable\n", llvm_type: "label" }))
IF STATEMENT
terminator is InstructionValue { instruction_value: Value { name: "", address: 0x55add29790f0, is_const: false, is_null: false, is_undef: false, llvm_value: "  br i1 %_5.1, label %panic, label %bb3, !prof !3", llvm_type: "void" } }
Operand 0 is Some(Left(IntValue(IntValue { int_value: Value { name: "_5.1", address: 0x55add2978f60, is_const: false, is_null: false, is_undef: false, llvm_value: "  %_5.1 = extractvalue { i32, i1 } %1, 1", llvm_type: "i1" } })))
Operand 1 is Some(Right(BasicBlock { address: 0x55add296f6a0, is_const: false, llvm_value: "\nbb3:                                              ; preds = %bb1, %start\n  %x_mut.0 = phi i32 [ %0, %start ], [ %_5.0, %bb1 ]\n  %_7 = icmp sle i32 %x_mut.0, 0\n  %_6 = xor i1 %_7, true\n  br i1 %_6, label %bb4, label %bb5\n", llvm_type: "label" }))
Operand 2 is Some(Right(BasicBlock { address: 0x55add296f790, is_const: false, llvm_value: "\npanic:                                            ; preds = %bb1\n  call void @_ZN4core9panicking5panic17h4241c5ccea17facaE([0 x i8]* noundef nonnull align 1 bitcast ([33 x i8]* @str.0 to [0 x i8]*), i64 33, %\"core::panic::location::Location\"* noundef align 8 dereferenceable(24) bitcast (<{ i8*, [16 x i8] }>* @alloc41 to %\"core::panic::location::Location\"*)) #7\n  unreachable\n", llvm_type: "label" }))
IF STATEMENT
terminator is InstructionValue { instruction_value: Value { name: "", address: 0x55add29795b0, is_const: false, is_null: false, is_undef: false, llvm_value: "  br i1 %_10.1, label %panic1, label %bb6, !prof !3", llvm_type: "void" } }
Operand 0 is Some(Left(IntValue(IntValue { int_value: Value { name: "_10.1", address: 0x55add2979420, is_const: false, is_null: false, is_undef: false, llvm_value: "  %_10.1 = extractvalue { i32, i1 } %2, 1", llvm_type: "i1" } })))
Operand 1 is Some(Right(BasicBlock { address: 0x55add296f880, is_const: false, llvm_value: "\nbb6:                                              ; preds = %bb5\n  ret i32 %_10.0\n", llvm_type: "label" }))
Operand 2 is Some(Right(BasicBlock { address: 0x55add296f8d0, is_const: false, llvm_value: "\npanic1:                                           ; preds = %bb5\n  call void @_ZN4core9panicking5panic17h4241c5ccea17facaE([0 x i8]* noundef nonnull align 1 bitcast ([33 x i8]* @str.1 to [0 x i8]*), i64 33, %\"core::panic::location::Location\"* noundef align 8 dereferenceable(24) bitcast (<{ i8*, [16 x i8] }>* @alloc46 to %\"core::panic::location::Location\"*)) #7\n  unreachable\n", llvm_type: "label" }))
[2mJan 15 20:18:34.495[0m [34mDEBUG[0m wombat_symx: Forward edges:	{"start": {"bb3", "bb1"}, "panic": {"common_end"}, "bb5": {"bb6", "panic1"}, "panic1": {"common_end"}, "bb3": {"bb4", "bb5"}, "bb1": {"bb3", "panic"}, "bb6": {"common_end"}, "bb4": {"common_end"}}
IF STATEMENT
terminator is InstructionValue { instruction_value: Value { name: "", address: 0x55add2978af0, is_const: false, is_null: false, is_undef: false, llvm_value: "  br i1 %_2, label %bb1, label %bb3", llvm_type: "void" } }
Operand 0 is Some(Left(IntValue(IntValue { int_value: Value { name: "_2", address: 0x55add2978a40, is_const: false, is_null: false, is_undef: false, llvm_value: "  %_2 = icmp sgt i32 %0, 0", llvm_type: "i1" } })))
Operand 1 is Some(Right(BasicBlock { address: 0x55add296f6a0, is_const: false, llvm_value: "\nbb3:                                              ; preds = %bb1, %start\n  %x_mut.0 = phi i32 [ %0, %start ], [ %_5.0, %bb1 ]\n  %_7 = icmp sle i32 %x_mut.0, 0\n  %_6 = xor i1 %_7, true\n  br i1 %_6, label %bb4, label %bb5\n", llvm_type: "label" }))
Operand 2 is Some(Right(BasicBlock { address: 0x55add296f6f0, is_const: false, llvm_value: "\nbb1:                                              ; preds = %start\n  %1 = call { i32, i1 } @llvm.smul.with.overflow.i32(i32 -1, i32 %0)\n  %_5.0 = extractvalue { i32, i1 } %1, 0\n  %_5.1 = extractvalue { i32, i1 } %1, 1\n  br i1 %_5.1, label %panic, label %bb3, !prof !3\n", llvm_type: "label" }))
IF STATEMENT
terminator is InstructionValue { instruction_value: Value { name: "", address: 0x55add2978d30, is_const: false, is_null: false, is_undef: false, llvm_value: "  br i1 %_6, label %bb4, label %bb5", llvm_type: "void" } }
Operand 0 is Some(Left(IntValue(IntValue { int_value: Value { name: "_6", address: 0x55add2978c80, is_const: false, is_null: false, is_undef: false, llvm_value: "  %_6 = xor i1 %_7, true", llvm_type: "i1" } })))
Operand 1 is Some(Right(BasicBlock { address: 0x55add296f7e0, is_const: false, llvm_value: "\nbb5:                                              ; preds = %bb3\n  %2 = call { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %x_mut.0, i32 1)\n  %_10.0 = extractvalue { i32, i1 } %2, 0\n  %_10.1 = extractvalue { i32, i1 } %2, 1\n  br i1 %_10.1, label %panic1, label %bb6, !prof !3\n", llvm_type: "label" }))
Operand 2 is Some(Right(BasicBlock { address: 0x55add296f830, is_const: false, llvm_value: "\nbb4:                                              ; preds = %bb3\n  call void @_ZN4core9panicking5panic17h4241c5ccea17facaE([0 x i8]* noundef nonnull align 1 bitcast (<{ [28 x i8] }>* @alloc51 to [0 x i8]*), i64 28, %\"core::panic::location::Location\"* noundef align 8 dereferenceable(24) bitcast (<{ i8*, [16 x i8] }>* @alloc44 to %\"core::panic::location::Location\"*)) #7\n  unreachable\n", llvm_type: "label" }))
IF STATEMENT
terminator is InstructionValue { instruction_value: Value { name: "", address: 0x55add29790f0, is_const: false, is_null: false, is_undef: false, llvm_value: "  br i1 %_5.1, label %panic, label %bb3, !prof !3", llvm_type: "void" } }
Operand 0 is Some(Left(IntValue(IntValue { int_value: Value { name: "_5.1", address: 0x55add2978f60, is_const: false, is_null: false, is_undef: false, llvm_value: "  %_5.1 = extractvalue { i32, i1 } %1, 1", llvm_type: "i1" } })))
Operand 1 is Some(Right(BasicBlock { address: 0x55add296f6a0, is_const: false, llvm_value: "\nbb3:                                              ; preds = %bb1, %start\n  %x_mut.0 = phi i32 [ %0, %start ], [ %_5.0, %bb1 ]\n  %_7 = icmp sle i32 %x_mut.0, 0\n  %_6 = xor i1 %_7, true\n  br i1 %_6, label %bb4, label %bb5\n", llvm_type: "label" }))
Operand 2 is Some(Right(BasicBlock { address: 0x55add296f790, is_const: false, llvm_value: "\npanic:                                            ; preds = %bb1\n  call void @_ZN4core9panicking5panic17h4241c5ccea17facaE([0 x i8]* noundef nonnull align 1 bitcast ([33 x i8]* @str.0 to [0 x i8]*), i64 33, %\"core::panic::location::Location\"* noundef align 8 dereferenceable(24) bitcast (<{ i8*, [16 x i8] }>* @alloc41 to %\"core::panic::location::Location\"*)) #7\n  unreachable\n", llvm_type: "label" }))
IF STATEMENT
terminator is InstructionValue { instruction_value: Value { name: "", address: 0x55add29795b0, is_const: false, is_null: false, is_undef: false, llvm_value: "  br i1 %_10.1, label %panic1, label %bb6, !prof !3", llvm_type: "void" } }
Operand 0 is Some(Left(IntValue(IntValue { int_value: Value { name: "_10.1", address: 0x55add2979420, is_const: false, is_null: false, is_undef: false, llvm_value: "  %_10.1 = extractvalue { i32, i1 } %2, 1", llvm_type: "i1" } })))
Operand 1 is Some(Right(BasicBlock { address: 0x55add296f880, is_const: false, llvm_value: "\nbb6:                                              ; preds = %bb5\n  ret i32 %_10.0\n", llvm_type: "label" }))
Operand 2 is Some(Right(BasicBlock { address: 0x55add296f8d0, is_const: false, llvm_value: "\npanic1:                                           ; preds = %bb5\n  call void @_ZN4core9panicking5panic17h4241c5ccea17facaE([0 x i8]* noundef nonnull align 1 bitcast ([33 x i8]* @str.1 to [0 x i8]*), i64 33, %\"core::panic::location::Location\"* noundef align 8 dereferenceable(24) bitcast (<{ i8*, [16 x i8] }>* @alloc46 to %\"core::panic::location::Location\"*)) #7\n  unreachable\n", llvm_type: "label" }))
[2mJan 15 20:18:34.495[0m [34mDEBUG[0m wombat_symx: Backward edges:	{"start": {}, "bb1": {"start"}, "bb6": {"bb5"}, "bb5": {"bb3"}, "common_end": {"bb6", "panic", "panic1", "bb4"}, "panic1": {"bb5"}, "bb3": {"start", "bb1"}, "panic": {"bb1"}, "bb4": {"bb3"}}
IF STATEMENT
terminator is InstructionValue { instruction_value: Value { name: "", address: 0x55add2978af0, is_const: false, is_null: false, is_undef: false, llvm_value: "  br i1 %_2, label %bb1, label %bb3", llvm_type: "void" } }
Operand 0 is Some(Left(IntValue(IntValue { int_value: Value { name: "_2", address: 0x55add2978a40, is_const: false, is_null: false, is_undef: false, llvm_value: "  %_2 = icmp sgt i32 %0, 0", llvm_type: "i1" } })))
Operand 1 is Some(Right(BasicBlock { address: 0x55add296f6a0, is_const: false, llvm_value: "\nbb3:                                              ; preds = %bb1, %start\n  %x_mut.0 = phi i32 [ %0, %start ], [ %_5.0, %bb1 ]\n  %_7 = icmp sle i32 %x_mut.0, 0\n  %_6 = xor i1 %_7, true\n  br i1 %_6, label %bb4, label %bb5\n", llvm_type: "label" }))
Operand 2 is Some(Right(BasicBlock { address: 0x55add296f6f0, is_const: false, llvm_value: "\nbb1:                                              ; preds = %start\n  %1 = call { i32, i1 } @llvm.smul.with.overflow.i32(i32 -1, i32 %0)\n  %_5.0 = extractvalue { i32, i1 } %1, 0\n  %_5.1 = extractvalue { i32, i1 } %1, 1\n  br i1 %_5.1, label %panic, label %bb3, !prof !3\n", llvm_type: "label" }))
IF STATEMENT
terminator is InstructionValue { instruction_value: Value { name: "", address: 0x55add2978d30, is_const: false, is_null: false, is_undef: false, llvm_value: "  br i1 %_6, label %bb4, label %bb5", llvm_type: "void" } }
Operand 0 is Some(Left(IntValue(IntValue { int_value: Value { name: "_6", address: 0x55add2978c80, is_const: false, is_null: false, is_undef: false, llvm_value: "  %_6 = xor i1 %_7, true", llvm_type: "i1" } })))
Operand 1 is Some(Right(BasicBlock { address: 0x55add296f7e0, is_const: false, llvm_value: "\nbb5:                                              ; preds = %bb3\n  %2 = call { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %x_mut.0, i32 1)\n  %_10.0 = extractvalue { i32, i1 } %2, 0\n  %_10.1 = extractvalue { i32, i1 } %2, 1\n  br i1 %_10.1, label %panic1, label %bb6, !prof !3\n", llvm_type: "label" }))
Operand 2 is Some(Right(BasicBlock { address: 0x55add296f830, is_const: false, llvm_value: "\nbb4:                                              ; preds = %bb3\n  call void @_ZN4core9panicking5panic17h4241c5ccea17facaE([0 x i8]* noundef nonnull align 1 bitcast (<{ [28 x i8] }>* @alloc51 to [0 x i8]*), i64 28, %\"core::panic::location::Location\"* noundef align 8 dereferenceable(24) bitcast (<{ i8*, [16 x i8] }>* @alloc44 to %\"core::panic::location::Location\"*)) #7\n  unreachable\n", llvm_type: "label" }))
IF STATEMENT
terminator is InstructionValue { instruction_value: Value { name: "", address: 0x55add29790f0, is_const: false, is_null: false, is_undef: false, llvm_value: "  br i1 %_5.1, label %panic, label %bb3, !prof !3", llvm_type: "void" } }
Operand 0 is Some(Left(IntValue(IntValue { int_value: Value { name: "_5.1", address: 0x55add2978f60, is_const: false, is_null: false, is_undef: false, llvm_value: "  %_5.1 = extractvalue { i32, i1 } %1, 1", llvm_type: "i1" } })))
Operand 1 is Some(Right(BasicBlock { address: 0x55add296f6a0, is_const: false, llvm_value: "\nbb3:                                              ; preds = %bb1, %start\n  %x_mut.0 = phi i32 [ %0, %start ], [ %_5.0, %bb1 ]\n  %_7 = icmp sle i32 %x_mut.0, 0\n  %_6 = xor i1 %_7, true\n  br i1 %_6, label %bb4, label %bb5\n", llvm_type: "label" }))
Operand 2 is Some(Right(BasicBlock { address: 0x55add296f790, is_const: false, llvm_value: "\npanic:                                            ; preds = %bb1\n  call void @_ZN4core9panicking5panic17h4241c5ccea17facaE([0 x i8]* noundef nonnull align 1 bitcast ([33 x i8]* @str.0 to [0 x i8]*), i64 33, %\"core::panic::location::Location\"* noundef align 8 dereferenceable(24) bitcast (<{ i8*, [16 x i8] }>* @alloc41 to %\"core::panic::location::Location\"*)) #7\n  unreachable\n", llvm_type: "label" }))
IF STATEMENT
terminator is InstructionValue { instruction_value: Value { name: "", address: 0x55add29795b0, is_const: false, is_null: false, is_undef: false, llvm_value: "  br i1 %_10.1, label %panic1, label %bb6, !prof !3", llvm_type: "void" } }
Operand 0 is Some(Left(IntValue(IntValue { int_value: Value { name: "_10.1", address: 0x55add2979420, is_const: false, is_null: false, is_undef: false, llvm_value: "  %_10.1 = extractvalue { i32, i1 } %2, 1", llvm_type: "i1" } })))
Operand 1 is Some(Right(BasicBlock { address: 0x55add296f880, is_const: false, llvm_value: "\nbb6:                                              ; preds = %bb5\n  ret i32 %_10.0\n", llvm_type: "label" }))
Operand 2 is Some(Right(BasicBlock { address: 0x55add296f8d0, is_const: false, llvm_value: "\npanic1:                                           ; preds = %bb5\n  call void @_ZN4core9panicking5panic17h4241c5ccea17facaE([0 x i8]* noundef nonnull align 1 bitcast ([33 x i8]* @str.1 to [0 x i8]*), i64 33, %\"core::panic::location::Location\"* noundef align 8 dereferenceable(24) bitcast (<{ i8*, [16 x i8] }>* @alloc46 to %\"core::panic::location::Location\"*)) #7\n  unreachable\n", llvm_type: "label" }))
IF STATEMENT
terminator is InstructionValue { instruction_value: Value { name: "", address: 0x55add2978af0, is_const: false, is_null: false, is_undef: false, llvm_value: "  br i1 %_2, label %bb1, label %bb3", llvm_type: "void" } }
Operand 0 is Some(Left(IntValue(IntValue { int_value: Value { name: "_2", address: 0x55add2978a40, is_const: false, is_null: false, is_undef: false, llvm_value: "  %_2 = icmp sgt i32 %0, 0", llvm_type: "i1" } })))
Operand 1 is Some(Right(BasicBlock { address: 0x55add296f6a0, is_const: false, llvm_value: "\nbb3:                                              ; preds = %bb1, %start\n  %x_mut.0 = phi i32 [ %0, %start ], [ %_5.0, %bb1 ]\n  %_7 = icmp sle i32 %x_mut.0, 0\n  %_6 = xor i1 %_7, true\n  br i1 %_6, label %bb4, label %bb5\n", llvm_type: "label" }))
Operand 2 is Some(Right(BasicBlock { address: 0x55add296f6f0, is_const: false, llvm_value: "\nbb1:                                              ; preds = %start\n  %1 = call { i32, i1 } @llvm.smul.with.overflow.i32(i32 -1, i32 %0)\n  %_5.0 = extractvalue { i32, i1 } %1, 0\n  %_5.1 = extractvalue { i32, i1 } %1, 1\n  br i1 %_5.1, label %panic, label %bb3, !prof !3\n", llvm_type: "label" }))
IF STATEMENT
terminator is InstructionValue { instruction_value: Value { name: "", address: 0x55add2978d30, is_const: false, is_null: false, is_undef: false, llvm_value: "  br i1 %_6, label %bb4, label %bb5", llvm_type: "void" } }
Operand 0 is Some(Left(IntValue(IntValue { int_value: Value { name: "_6", address: 0x55add2978c80, is_const: false, is_null: false, is_undef: false, llvm_value: "  %_6 = xor i1 %_7, true", llvm_type: "i1" } })))
Operand 1 is Some(Right(BasicBlock { address: 0x55add296f7e0, is_const: false, llvm_value: "\nbb5:                                              ; preds = %bb3\n  %2 = call { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %x_mut.0, i32 1)\n  %_10.0 = extractvalue { i32, i1 } %2, 0\n  %_10.1 = extractvalue { i32, i1 } %2, 1\n  br i1 %_10.1, label %panic1, label %bb6, !prof !3\n", llvm_type: "label" }))
Operand 2 is Some(Right(BasicBlock { address: 0x55add296f830, is_const: false, llvm_value: "\nbb4:                                              ; preds = %bb3\n  call void @_ZN4core9panicking5panic17h4241c5ccea17facaE([0 x i8]* noundef nonnull align 1 bitcast (<{ [28 x i8] }>* @alloc51 to [0 x i8]*), i64 28, %\"core::panic::location::Location\"* noundef align 8 dereferenceable(24) bitcast (<{ i8*, [16 x i8] }>* @alloc44 to %\"core::panic::location::Location\"*)) #7\n  unreachable\n", llvm_type: "label" }))
IF STATEMENT
terminator is InstructionValue { instruction_value: Value { name: "", address: 0x55add29790f0, is_const: false, is_null: false, is_undef: false, llvm_value: "  br i1 %_5.1, label %panic, label %bb3, !prof !3", llvm_type: "void" } }
Operand 0 is Some(Left(IntValue(IntValue { int_value: Value { name: "_5.1", address: 0x55add2978f60, is_const: false, is_null: false, is_undef: false, llvm_value: "  %_5.1 = extractvalue { i32, i1 } %1, 1", llvm_type: "i1" } })))
Operand 1 is Some(Right(BasicBlock { address: 0x55add296f6a0, is_const: false, llvm_value: "\nbb3:                                              ; preds = %bb1, %start\n  %x_mut.0 = phi i32 [ %0, %start ], [ %_5.0, %bb1 ]\n  %_7 = icmp sle i32 %x_mut.0, 0\n  %_6 = xor i1 %_7, true\n  br i1 %_6, label %bb4, label %bb5\n", llvm_type: "label" }))
Operand 2 is Some(Right(BasicBlock { address: 0x55add296f790, is_const: false, llvm_value: "\npanic:                                            ; preds = %bb1\n  call void @_ZN4core9panicking5panic17h4241c5ccea17facaE([0 x i8]* noundef nonnull align 1 bitcast ([33 x i8]* @str.0 to [0 x i8]*), i64 33, %\"core::panic::location::Location\"* noundef align 8 dereferenceable(24) bitcast (<{ i8*, [16 x i8] }>* @alloc41 to %\"core::panic::location::Location\"*)) #7\n  unreachable\n", llvm_type: "label" }))
IF STATEMENT
terminator is InstructionValue { instruction_value: Value { name: "", address: 0x55add29795b0, is_const: false, is_null: false, is_undef: false, llvm_value: "  br i1 %_10.1, label %panic1, label %bb6, !prof !3", llvm_type: "void" } }
Operand 0 is Some(Left(IntValue(IntValue { int_value: Value { name: "_10.1", address: 0x55add2979420, is_const: false, is_null: false, is_undef: false, llvm_value: "  %_10.1 = extractvalue { i32, i1 } %2, 1", llvm_type: "i1" } })))
Operand 1 is Some(Right(BasicBlock { address: 0x55add296f880, is_const: false, llvm_value: "\nbb6:                                              ; preds = %bb5\n  ret i32 %_10.0\n", llvm_type: "label" }))
Operand 2 is Some(Right(BasicBlock { address: 0x55add296f8d0, is_const: false, llvm_value: "\npanic1:                                           ; preds = %bb5\n  call void @_ZN4core9panicking5panic17h4241c5ccea17facaE([0 x i8]* noundef nonnull align 1 bitcast ([33 x i8]* @str.1 to [0 x i8]*), i64 33, %\"core::panic::location::Location\"* noundef align 8 dereferenceable(24) bitcast (<{ i8*, [16 x i8] }>* @alloc46 to %\"core::panic::location::Location\"*)) #7\n  unreachable\n", llvm_type: "label" }))
[2mJan 15 20:18:34.496[0m [34mDEBUG[0m wombat_symx: Forward sorted nodes:	["start", "bb1", "panic", "bb3", "bb5", "bb4", "bb6", "panic1", "common_end"]
IF STATEMENT
terminator is InstructionValue { instruction_value: Value { name: "", address: 0x55add2978af0, is_const: false, is_null: false, is_undef: false, llvm_value: "  br i1 %_2, label %bb1, label %bb3", llvm_type: "void" } }
Operand 0 is Some(Left(IntValue(IntValue { int_value: Value { name: "_2", address: 0x55add2978a40, is_const: false, is_null: false, is_undef: false, llvm_value: "  %_2 = icmp sgt i32 %0, 0", llvm_type: "i1" } })))
Operand 1 is Some(Right(BasicBlock { address: 0x55add296f6a0, is_const: false, llvm_value: "\nbb3:                                              ; preds = %bb1, %start\n  %x_mut.0 = phi i32 [ %0, %start ], [ %_5.0, %bb1 ]\n  %_7 = icmp sle i32 %x_mut.0, 0\n  %_6 = xor i1 %_7, true\n  br i1 %_6, label %bb4, label %bb5\n", llvm_type: "label" }))
Operand 2 is Some(Right(BasicBlock { address: 0x55add296f6f0, is_const: false, llvm_value: "\nbb1:                                              ; preds = %start\n  %1 = call { i32, i1 } @llvm.smul.with.overflow.i32(i32 -1, i32 %0)\n  %_5.0 = extractvalue { i32, i1 } %1, 0\n  %_5.1 = extractvalue { i32, i1 } %1, 1\n  br i1 %_5.1, label %panic, label %bb3, !prof !3\n", llvm_type: "label" }))
IF STATEMENT
terminator is InstructionValue { instruction_value: Value { name: "", address: 0x55add2978d30, is_const: false, is_null: false, is_undef: false, llvm_value: "  br i1 %_6, label %bb4, label %bb5", llvm_type: "void" } }
Operand 0 is Some(Left(IntValue(IntValue { int_value: Value { name: "_6", address: 0x55add2978c80, is_const: false, is_null: false, is_undef: false, llvm_value: "  %_6 = xor i1 %_7, true", llvm_type: "i1" } })))
Operand 1 is Some(Right(BasicBlock { address: 0x55add296f7e0, is_const: false, llvm_value: "\nbb5:                                              ; preds = %bb3\n  %2 = call { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %x_mut.0, i32 1)\n  %_10.0 = extractvalue { i32, i1 } %2, 0\n  %_10.1 = extractvalue { i32, i1 } %2, 1\n  br i1 %_10.1, label %panic1, label %bb6, !prof !3\n", llvm_type: "label" }))
Operand 2 is Some(Right(BasicBlock { address: 0x55add296f830, is_const: false, llvm_value: "\nbb4:                                              ; preds = %bb3\n  call void @_ZN4core9panicking5panic17h4241c5ccea17facaE([0 x i8]* noundef nonnull align 1 bitcast (<{ [28 x i8] }>* @alloc51 to [0 x i8]*), i64 28, %\"core::panic::location::Location\"* noundef align 8 dereferenceable(24) bitcast (<{ i8*, [16 x i8] }>* @alloc44 to %\"core::panic::location::Location\"*)) #7\n  unreachable\n", llvm_type: "label" }))
IF STATEMENT
terminator is InstructionValue { instruction_value: Value { name: "", address: 0x55add29790f0, is_const: false, is_null: false, is_undef: false, llvm_value: "  br i1 %_5.1, label %panic, label %bb3, !prof !3", llvm_type: "void" } }
Operand 0 is Some(Left(IntValue(IntValue { int_value: Value { name: "_5.1", address: 0x55add2978f60, is_const: false, is_null: false, is_undef: false, llvm_value: "  %_5.1 = extractvalue { i32, i1 } %1, 1", llvm_type: "i1" } })))
Operand 1 is Some(Right(BasicBlock { address: 0x55add296f6a0, is_const: false, llvm_value: "\nbb3:                                              ; preds = %bb1, %start\n  %x_mut.0 = phi i32 [ %0, %start ], [ %_5.0, %bb1 ]\n  %_7 = icmp sle i32 %x_mut.0, 0\n  %_6 = xor i1 %_7, true\n  br i1 %_6, label %bb4, label %bb5\n", llvm_type: "label" }))
Operand 2 is Some(Right(BasicBlock { address: 0x55add296f790, is_const: false, llvm_value: "\npanic:                                            ; preds = %bb1\n  call void @_ZN4core9panicking5panic17h4241c5ccea17facaE([0 x i8]* noundef nonnull align 1 bitcast ([33 x i8]* @str.0 to [0 x i8]*), i64 33, %\"core::panic::location::Location\"* noundef align 8 dereferenceable(24) bitcast (<{ i8*, [16 x i8] }>* @alloc41 to %\"core::panic::location::Location\"*)) #7\n  unreachable\n", llvm_type: "label" }))
IF STATEMENT
terminator is InstructionValue { instruction_value: Value { name: "", address: 0x55add29795b0, is_const: false, is_null: false, is_undef: false, llvm_value: "  br i1 %_10.1, label %panic1, label %bb6, !prof !3", llvm_type: "void" } }
Operand 0 is Some(Left(IntValue(IntValue { int_value: Value { name: "_10.1", address: 0x55add2979420, is_const: false, is_null: false, is_undef: false, llvm_value: "  %_10.1 = extractvalue { i32, i1 } %2, 1", llvm_type: "i1" } })))
Operand 1 is Some(Right(BasicBlock { address: 0x55add296f880, is_const: false, llvm_value: "\nbb6:                                              ; preds = %bb5\n  ret i32 %_10.0\n", llvm_type: "label" }))
Operand 2 is Some(Right(BasicBlock { address: 0x55add296f8d0, is_const: false, llvm_value: "\npanic1:                                           ; preds = %bb5\n  call void @_ZN4core9panicking5panic17h4241c5ccea17facaE([0 x i8]* noundef nonnull align 1 bitcast ([33 x i8]* @str.1 to [0 x i8]*), i64 33, %\"core::panic::location::Location\"* noundef align 8 dereferenceable(24) bitcast (<{ i8*, [16 x i8] }>* @alloc46 to %\"core::panic::location::Location\"*)) #7\n  unreachable\n", llvm_type: "label" }))
IF STATEMENT
terminator is InstructionValue { instruction_value: Value { name: "", address: 0x55add2978af0, is_const: false, is_null: false, is_undef: false, llvm_value: "  br i1 %_2, label %bb1, label %bb3", llvm_type: "void" } }
Operand 0 is Some(Left(IntValue(IntValue { int_value: Value { name: "_2", address: 0x55add2978a40, is_const: false, is_null: false, is_undef: false, llvm_value: "  %_2 = icmp sgt i32 %0, 0", llvm_type: "i1" } })))
Operand 1 is Some(Right(BasicBlock { address: 0x55add296f6a0, is_const: false, llvm_value: "\nbb3:                                              ; preds = %bb1, %start\n  %x_mut.0 = phi i32 [ %0, %start ], [ %_5.0, %bb1 ]\n  %_7 = icmp sle i32 %x_mut.0, 0\n  %_6 = xor i1 %_7, true\n  br i1 %_6, label %bb4, label %bb5\n", llvm_type: "label" }))
Operand 2 is Some(Right(BasicBlock { address: 0x55add296f6f0, is_const: false, llvm_value: "\nbb1:                                              ; preds = %start\n  %1 = call { i32, i1 } @llvm.smul.with.overflow.i32(i32 -1, i32 %0)\n  %_5.0 = extractvalue { i32, i1 } %1, 0\n  %_5.1 = extractvalue { i32, i1 } %1, 1\n  br i1 %_5.1, label %panic, label %bb3, !prof !3\n", llvm_type: "label" }))
IF STATEMENT
terminator is InstructionValue { instruction_value: Value { name: "", address: 0x55add2978d30, is_const: false, is_null: false, is_undef: false, llvm_value: "  br i1 %_6, label %bb4, label %bb5", llvm_type: "void" } }
Operand 0 is Some(Left(IntValue(IntValue { int_value: Value { name: "_6", address: 0x55add2978c80, is_const: false, is_null: false, is_undef: false, llvm_value: "  %_6 = xor i1 %_7, true", llvm_type: "i1" } })))
Operand 1 is Some(Right(BasicBlock { address: 0x55add296f7e0, is_const: false, llvm_value: "\nbb5:                                              ; preds = %bb3\n  %2 = call { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %x_mut.0, i32 1)\n  %_10.0 = extractvalue { i32, i1 } %2, 0\n  %_10.1 = extractvalue { i32, i1 } %2, 1\n  br i1 %_10.1, label %panic1, label %bb6, !prof !3\n", llvm_type: "label" }))
Operand 2 is Some(Right(BasicBlock { address: 0x55add296f830, is_const: false, llvm_value: "\nbb4:                                              ; preds = %bb3\n  call void @_ZN4core9panicking5panic17h4241c5ccea17facaE([0 x i8]* noundef nonnull align 1 bitcast (<{ [28 x i8] }>* @alloc51 to [0 x i8]*), i64 28, %\"core::panic::location::Location\"* noundef align 8 dereferenceable(24) bitcast (<{ i8*, [16 x i8] }>* @alloc44 to %\"core::panic::location::Location\"*)) #7\n  unreachable\n", llvm_type: "label" }))
IF STATEMENT
terminator is InstructionValue { instruction_value: Value { name: "", address: 0x55add29790f0, is_const: false, is_null: false, is_undef: false, llvm_value: "  br i1 %_5.1, label %panic, label %bb3, !prof !3", llvm_type: "void" } }
Operand 0 is Some(Left(IntValue(IntValue { int_value: Value { name: "_5.1", address: 0x55add2978f60, is_const: false, is_null: false, is_undef: false, llvm_value: "  %_5.1 = extractvalue { i32, i1 } %1, 1", llvm_type: "i1" } })))
Operand 1 is Some(Right(BasicBlock { address: 0x55add296f6a0, is_const: false, llvm_value: "\nbb3:                                              ; preds = %bb1, %start\n  %x_mut.0 = phi i32 [ %0, %start ], [ %_5.0, %bb1 ]\n  %_7 = icmp sle i32 %x_mut.0, 0\n  %_6 = xor i1 %_7, true\n  br i1 %_6, label %bb4, label %bb5\n", llvm_type: "label" }))
Operand 2 is Some(Right(BasicBlock { address: 0x55add296f790, is_const: false, llvm_value: "\npanic:                                            ; preds = %bb1\n  call void @_ZN4core9panicking5panic17h4241c5ccea17facaE([0 x i8]* noundef nonnull align 1 bitcast ([33 x i8]* @str.0 to [0 x i8]*), i64 33, %\"core::panic::location::Location\"* noundef align 8 dereferenceable(24) bitcast (<{ i8*, [16 x i8] }>* @alloc41 to %\"core::panic::location::Location\"*)) #7\n  unreachable\n", llvm_type: "label" }))
IF STATEMENT
terminator is InstructionValue { instruction_value: Value { name: "", address: 0x55add29795b0, is_const: false, is_null: false, is_undef: false, llvm_value: "  br i1 %_10.1, label %panic1, label %bb6, !prof !3", llvm_type: "void" } }
Operand 0 is Some(Left(IntValue(IntValue { int_value: Value { name: "_10.1", address: 0x55add2979420, is_const: false, is_null: false, is_undef: false, llvm_value: "  %_10.1 = extractvalue { i32, i1 } %2, 1", llvm_type: "i1" } })))
Operand 1 is Some(Right(BasicBlock { address: 0x55add296f880, is_const: false, llvm_value: "\nbb6:                                              ; preds = %bb5\n  ret i32 %_10.0\n", llvm_type: "label" }))
Operand 2 is Some(Right(BasicBlock { address: 0x55add296f8d0, is_const: false, llvm_value: "\npanic1:                                           ; preds = %bb5\n  call void @_ZN4core9panicking5panic17h4241c5ccea17facaE([0 x i8]* noundef nonnull align 1 bitcast ([33 x i8]* @str.1 to [0 x i8]*), i64 33, %\"core::panic::location::Location\"* noundef align 8 dereferenceable(24) bitcast (<{ i8*, [16 x i8] }>* @alloc46 to %\"core::panic::location::Location\"*)) #7\n  unreachable\n", llvm_type: "label" }))
[2mJan 15 20:18:34.497[0m [34mDEBUG[0m wombat_symx: Backward sorted nodes:	["common_end", "panic1", "bb6", "bb4", "bb5", "bb3", "panic", "bb1", "start"]
IF STATEMENT
terminator is InstructionValue { instruction_value: Value { name: "", address: 0x55add2978af0, is_const: false, is_null: false, is_undef: false, llvm_value: "  br i1 %_2, label %bb1, label %bb3", llvm_type: "void" } }
Operand 0 is Some(Left(IntValue(IntValue { int_value: Value { name: "_2", address: 0x55add2978a40, is_const: false, is_null: false, is_undef: false, llvm_value: "  %_2 = icmp sgt i32 %0, 0", llvm_type: "i1" } })))
Operand 1 is Some(Right(BasicBlock { address: 0x55add296f6a0, is_const: false, llvm_value: "\nbb3:                                              ; preds = %bb1, %start\n  %x_mut.0 = phi i32 [ %0, %start ], [ %_5.0, %bb1 ]\n  %_7 = icmp sle i32 %x_mut.0, 0\n  %_6 = xor i1 %_7, true\n  br i1 %_6, label %bb4, label %bb5\n", llvm_type: "label" }))
Operand 2 is Some(Right(BasicBlock { address: 0x55add296f6f0, is_const: false, llvm_value: "\nbb1:                                              ; preds = %start\n  %1 = call { i32, i1 } @llvm.smul.with.overflow.i32(i32 -1, i32 %0)\n  %_5.0 = extractvalue { i32, i1 } %1, 0\n  %_5.1 = extractvalue { i32, i1 } %1, 1\n  br i1 %_5.1, label %panic, label %bb3, !prof !3\n", llvm_type: "label" }))
IF STATEMENT
terminator is InstructionValue { instruction_value: Value { name: "", address: 0x55add2978d30, is_const: false, is_null: false, is_undef: false, llvm_value: "  br i1 %_6, label %bb4, label %bb5", llvm_type: "void" } }
Operand 0 is Some(Left(IntValue(IntValue { int_value: Value { name: "_6", address: 0x55add2978c80, is_const: false, is_null: false, is_undef: false, llvm_value: "  %_6 = xor i1 %_7, true", llvm_type: "i1" } })))
Operand 1 is Some(Right(BasicBlock { address: 0x55add296f7e0, is_const: false, llvm_value: "\nbb5:                                              ; preds = %bb3\n  %2 = call { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %x_mut.0, i32 1)\n  %_10.0 = extractvalue { i32, i1 } %2, 0\n  %_10.1 = extractvalue { i32, i1 } %2, 1\n  br i1 %_10.1, label %panic1, label %bb6, !prof !3\n", llvm_type: "label" }))
Operand 2 is Some(Right(BasicBlock { address: 0x55add296f830, is_const: false, llvm_value: "\nbb4:                                              ; preds = %bb3\n  call void @_ZN4core9panicking5panic17h4241c5ccea17facaE([0 x i8]* noundef nonnull align 1 bitcast (<{ [28 x i8] }>* @alloc51 to [0 x i8]*), i64 28, %\"core::panic::location::Location\"* noundef align 8 dereferenceable(24) bitcast (<{ i8*, [16 x i8] }>* @alloc44 to %\"core::panic::location::Location\"*)) #7\n  unreachable\n", llvm_type: "label" }))
IF STATEMENT
terminator is InstructionValue { instruction_value: Value { name: "", address: 0x55add29790f0, is_const: false, is_null: false, is_undef: false, llvm_value: "  br i1 %_5.1, label %panic, label %bb3, !prof !3", llvm_type: "void" } }
Operand 0 is Some(Left(IntValue(IntValue { int_value: Value { name: "_5.1", address: 0x55add2978f60, is_const: false, is_null: false, is_undef: false, llvm_value: "  %_5.1 = extractvalue { i32, i1 } %1, 1", llvm_type: "i1" } })))
Operand 1 is Some(Right(BasicBlock { address: 0x55add296f6a0, is_const: false, llvm_value: "\nbb3:                                              ; preds = %bb1, %start\n  %x_mut.0 = phi i32 [ %0, %start ], [ %_5.0, %bb1 ]\n  %_7 = icmp sle i32 %x_mut.0, 0\n  %_6 = xor i1 %_7, true\n  br i1 %_6, label %bb4, label %bb5\n", llvm_type: "label" }))
Operand 2 is Some(Right(BasicBlock { address: 0x55add296f790, is_const: false, llvm_value: "\npanic:                                            ; preds = %bb1\n  call void @_ZN4core9panicking5panic17h4241c5ccea17facaE([0 x i8]* noundef nonnull align 1 bitcast ([33 x i8]* @str.0 to [0 x i8]*), i64 33, %\"core::panic::location::Location\"* noundef align 8 dereferenceable(24) bitcast (<{ i8*, [16 x i8] }>* @alloc41 to %\"core::panic::location::Location\"*)) #7\n  unreachable\n", llvm_type: "label" }))
IF STATEMENT
terminator is InstructionValue { instruction_value: Value { name: "", address: 0x55add29795b0, is_const: false, is_null: false, is_undef: false, llvm_value: "  br i1 %_10.1, label %panic1, label %bb6, !prof !3", llvm_type: "void" } }
Operand 0 is Some(Left(IntValue(IntValue { int_value: Value { name: "_10.1", address: 0x55add2979420, is_const: false, is_null: false, is_undef: false, llvm_value: "  %_10.1 = extractvalue { i32, i1 } %2, 1", llvm_type: "i1" } })))
Operand 1 is Some(Right(BasicBlock { address: 0x55add296f880, is_const: false, llvm_value: "\nbb6:                                              ; preds = %bb5\n  ret i32 %_10.0\n", llvm_type: "label" }))
Operand 2 is Some(Right(BasicBlock { address: 0x55add296f8d0, is_const: false, llvm_value: "\npanic1:                                           ; preds = %bb5\n  call void @_ZN4core9panicking5panic17h4241c5ccea17facaE([0 x i8]* noundef nonnull align 1 bitcast ([33 x i8]* @str.1 to [0 x i8]*), i64 33, %\"core::panic::location::Location\"* noundef align 8 dereferenceable(24) bitcast (<{ i8*, [16 x i8] }>* @alloc46 to %\"core::panic::location::Location\"*)) #7\n  unreachable\n", llvm_type: "label" }))
IF STATEMENT
terminator is InstructionValue { instruction_value: Value { name: "", address: 0x55add2978af0, is_const: false, is_null: false, is_undef: false, llvm_value: "  br i1 %_2, label %bb1, label %bb3", llvm_type: "void" } }
Operand 0 is Some(Left(IntValue(IntValue { int_value: Value { name: "_2", address: 0x55add2978a40, is_const: false, is_null: false, is_undef: false, llvm_value: "  %_2 = icmp sgt i32 %0, 0", llvm_type: "i1" } })))
Operand 1 is Some(Right(BasicBlock { address: 0x55add296f6a0, is_const: false, llvm_value: "\nbb3:                                              ; preds = %bb1, %start\n  %x_mut.0 = phi i32 [ %0, %start ], [ %_5.0, %bb1 ]\n  %_7 = icmp sle i32 %x_mut.0, 0\n  %_6 = xor i1 %_7, true\n  br i1 %_6, label %bb4, label %bb5\n", llvm_type: "label" }))
Operand 2 is Some(Right(BasicBlock { address: 0x55add296f6f0, is_const: false, llvm_value: "\nbb1:                                              ; preds = %start\n  %1 = call { i32, i1 } @llvm.smul.with.overflow.i32(i32 -1, i32 %0)\n  %_5.0 = extractvalue { i32, i1 } %1, 0\n  %_5.1 = extractvalue { i32, i1 } %1, 1\n  br i1 %_5.1, label %panic, label %bb3, !prof !3\n", llvm_type: "label" }))
IF STATEMENT
terminator is InstructionValue { instruction_value: Value { name: "", address: 0x55add2978d30, is_const: false, is_null: false, is_undef: false, llvm_value: "  br i1 %_6, label %bb4, label %bb5", llvm_type: "void" } }
Operand 0 is Some(Left(IntValue(IntValue { int_value: Value { name: "_6", address: 0x55add2978c80, is_const: false, is_null: false, is_undef: false, llvm_value: "  %_6 = xor i1 %_7, true", llvm_type: "i1" } })))
Operand 1 is Some(Right(BasicBlock { address: 0x55add296f7e0, is_const: false, llvm_value: "\nbb5:                                              ; preds = %bb3\n  %2 = call { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %x_mut.0, i32 1)\n  %_10.0 = extractvalue { i32, i1 } %2, 0\n  %_10.1 = extractvalue { i32, i1 } %2, 1\n  br i1 %_10.1, label %panic1, label %bb6, !prof !3\n", llvm_type: "label" }))
Operand 2 is Some(Right(BasicBlock { address: 0x55add296f830, is_const: false, llvm_value: "\nbb4:                                              ; preds = %bb3\n  call void @_ZN4core9panicking5panic17h4241c5ccea17facaE([0 x i8]* noundef nonnull align 1 bitcast (<{ [28 x i8] }>* @alloc51 to [0 x i8]*), i64 28, %\"core::panic::location::Location\"* noundef align 8 dereferenceable(24) bitcast (<{ i8*, [16 x i8] }>* @alloc44 to %\"core::panic::location::Location\"*)) #7\n  unreachable\n", llvm_type: "label" }))
IF STATEMENT
terminator is InstructionValue { instruction_value: Value { name: "", address: 0x55add29790f0, is_const: false, is_null: false, is_undef: false, llvm_value: "  br i1 %_5.1, label %panic, label %bb3, !prof !3", llvm_type: "void" } }
Operand 0 is Some(Left(IntValue(IntValue { int_value: Value { name: "_5.1", address: 0x55add2978f60, is_const: false, is_null: false, is_undef: false, llvm_value: "  %_5.1 = extractvalue { i32, i1 } %1, 1", llvm_type: "i1" } })))
Operand 1 is Some(Right(BasicBlock { address: 0x55add296f6a0, is_const: false, llvm_value: "\nbb3:                                              ; preds = %bb1, %start\n  %x_mut.0 = phi i32 [ %0, %start ], [ %_5.0, %bb1 ]\n  %_7 = icmp sle i32 %x_mut.0, 0\n  %_6 = xor i1 %_7, true\n  br i1 %_6, label %bb4, label %bb5\n", llvm_type: "label" }))
Operand 2 is Some(Right(BasicBlock { address: 0x55add296f790, is_const: false, llvm_value: "\npanic:                                            ; preds = %bb1\n  call void @_ZN4core9panicking5panic17h4241c5ccea17facaE([0 x i8]* noundef nonnull align 1 bitcast ([33 x i8]* @str.0 to [0 x i8]*), i64 33, %\"core::panic::location::Location\"* noundef align 8 dereferenceable(24) bitcast (<{ i8*, [16 x i8] }>* @alloc41 to %\"core::panic::location::Location\"*)) #7\n  unreachable\n", llvm_type: "label" }))
IF STATEMENT
terminator is InstructionValue { instruction_value: Value { name: "", address: 0x55add29795b0, is_const: false, is_null: false, is_undef: false, llvm_value: "  br i1 %_10.1, label %panic1, label %bb6, !prof !3", llvm_type: "void" } }
Operand 0 is Some(Left(IntValue(IntValue { int_value: Value { name: "_10.1", address: 0x55add2979420, is_const: false, is_null: false, is_undef: false, llvm_value: "  %_10.1 = extractvalue { i32, i1 } %2, 1", llvm_type: "i1" } })))
Operand 1 is Some(Right(BasicBlock { address: 0x55add296f880, is_const: false, llvm_value: "\nbb6:                                              ; preds = %bb5\n  ret i32 %_10.0\n", llvm_type: "label" }))
Operand 2 is Some(Right(BasicBlock { address: 0x55add296f8d0, is_const: false, llvm_value: "\npanic1:                                           ; preds = %bb5\n  call void @_ZN4core9panicking5panic17h4241c5ccea17facaE([0 x i8]* noundef nonnull align 1 bitcast ([33 x i8]* @str.1 to [0 x i8]*), i64 33, %\"core::panic::location::Location\"* noundef align 8 dereferenceable(24) bitcast (<{ i8*, [16 x i8] }>* @alloc46 to %\"core::panic::location::Location\"*)) #7\n  unreachable\n", llvm_type: "label" }))
IF STATEMENT
terminator is InstructionValue { instruction_value: Value { name: "", address: 0x55add2978af0, is_const: false, is_null: false, is_undef: false, llvm_value: "  br i1 %_2, label %bb1, label %bb3", llvm_type: "void" } }
Operand 0 is Some(Left(IntValue(IntValue { int_value: Value { name: "_2", address: 0x55add2978a40, is_const: false, is_null: false, is_undef: false, llvm_value: "  %_2 = icmp sgt i32 %0, 0", llvm_type: "i1" } })))
Operand 1 is Some(Right(BasicBlock { address: 0x55add296f6a0, is_const: false, llvm_value: "\nbb3:                                              ; preds = %bb1, %start\n  %x_mut.0 = phi i32 [ %0, %start ], [ %_5.0, %bb1 ]\n  %_7 = icmp sle i32 %x_mut.0, 0\n  %_6 = xor i1 %_7, true\n  br i1 %_6, label %bb4, label %bb5\n", llvm_type: "label" }))
Operand 2 is Some(Right(BasicBlock { address: 0x55add296f6f0, is_const: false, llvm_value: "\nbb1:                                              ; preds = %start\n  %1 = call { i32, i1 } @llvm.smul.with.overflow.i32(i32 -1, i32 %0)\n  %_5.0 = extractvalue { i32, i1 } %1, 0\n  %_5.1 = extractvalue { i32, i1 } %1, 1\n  br i1 %_5.1, label %panic, label %bb3, !prof !3\n", llvm_type: "label" }))
IF STATEMENT
terminator is InstructionValue { instruction_value: Value { name: "", address: 0x55add2978d30, is_const: false, is_null: false, is_undef: false, llvm_value: "  br i1 %_6, label %bb4, label %bb5", llvm_type: "void" } }
Operand 0 is Some(Left(IntValue(IntValue { int_value: Value { name: "_6", address: 0x55add2978c80, is_const: false, is_null: false, is_undef: false, llvm_value: "  %_6 = xor i1 %_7, true", llvm_type: "i1" } })))
Operand 1 is Some(Right(BasicBlock { address: 0x55add296f7e0, is_const: false, llvm_value: "\nbb5:                                              ; preds = %bb3\n  %2 = call { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %x_mut.0, i32 1)\n  %_10.0 = extractvalue { i32, i1 } %2, 0\n  %_10.1 = extractvalue { i32, i1 } %2, 1\n  br i1 %_10.1, label %panic1, label %bb6, !prof !3\n", llvm_type: "label" }))
Operand 2 is Some(Right(BasicBlock { address: 0x55add296f830, is_const: false, llvm_value: "\nbb4:                                              ; preds = %bb3\n  call void @_ZN4core9panicking5panic17h4241c5ccea17facaE([0 x i8]* noundef nonnull align 1 bitcast (<{ [28 x i8] }>* @alloc51 to [0 x i8]*), i64 28, %\"core::panic::location::Location\"* noundef align 8 dereferenceable(24) bitcast (<{ i8*, [16 x i8] }>* @alloc44 to %\"core::panic::location::Location\"*)) #7\n  unreachable\n", llvm_type: "label" }))
IF STATEMENT
terminator is InstructionValue { instruction_value: Value { name: "", address: 0x55add29790f0, is_const: false, is_null: false, is_undef: false, llvm_value: "  br i1 %_5.1, label %panic, label %bb3, !prof !3", llvm_type: "void" } }
Operand 0 is Some(Left(IntValue(IntValue { int_value: Value { name: "_5.1", address: 0x55add2978f60, is_const: false, is_null: false, is_undef: false, llvm_value: "  %_5.1 = extractvalue { i32, i1 } %1, 1", llvm_type: "i1" } })))
Operand 1 is Some(Right(BasicBlock { address: 0x55add296f6a0, is_const: false, llvm_value: "\nbb3:                                              ; preds = %bb1, %start\n  %x_mut.0 = phi i32 [ %0, %start ], [ %_5.0, %bb1 ]\n  %_7 = icmp sle i32 %x_mut.0, 0\n  %_6 = xor i1 %_7, true\n  br i1 %_6, label %bb4, label %bb5\n", llvm_type: "label" }))
Operand 2 is Some(Right(BasicBlock { address: 0x55add296f790, is_const: false, llvm_value: "\npanic:                                            ; preds = %bb1\n  call void @_ZN4core9panicking5panic17h4241c5ccea17facaE([0 x i8]* noundef nonnull align 1 bitcast ([33 x i8]* @str.0 to [0 x i8]*), i64 33, %\"core::panic::location::Location\"* noundef align 8 dereferenceable(24) bitcast (<{ i8*, [16 x i8] }>* @alloc41 to %\"core::panic::location::Location\"*)) #7\n  unreachable\n", llvm_type: "label" }))
IF STATEMENT
terminator is InstructionValue { instruction_value: Value { name: "", address: 0x55add29795b0, is_const: false, is_null: false, is_undef: false, llvm_value: "  br i1 %_10.1, label %panic1, label %bb6, !prof !3", llvm_type: "void" } }
Operand 0 is Some(Left(IntValue(IntValue { int_value: Value { name: "_10.1", address: 0x55add2979420, is_const: false, is_null: false, is_undef: false, llvm_value: "  %_10.1 = extractvalue { i32, i1 } %2, 1", llvm_type: "i1" } })))
Operand 1 is Some(Right(BasicBlock { address: 0x55add296f880, is_const: false, llvm_value: "\nbb6:                                              ; preds = %bb5\n  ret i32 %_10.0\n", llvm_type: "label" }))
Operand 2 is Some(Right(BasicBlock { address: 0x55add296f8d0, is_const: false, llvm_value: "\npanic1:                                           ; preds = %bb5\n  call void @_ZN4core9panicking5panic17h4241c5ccea17facaE([0 x i8]* noundef nonnull align 1 bitcast ([33 x i8]* @str.1 to [0 x i8]*), i64 33, %\"core::panic::location::Location\"* noundef align 8 dereferenceable(24) bitcast (<{ i8*, [16 x i8] }>* @alloc46 to %\"core::panic::location::Location\"*)) #7\n  unreachable\n", llvm_type: "label" }))
IF STATEMENT
terminator is InstructionValue { instruction_value: Value { name: "", address: 0x55add2978af0, is_const: false, is_null: false, is_undef: false, llvm_value: "  br i1 %_2, label %bb1, label %bb3", llvm_type: "void" } }
Operand 0 is Some(Left(IntValue(IntValue { int_value: Value { name: "_2", address: 0x55add2978a40, is_const: false, is_null: false, is_undef: false, llvm_value: "  %_2 = icmp sgt i32 %0, 0", llvm_type: "i1" } })))
Operand 1 is Some(Right(BasicBlock { address: 0x55add296f6a0, is_const: false, llvm_value: "\nbb3:                                              ; preds = %bb1, %start\n  %x_mut.0 = phi i32 [ %0, %start ], [ %_5.0, %bb1 ]\n  %_7 = icmp sle i32 %x_mut.0, 0\n  %_6 = xor i1 %_7, true\n  br i1 %_6, label %bb4, label %bb5\n", llvm_type: "label" }))
Operand 2 is Some(Right(BasicBlock { address: 0x55add296f6f0, is_const: false, llvm_value: "\nbb1:                                              ; preds = %start\n  %1 = call { i32, i1 } @llvm.smul.with.overflow.i32(i32 -1, i32 %0)\n  %_5.0 = extractvalue { i32, i1 } %1, 0\n  %_5.1 = extractvalue { i32, i1 } %1, 1\n  br i1 %_5.1, label %panic, label %bb3, !prof !3\n", llvm_type: "label" }))
IF STATEMENT
terminator is InstructionValue { instruction_value: Value { name: "", address: 0x55add2978d30, is_const: false, is_null: false, is_undef: false, llvm_value: "  br i1 %_6, label %bb4, label %bb5", llvm_type: "void" } }
Operand 0 is Some(Left(IntValue(IntValue { int_value: Value { name: "_6", address: 0x55add2978c80, is_const: false, is_null: false, is_undef: false, llvm_value: "  %_6 = xor i1 %_7, true", llvm_type: "i1" } })))
Operand 1 is Some(Right(BasicBlock { address: 0x55add296f7e0, is_const: false, llvm_value: "\nbb5:                                              ; preds = %bb3\n  %2 = call { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %x_mut.0, i32 1)\n  %_10.0 = extractvalue { i32, i1 } %2, 0\n  %_10.1 = extractvalue { i32, i1 } %2, 1\n  br i1 %_10.1, label %panic1, label %bb6, !prof !3\n", llvm_type: "label" }))
Operand 2 is Some(Right(BasicBlock { address: 0x55add296f830, is_const: false, llvm_value: "\nbb4:                                              ; preds = %bb3\n  call void @_ZN4core9panicking5panic17h4241c5ccea17facaE([0 x i8]* noundef nonnull align 1 bitcast (<{ [28 x i8] }>* @alloc51 to [0 x i8]*), i64 28, %\"core::panic::location::Location\"* noundef align 8 dereferenceable(24) bitcast (<{ i8*, [16 x i8] }>* @alloc44 to %\"core::panic::location::Location\"*)) #7\n  unreachable\n", llvm_type: "label" }))
IF STATEMENT
terminator is InstructionValue { instruction_value: Value { name: "", address: 0x55add29790f0, is_const: false, is_null: false, is_undef: false, llvm_value: "  br i1 %_5.1, label %panic, label %bb3, !prof !3", llvm_type: "void" } }
Operand 0 is Some(Left(IntValue(IntValue { int_value: Value { name: "_5.1", address: 0x55add2978f60, is_const: false, is_null: false, is_undef: false, llvm_value: "  %_5.1 = extractvalue { i32, i1 } %1, 1", llvm_type: "i1" } })))
Operand 1 is Some(Right(BasicBlock { address: 0x55add296f6a0, is_const: false, llvm_value: "\nbb3:                                              ; preds = %bb1, %start\n  %x_mut.0 = phi i32 [ %0, %start ], [ %_5.0, %bb1 ]\n  %_7 = icmp sle i32 %x_mut.0, 0\n  %_6 = xor i1 %_7, true\n  br i1 %_6, label %bb4, label %bb5\n", llvm_type: "label" }))
Operand 2 is Some(Right(BasicBlock { address: 0x55add296f790, is_const: false, llvm_value: "\npanic:                                            ; preds = %bb1\n  call void @_ZN4core9panicking5panic17h4241c5ccea17facaE([0 x i8]* noundef nonnull align 1 bitcast ([33 x i8]* @str.0 to [0 x i8]*), i64 33, %\"core::panic::location::Location\"* noundef align 8 dereferenceable(24) bitcast (<{ i8*, [16 x i8] }>* @alloc41 to %\"core::panic::location::Location\"*)) #7\n  unreachable\n", llvm_type: "label" }))
IF STATEMENT
terminator is InstructionValue { instruction_value: Value { name: "", address: 0x55add29795b0, is_const: false, is_null: false, is_undef: false, llvm_value: "  br i1 %_10.1, label %panic1, label %bb6, !prof !3", llvm_type: "void" } }
Operand 0 is Some(Left(IntValue(IntValue { int_value: Value { name: "_10.1", address: 0x55add2979420, is_const: false, is_null: false, is_undef: false, llvm_value: "  %_10.1 = extractvalue { i32, i1 } %2, 1", llvm_type: "i1" } })))
Operand 1 is Some(Right(BasicBlock { address: 0x55add296f880, is_const: false, llvm_value: "\nbb6:                                              ; preds = %bb5\n  ret i32 %_10.0\n", llvm_type: "label" }))
Operand 2 is Some(Right(BasicBlock { address: 0x55add296f8d0, is_const: false, llvm_value: "\npanic1:                                           ; preds = %bb5\n  call void @_ZN4core9panicking5panic17h4241c5ccea17facaE([0 x i8]* noundef nonnull align 1 bitcast ([33 x i8]* @str.1 to [0 x i8]*), i64 33, %\"core::panic::location::Location\"* noundef align 8 dereferenceable(24) bitcast (<{ i8*, [16 x i8] }>* @alloc46 to %\"core::panic::location::Location\"*)) #7\n  unreachable\n", llvm_type: "label" }))
[2mJan 15 20:18:34.531[0m [34mDEBUG[0m wombat_symx: Unsupported Call function "_ZN4core9panicking5panic17h4241c5ccea17facaE"
IF HAS NUM OPERANDS 3
IF HAS TERMINATOR InstructionValue { instruction_value: Value { name: "", address: 0x55add29795b0, is_const: false, is_null: false, is_undef: false, llvm_value: "  br i1 %_10.1, label %panic1, label %bb6, !prof !3", llvm_type: "void" } }
IF HAS NODE "panic1"
TEST 123 "  %_10.1 = extractvalue { i32, i1 } %2, 1"
IF HAS TARGET VAL true
IF HAS TARGET VAL VAR true
IF HAS SWITCH VAR %_10.1
IF HAS DISCRIMINANT IntValue(IntValue { int_value: Value { name: "_10.1", address: 0x55add2979420, is_const: false, is_null: false, is_undef: false, llvm_value: "  %_10.1 = extractvalue { i32, i1 } %2, 1", llvm_type: "i1" } })
IF HAS ENTRY CONDITION (= %_10.1 true)
IF HAS NUM OPERANDS 3
IF HAS TERMINATOR InstructionValue { instruction_value: Value { name: "", address: 0x55add29795b0, is_const: false, is_null: false, is_undef: false, llvm_value: "  br i1 %_10.1, label %panic1, label %bb6, !prof !3", llvm_type: "void" } }
IF HAS NODE "bb6"
TEST 123 "  %_10.1 = extractvalue { i32, i1 } %2, 1"
IF HAS TARGET VAL false
IF HAS TARGET VAL VAR false
IF HAS SWITCH VAR %_10.1
IF HAS DISCRIMINANT IntValue(IntValue { int_value: Value { name: "_10.1", address: 0x55add2979420, is_const: false, is_null: false, is_undef: false, llvm_value: "  %_10.1 = extractvalue { i32, i1 } %2, 1", llvm_type: "i1" } })
IF HAS ENTRY CONDITION (= %_10.1 false)
[2mJan 15 20:18:34.533[0m [34mDEBUG[0m wombat_symx: Unsupported Call function "_ZN4core9panicking5panic17h4241c5ccea17facaE"
IF HAS NUM OPERANDS 3
IF HAS TERMINATOR InstructionValue { instruction_value: Value { name: "", address: 0x55add2978d30, is_const: false, is_null: false, is_undef: false, llvm_value: "  br i1 %_6, label %bb4, label %bb5", llvm_type: "void" } }
IF HAS NODE "bb4"
TEST 123 "  %_6 = xor i1 %_7, true"
IF HAS TARGET VAL true
IF HAS TARGET VAL VAR true
IF HAS SWITCH VAR %_6
IF HAS DISCRIMINANT IntValue(IntValue { int_value: Value { name: "_6", address: 0x55add2978c80, is_const: false, is_null: false, is_undef: false, llvm_value: "  %_6 = xor i1 %_7, true", llvm_type: "i1" } })
IF HAS ENTRY CONDITION (= %_6 true)
IF HAS NUM OPERANDS 3
IF HAS TERMINATOR InstructionValue { instruction_value: Value { name: "", address: 0x55add29795b0, is_const: false, is_null: false, is_undef: false, llvm_value: "  br i1 %_10.1, label %panic1, label %bb6, !prof !3", llvm_type: "void" } }
IF HAS NODE "panic1"
TEST 123 "  %_10.1 = extractvalue { i32, i1 } %2, 1"
IF HAS TARGET VAL true
IF HAS TARGET VAL VAR true
IF HAS SWITCH VAR %_10.1
IF HAS DISCRIMINANT IntValue(IntValue { int_value: Value { name: "_10.1", address: 0x55add2979420, is_const: false, is_null: false, is_undef: false, llvm_value: "  %_10.1 = extractvalue { i32, i1 } %2, 1", llvm_type: "i1" } })
IF HAS ENTRY CONDITION (= %_10.1 true)
IF HAS NUM OPERANDS 3
IF HAS TERMINATOR InstructionValue { instruction_value: Value { name: "", address: 0x55add29795b0, is_const: false, is_null: false, is_undef: false, llvm_value: "  br i1 %_10.1, label %panic1, label %bb6, !prof !3", llvm_type: "void" } }
IF HAS NODE "bb6"
TEST 123 "  %_10.1 = extractvalue { i32, i1 } %2, 1"
IF HAS TARGET VAL false
IF HAS TARGET VAL VAR false
IF HAS SWITCH VAR %_10.1
IF HAS DISCRIMINANT IntValue(IntValue { int_value: Value { name: "_10.1", address: 0x55add2979420, is_const: false, is_null: false, is_undef: false, llvm_value: "  %_10.1 = extractvalue { i32, i1 } %2, 1", llvm_type: "i1" } })
IF HAS ENTRY CONDITION (= %_10.1 false)
TEST 123 "  %_10.1 = extractvalue { i32, i1 } %2, 1"
TEST 123 "  %2 = call { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %x_mut.0, i32 1)"
TEST 123 "  %_10.0 = extractvalue { i32, i1 } %2, 0"
TEST 123 "  %2 = call { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %x_mut.0, i32 1)"
TEST 123 "  %x_mut.0 = phi i32 [ %0, %start ], [ %_5.0, %bb1 ]"
TEST 123 "i32 1"
TEST 123 "  %2 = call { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %x_mut.0, i32 1)"
TEST 123 "  %2 = call { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %x_mut.0, i32 1)"
IF HAS NUM OPERANDS 3
IF HAS TERMINATOR InstructionValue { instruction_value: Value { name: "", address: 0x55add2978d30, is_const: false, is_null: false, is_undef: false, llvm_value: "  br i1 %_6, label %bb4, label %bb5", llvm_type: "void" } }
IF HAS NODE "bb5"
TEST 123 "  %_6 = xor i1 %_7, true"
IF HAS TARGET VAL false
IF HAS TARGET VAL VAR false
IF HAS SWITCH VAR %_6
IF HAS DISCRIMINANT IntValue(IntValue { int_value: Value { name: "_6", address: 0x55add2978c80, is_const: false, is_null: false, is_undef: false, llvm_value: "  %_6 = xor i1 %_7, true", llvm_type: "i1" } })
IF HAS ENTRY CONDITION (= %_6 false)
IF HAS NUM OPERANDS 3
IF HAS TERMINATOR InstructionValue { instruction_value: Value { name: "", address: 0x55add2978d30, is_const: false, is_null: false, is_undef: false, llvm_value: "  br i1 %_6, label %bb4, label %bb5", llvm_type: "void" } }
IF HAS NODE "bb4"
TEST 123 "  %_6 = xor i1 %_7, true"
IF HAS TARGET VAL true
IF HAS TARGET VAL VAR true
IF HAS SWITCH VAR %_6
IF HAS DISCRIMINANT IntValue(IntValue { int_value: Value { name: "_6", address: 0x55add2978c80, is_const: false, is_null: false, is_undef: false, llvm_value: "  %_6 = xor i1 %_7, true", llvm_type: "i1" } })
IF HAS ENTRY CONDITION (= %_6 true)
IF HAS NUM OPERANDS 3
IF HAS TERMINATOR InstructionValue { instruction_value: Value { name: "", address: 0x55add2978d30, is_const: false, is_null: false, is_undef: false, llvm_value: "  br i1 %_6, label %bb4, label %bb5", llvm_type: "void" } }
IF HAS NODE "bb5"
TEST 123 "  %_6 = xor i1 %_7, true"
IF HAS TARGET VAL false
IF HAS TARGET VAL VAR false
IF HAS SWITCH VAR %_6
IF HAS DISCRIMINANT IntValue(IntValue { int_value: Value { name: "_6", address: 0x55add2978c80, is_const: false, is_null: false, is_undef: false, llvm_value: "  %_6 = xor i1 %_7, true", llvm_type: "i1" } })
IF HAS ENTRY CONDITION (= %_6 false)
TEST 123 "  %_7 = icmp sle i32 %x_mut.0, 0"
TEST 123 "i1 true"
TEST 123 "  %_6 = xor i1 %_7, true"
TEST 123 "  %_7 = icmp sle i32 %x_mut.0, 0"
TEST 123 "  %x_mut.0 = phi i32 [ %0, %start ], [ %_5.0, %bb1 ]"
TEST 123 "i32 0"
IF HAS NUM OPERANDS 3
IF HAS TERMINATOR InstructionValue { instruction_value: Value { name: "", address: 0x55add29790f0, is_const: false, is_null: false, is_undef: false, llvm_value: "  br i1 %_5.1, label %panic, label %bb3, !prof !3", llvm_type: "void" } }
IF HAS NODE "bb3"
TEST 123 "  %_5.1 = extractvalue { i32, i1 } %1, 1"
IF HAS TARGET VAL false
IF HAS TARGET VAL VAR false
IF HAS SWITCH VAR %_5.1
IF HAS DISCRIMINANT IntValue(IntValue { int_value: Value { name: "_5.1", address: 0x55add2978f60, is_const: false, is_null: false, is_undef: false, llvm_value: "  %_5.1 = extractvalue { i32, i1 } %1, 1", llvm_type: "i1" } })
IF HAS ENTRY CONDITION (= %_5.1 false)
IF HAS NUM OPERANDS 3
IF HAS TERMINATOR InstructionValue { instruction_value: Value { name: "", address: 0x55add2978af0, is_const: false, is_null: false, is_undef: false, llvm_value: "  br i1 %_2, label %bb1, label %bb3", llvm_type: "void" } }
IF HAS NODE "bb3"
TEST 123 "  %_2 = icmp sgt i32 %0, 0"
IF HAS TARGET VAL false
IF HAS TARGET VAL VAR false
IF HAS SWITCH VAR %_2
IF HAS DISCRIMINANT IntValue(IntValue { int_value: Value { name: "_2", address: 0x55add2978a40, is_const: false, is_null: false, is_undef: false, llvm_value: "  %_2 = icmp sgt i32 %0, 0", llvm_type: "i1" } })
IF HAS ENTRY CONDITION (= %_2 false)
[2mJan 15 20:18:34.538[0m [34mDEBUG[0m wombat_symx: Unsupported Call function "_ZN4core9panicking5panic17h4241c5ccea17facaE"
IF HAS NUM OPERANDS 3
IF HAS TERMINATOR InstructionValue { instruction_value: Value { name: "", address: 0x55add29790f0, is_const: false, is_null: false, is_undef: false, llvm_value: "  br i1 %_5.1, label %panic, label %bb3, !prof !3", llvm_type: "void" } }
IF HAS NODE "panic"
TEST 123 "  %_5.1 = extractvalue { i32, i1 } %1, 1"
IF HAS TARGET VAL true
IF HAS TARGET VAL VAR true
IF HAS SWITCH VAR %_5.1
IF HAS DISCRIMINANT IntValue(IntValue { int_value: Value { name: "_5.1", address: 0x55add2978f60, is_const: false, is_null: false, is_undef: false, llvm_value: "  %_5.1 = extractvalue { i32, i1 } %1, 1", llvm_type: "i1" } })
IF HAS ENTRY CONDITION (= %_5.1 true)
IF HAS NUM OPERANDS 3
IF HAS TERMINATOR InstructionValue { instruction_value: Value { name: "", address: 0x55add29790f0, is_const: false, is_null: false, is_undef: false, llvm_value: "  br i1 %_5.1, label %panic, label %bb3, !prof !3", llvm_type: "void" } }
IF HAS NODE "bb3"
TEST 123 "  %_5.1 = extractvalue { i32, i1 } %1, 1"
IF HAS TARGET VAL false
IF HAS TARGET VAL VAR false
IF HAS SWITCH VAR %_5.1
IF HAS DISCRIMINANT IntValue(IntValue { int_value: Value { name: "_5.1", address: 0x55add2978f60, is_const: false, is_null: false, is_undef: false, llvm_value: "  %_5.1 = extractvalue { i32, i1 } %1, 1", llvm_type: "i1" } })
IF HAS ENTRY CONDITION (= %_5.1 false)
TEST 123 "  %x_mut.0 = phi i32 [ %0, %start ], [ %_5.0, %bb1 ]"
TEST 123 "  %_5.0 = extractvalue { i32, i1 } %1, 0"
IF HAS NUM OPERANDS 3
IF HAS TERMINATOR InstructionValue { instruction_value: Value { name: "", address: 0x55add29790f0, is_const: false, is_null: false, is_undef: false, llvm_value: "  br i1 %_5.1, label %panic, label %bb3, !prof !3", llvm_type: "void" } }
IF HAS NODE "panic"
TEST 123 "  %_5.1 = extractvalue { i32, i1 } %1, 1"
IF HAS TARGET VAL true
IF HAS TARGET VAL VAR true
IF HAS SWITCH VAR %_5.1
IF HAS DISCRIMINANT IntValue(IntValue { int_value: Value { name: "_5.1", address: 0x55add2978f60, is_const: false, is_null: false, is_undef: false, llvm_value: "  %_5.1 = extractvalue { i32, i1 } %1, 1", llvm_type: "i1" } })
IF HAS ENTRY CONDITION (= %_5.1 true)
TEST 123 "  %_5.1 = extractvalue { i32, i1 } %1, 1"
TEST 123 "  %1 = call { i32, i1 } @llvm.smul.with.overflow.i32(i32 -1, i32 %0)"
TEST 123 "  %_5.0 = extractvalue { i32, i1 } %1, 0"
TEST 123 "  %1 = call { i32, i1 } @llvm.smul.with.overflow.i32(i32 -1, i32 %0)"
TEST 123 "i32 -1"
TEST 123 "i32 %0"
TEST 123 "  %1 = call { i32, i1 } @llvm.smul.with.overflow.i32(i32 -1, i32 %0)"
TEST 123 "  %1 = call { i32, i1 } @llvm.smul.with.overflow.i32(i32 -1, i32 %0)"
IF HAS NUM OPERANDS 3
IF HAS TERMINATOR InstructionValue { instruction_value: Value { name: "", address: 0x55add2978af0, is_const: false, is_null: false, is_undef: false, llvm_value: "  br i1 %_2, label %bb1, label %bb3", llvm_type: "void" } }
IF HAS NODE "bb1"
TEST 123 "  %_2 = icmp sgt i32 %0, 0"
IF HAS TARGET VAL true
IF HAS TARGET VAL VAR true
IF HAS SWITCH VAR %_2
IF HAS DISCRIMINANT IntValue(IntValue { int_value: Value { name: "_2", address: 0x55add2978a40, is_const: false, is_null: false, is_undef: false, llvm_value: "  %_2 = icmp sgt i32 %0, 0", llvm_type: "i1" } })
IF HAS ENTRY CONDITION (= %_2 true)
IF HAS NUM OPERANDS 3
IF HAS TERMINATOR InstructionValue { instruction_value: Value { name: "", address: 0x55add2978af0, is_const: false, is_null: false, is_undef: false, llvm_value: "  br i1 %_2, label %bb1, label %bb3", llvm_type: "void" } }
IF HAS NODE "bb3"
TEST 123 "  %_2 = icmp sgt i32 %0, 0"
IF HAS TARGET VAL false
IF HAS TARGET VAL VAR false
IF HAS SWITCH VAR %_2
IF HAS DISCRIMINANT IntValue(IntValue { int_value: Value { name: "_2", address: 0x55add2978a40, is_const: false, is_null: false, is_undef: false, llvm_value: "  %_2 = icmp sgt i32 %0, 0", llvm_type: "i1" } })
IF HAS ENTRY CONDITION (= %_2 false)
TEST 123 "  %x_mut.0 = phi i32 [ %0, %start ], [ %_5.0, %bb1 ]"
TEST 123 "i32 %0"
IF HAS NUM OPERANDS 3
IF HAS TERMINATOR InstructionValue { instruction_value: Value { name: "", address: 0x55add2978af0, is_const: false, is_null: false, is_undef: false, llvm_value: "  br i1 %_2, label %bb1, label %bb3", llvm_type: "void" } }
IF HAS NODE "bb1"
TEST 123 "  %_2 = icmp sgt i32 %0, 0"
IF HAS TARGET VAL true
IF HAS TARGET VAL VAR true
IF HAS SWITCH VAR %_2
IF HAS DISCRIMINANT IntValue(IntValue { int_value: Value { name: "_2", address: 0x55add2978a40, is_const: false, is_null: false, is_undef: false, llvm_value: "  %_2 = icmp sgt i32 %0, 0", llvm_type: "i1" } })
IF HAS ENTRY CONDITION (= %_2 true)
TEST 123 "  %_2 = icmp sgt i32 %0, 0"
TEST 123 "i32 %0"
TEST 123 "i32 0"
TEST 123 "i32 %0"
[2mJan 15 20:18:34.541[0m [34mDEBUG[0m wombat_symx: (declare-fun panic_var () Bool)
(declare-fun common_end () Bool)
(declare-fun %_10.1 () Bool)
(declare-fun panic1 () Bool)
(declare-fun bb6 () Bool)
(declare-fun %_6 () Bool)
(declare-fun bb4 () Bool)
(declare-fun const_1 () Int)
(declare-fun %2.1 () Bool)
(declare-fun %2.0 () Int)
(declare-fun %_10.0 () Int)
(declare-fun %x_mut.0 () Int)
(declare-fun bb5 () Bool)
(declare-fun const_true () Bool)
(declare-fun const_0 () Int)
(declare-fun %_7 () Bool)
(declare-fun %_2 () Bool)
(declare-fun %_5.1 () Bool)
(declare-fun bb3 () Bool)
(declare-fun panic () Bool)
(declare-fun const_-1 () Int)
(declare-fun %_5.0 () Int)
(declare-fun %1.1 () Bool)
(declare-fun %1.0 () Int)
(declare-fun %0 () Int)
(declare-fun bb1 () Bool)
(declare-fun start () Bool)
(assert (= common_end (=> (and true true true true true) (and (not panic_var) true))))
(assert (= panic1
   (=> (and true (= %_10.1 true)) (=> (= panic_var true) (and true common_end)))))
(assert (= bb6
   (=> (and true (= %_10.1 false))
       (=> (= panic_var false) (and true common_end)))))
(assert (= bb4
   (=> (and true (= %_6 true)) (=> (= panic_var true) (and true common_end)))))
(assert (= const_1 1))
(assert (let ((a!1 (> (- %x_mut.0 const_1)
              (ite (bvslt #x7fffffff #x00000000)
                   (- (bv2int #x7fffffff) 4294967296)
                   (bv2int #x7fffffff))))
      (a!2 (< (- %x_mut.0 const_1)
              (ite (bvslt #x80000000 #x00000000)
                   (- (bv2int #x80000000) 4294967296)
                   (bv2int #x80000000)))))
(let ((a!3 (=> (and (= %2.0 (- %x_mut.0 const_1)) (= %2.1 (or a!1 a!2)))
               (=> (= %_10.0 %2.0) (=> (= %_10.1 %2.1) (and true panic1 bb6))))))
  (= bb5 (=> (and true (= %_6 false)) a!3)))))
(assert (= const_true true))
(assert (= const_0 0))
(assert (let ((a!1 (=> (= %_7 (<= %x_mut.0 const_0))
               (=> (= %_6 (xor %_7 const_true)) (and true bb4 bb5)))))
  (= bb3 (=> (and true (= %_5.1 false) (= %_2 false)) a!1))))
(assert (= panic
   (=> (and true (= %_5.1 true)) (=> (= panic_var true) (and true common_end)))))
(assert (= const_-1 (- 1)))
(assert (let ((a!1 (> (* const_-1 %0)
              (ite (bvslt #x7fffffff #x00000000)
                   (- (bv2int #x7fffffff) 4294967296)
                   (bv2int #x7fffffff))))
      (a!2 (< (* const_-1 %0)
              (ite (bvslt #x80000000 #x00000000)
                   (- (bv2int #x80000000) 4294967296)
                   (bv2int #x80000000))))
      (a!3 (=> (= %_5.1 %1.1)
               (=> (=> (= %_5.1 false) (= %x_mut.0 %_5.0)) (and true bb3 panic)))))
(let ((a!4 (=> (and (= %1.0 (* const_-1 %0)) (= %1.1 (or a!1 a!2)))
               (=> (= %_5.0 %1.0) a!3))))
  (= bb1 (=> (and true (= %_2 true)) a!4)))))
(assert (= const_0 0))
(assert (let ((a!1 (=> (= %_2 (> %0 const_0))
               (=> (=> (= %_2 false) (= %x_mut.0 %0)) (and true bb3 bb1)))))
  (= start (=> true a!1))))
(assert (let ((a!1 (>= %0
               (ite (bvslt #x80000000 #x00000000)
                    (- (bv2int #x80000000) 4294967296)
                    (bv2int #x80000000))))
      (a!2 (<= %0
               (ite (bvslt #x7fffffff #x00000000)
                    (- (bv2int #x7fffffff) 4294967296)
                    (bv2int #x7fffffff)))))
  (and a!1 a!2)))
(assert (not start))


Function safety: unsafe
[2mJan 15 20:18:34.673[0m [34mDEBUG[0m wombat_symx: 
%_7 -> true
%_6 -> false
bb6 -> true
panic1 -> false
bb4 -> true
panic -> true
%_10.1 -> true
%1.1 -> false
const_1 -> 1
common_end -> false
bb3 -> false
const_0 -> 0
bb1 -> true
const_-1 -> (- 1)
%_5.1 -> false
start -> false
%_10.0 -> (- 2147483649)
bb5 -> false
%2.0 -> (- 2147483649)
const_true -> true
%_2 -> false
panic_var -> true
%2.1 -> true
%1.0 -> 1877552521
%0 -> (- 2147483648)
%_5.0 -> 1877552521
%x_mut.0 -> (- 2147483648)


Argument values:
	"x_mut" = (- 2147483648)

************************************


[2mJan 15 20:18:34.682[0m [34mDEBUG[0m wombat_symx: Func param instr: IntValue { int_value: Value { name: "", address: 0x55add29745a0, is_const: false, is_null: false, is_undef: false, llvm_value: "i32 %0", llvm_type: "i32" } }
TEST 123 "i32 %0"
TEST 123 "  store i32 %0, i32* %x_mut, align 4"
TEST 123 "  %x_mut = alloca i32, align 4"
TEST 123 "  store i32 %1, i32* %y_mut, align 4"
[2mJan 15 20:18:34.723[0m [34mDEBUG[0m wombat_symx: Func param instr: IntValue { int_value: Value { name: "", address: 0x55add29745c8, is_const: false, is_null: false, is_undef: false, llvm_value: "i32 %1", llvm_type: "i32" } }
TEST 123 "i32 %1"
TEST 123 "  store i32 %0, i32* %x_mut, align 4"
TEST 123 "  store i32 %1, i32* %y_mut, align 4"
TEST 123 "  %y_mut = alloca i32, align 4"
[2mJan 15 20:18:34.760[0m [34mDEBUG[0m wombat_symx: Func param instr: IntValue { int_value: Value { name: "z_non_mut", address: 0x55add29745f0, is_const: false, is_null: false, is_undef: false, llvm_value: "i32 %z_non_mut", llvm_type: "i32" } }
[2mJan 15 20:18:34.760[0m [34mDEBUG[0m wombat_symx: Function arg names: {"y_mut": "%1", "z_non_mut": "%z_non_mut", "x_mut": "%0"}
Backward Symbolic Execution in hello_world::func_names::h1658d77b559ee756
[2mJan 15 20:18:34.761[0m [34mDEBUG[0m wombat_symx: Number of Nodes: 15
[2mJan 15 20:18:34.761[0m [34mDEBUG[0m wombat_symx: Arg count: 3
[2mJan 15 20:18:34.761[0m [34mDEBUG[0m wombat_symx: Basic Blocks:
[2mJan 15 20:18:34.761[0m [34mDEBUG[0m wombat_symx: 	Basic Block: "start"
[2mJan 15 20:18:34.761[0m [34mDEBUG[0m wombat_symx: 		is_cleanup: NO
[2mJan 15 20:18:34.761[0m [34mDEBUG[0m wombat_symx: 		Statement: "\"  %_4 = icmp sgt i32 %0, 0\""
[2mJan 15 20:18:34.761[0m [34mDEBUG[0m wombat_symx: 		Statement: "\"  br i1 %_4, label %bb1, label %bb3\""
[2mJan 15 20:18:34.761[0m [34mDEBUG[0m wombat_symx: 		Last statement is a terminator
[2mJan 15 20:18:34.761[0m [34mDEBUG[0m wombat_symx: 	Basic Block: "bb3"
[2mJan 15 20:18:34.761[0m [34mDEBUG[0m wombat_symx: 		is_cleanup: NO
[2mJan 15 20:18:34.761[0m [34mDEBUG[0m wombat_symx: 		Statement: "\"  %x_mut.0 = phi i32 [ %0, %start ], [ %_7.0, %bb1 ]\""
[2mJan 15 20:18:34.761[0m [34mDEBUG[0m wombat_symx: 		Statement: "\"  %_8 = icmp sgt i32 %1, 0\""
[2mJan 15 20:18:34.761[0m [34mDEBUG[0m wombat_symx: 		Statement: "\"  br i1 %_8, label %bb4, label %bb6\""
[2mJan 15 20:18:34.761[0m [34mDEBUG[0m wombat_symx: 		Last statement is a terminator
[2mJan 15 20:18:34.761[0m [34mDEBUG[0m wombat_symx: 	Basic Block: "bb1"
[2mJan 15 20:18:34.761[0m [34mDEBUG[0m wombat_symx: 		is_cleanup: NO
[2mJan 15 20:18:34.761[0m [34mDEBUG[0m wombat_symx: 		Statement: "\"  %2 = call { i32, i1 } @llvm.smul.with.overflow.i32(i32 -1, i32 %0)\""
[2mJan 15 20:18:34.761[0m [34mDEBUG[0m wombat_symx: 		Statement: "\"  %_7.0 = extractvalue { i32, i1 } %2, 0\""
[2mJan 15 20:18:34.761[0m [34mDEBUG[0m wombat_symx: 		Statement: "\"  %_7.1 = extractvalue { i32, i1 } %2, 1\""
[2mJan 15 20:18:34.761[0m [34mDEBUG[0m wombat_symx: 		Statement: "\"  br i1 %_7.1, label %panic, label %bb3, !prof !3\""
[2mJan 15 20:18:34.761[0m [34mDEBUG[0m wombat_symx: 		Last statement is a terminator
[2mJan 15 20:18:34.761[0m [34mDEBUG[0m wombat_symx: 	Basic Block: "panic"
[2mJan 15 20:18:34.762[0m [34mDEBUG[0m wombat_symx: 		is_cleanup: YES
[2mJan 15 20:18:34.762[0m [34mDEBUG[0m wombat_symx: 		Statement: "\"  call void @_ZN4core9panicking5panic17h4241c5ccea17facaE([0 x i8]* noundef nonnull align 1 bitcast ([33 x i8]* @str.0 to [0 x i8]*), i64 33, %\\\"core::panic::location::Location\\\"* noundef align 8 dereferenceable(24) bitcast (<{ i8*, [16 x i8] }>* @alloc48 to %\\\"core::panic::location::Location\\\"*)) #7\""
[2mJan 15 20:18:34.762[0m [34mDEBUG[0m wombat_symx: 		Statement: "\"  unreachable\""
[2mJan 15 20:18:34.762[0m [34mDEBUG[0m wombat_symx: 		Last statement is a terminator
[2mJan 15 20:18:34.762[0m [34mDEBUG[0m wombat_symx: 	Basic Block: "bb6"
[2mJan 15 20:18:34.762[0m [34mDEBUG[0m wombat_symx: 		is_cleanup: NO
[2mJan 15 20:18:34.762[0m [34mDEBUG[0m wombat_symx: 		Statement: "\"  %y_mut.0 = phi i32 [ %1, %bb3 ], [ %_11.0, %bb4 ]\""
[2mJan 15 20:18:34.762[0m [34mDEBUG[0m wombat_symx: 		Statement: "\"  %_13 = icmp sle i32 %x_mut.0, 0\""
[2mJan 15 20:18:34.762[0m [34mDEBUG[0m wombat_symx: 		Statement: "\"  %_12 = xor i1 %_13, true\""
[2mJan 15 20:18:34.762[0m [34mDEBUG[0m wombat_symx: 		Statement: "\"  br i1 %_12, label %bb7, label %bb8\""
[2mJan 15 20:18:34.762[0m [34mDEBUG[0m wombat_symx: 		Last statement is a terminator
[2mJan 15 20:18:34.762[0m [34mDEBUG[0m wombat_symx: 	Basic Block: "bb4"
[2mJan 15 20:18:34.762[0m [34mDEBUG[0m wombat_symx: 		is_cleanup: NO
[2mJan 15 20:18:34.762[0m [34mDEBUG[0m wombat_symx: 		Statement: "\"  %3 = call { i32, i1 } @llvm.smul.with.overflow.i32(i32 -1, i32 %1)\""
[2mJan 15 20:18:34.762[0m [34mDEBUG[0m wombat_symx: 		Statement: "\"  %_11.0 = extractvalue { i32, i1 } %3, 0\""
[2mJan 15 20:18:34.762[0m [34mDEBUG[0m wombat_symx: 		Statement: "\"  %_11.1 = extractvalue { i32, i1 } %3, 1\""
[2mJan 15 20:18:34.762[0m [34mDEBUG[0m wombat_symx: 		Statement: "\"  br i1 %_11.1, label %panic1, label %bb6, !prof !3\""
[2mJan 15 20:18:34.762[0m [34mDEBUG[0m wombat_symx: 		Last statement is a terminator
[2mJan 15 20:18:34.762[0m [34mDEBUG[0m wombat_symx: 	Basic Block: "panic1"
[2mJan 15 20:18:34.762[0m [34mDEBUG[0m wombat_symx: 		is_cleanup: YES
[2mJan 15 20:18:34.762[0m [34mDEBUG[0m wombat_symx: 		Statement: "\"  call void @_ZN4core9panicking5panic17h4241c5ccea17facaE([0 x i8]* noundef nonnull align 1 bitcast ([33 x i8]* @str.0 to [0 x i8]*), i64 33, %\\\"core::panic::location::Location\\\"* noundef align 8 dereferenceable(24) bitcast (<{ i8*, [16 x i8] }>* @alloc50 to %\\\"core::panic::location::Location\\\"*)) #7\""
[2mJan 15 20:18:34.762[0m [34mDEBUG[0m wombat_symx: 		Statement: "\"  unreachable\""
[2mJan 15 20:18:34.762[0m [34mDEBUG[0m wombat_symx: 		Last statement is a terminator
[2mJan 15 20:18:34.762[0m [34mDEBUG[0m wombat_symx: 	Basic Block: "bb8"
[2mJan 15 20:18:34.762[0m [34mDEBUG[0m wombat_symx: 		is_cleanup: NO
[2mJan 15 20:18:34.762[0m [34mDEBUG[0m wombat_symx: 		Statement: "\"  %_16 = icmp sle i32 %y_mut.0, 0\""
[2mJan 15 20:18:34.762[0m [34mDEBUG[0m wombat_symx: 		Statement: "\"  %_15 = xor i1 %_16, true\""
[2mJan 15 20:18:34.763[0m [34mDEBUG[0m wombat_symx: 		Statement: "\"  br i1 %_15, label %bb9, label %bb10\""
[2mJan 15 20:18:34.763[0m [34mDEBUG[0m wombat_symx: 		Last statement is a terminator
[2mJan 15 20:18:34.763[0m [34mDEBUG[0m wombat_symx: 	Basic Block: "bb7"
[2mJan 15 20:18:34.763[0m [34mDEBUG[0m wombat_symx: 		is_cleanup: YES
[2mJan 15 20:18:34.763[0m [34mDEBUG[0m wombat_symx: 		Statement: "\"  call void @_ZN4core9panicking5panic17h4241c5ccea17facaE([0 x i8]* noundef nonnull align 1 bitcast (<{ [28 x i8] }>* @alloc51 to [0 x i8]*), i64 28, %\\\"core::panic::location::Location\\\"* noundef align 8 dereferenceable(24) bitcast (<{ i8*, [16 x i8] }>* @alloc53 to %\\\"core::panic::location::Location\\\"*)) #7\""
[2mJan 15 20:18:34.763[0m [34mDEBUG[0m wombat_symx: 		Statement: "\"  unreachable\""
[2mJan 15 20:18:34.763[0m [34mDEBUG[0m wombat_symx: 		Last statement is a terminator
[2mJan 15 20:18:34.763[0m [34mDEBUG[0m wombat_symx: 	Basic Block: "bb10"
[2mJan 15 20:18:34.763[0m [34mDEBUG[0m wombat_symx: 		is_cleanup: NO
[2mJan 15 20:18:34.763[0m [34mDEBUG[0m wombat_symx: 		Statement: "\"  %4 = call { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %x_mut.0, i32 %z_non_mut)\""
[2mJan 15 20:18:34.763[0m [34mDEBUG[0m wombat_symx: 		Statement: "\"  %_21.0 = extractvalue { i32, i1 } %4, 0\""
[2mJan 15 20:18:34.763[0m [34mDEBUG[0m wombat_symx: 		Statement: "\"  %_21.1 = extractvalue { i32, i1 } %4, 1\""
[2mJan 15 20:18:34.763[0m [34mDEBUG[0m wombat_symx: 		Statement: "\"  br i1 %_21.1, label %panic2, label %bb11, !prof !3\""
[2mJan 15 20:18:34.763[0m [34mDEBUG[0m wombat_symx: 		Last statement is a terminator
[2mJan 15 20:18:34.763[0m [34mDEBUG[0m wombat_symx: 	Basic Block: "bb9"
[2mJan 15 20:18:34.763[0m [34mDEBUG[0m wombat_symx: 		is_cleanup: YES
[2mJan 15 20:18:34.763[0m [34mDEBUG[0m wombat_symx: 		Statement: "\"  call void @_ZN4core9panicking5panic17h4241c5ccea17facaE([0 x i8]* noundef nonnull align 1 bitcast (<{ [28 x i8] }>* @alloc54 to [0 x i8]*), i64 28, %\\\"core::panic::location::Location\\\"* noundef align 8 dereferenceable(24) bitcast (<{ i8*, [16 x i8] }>* @alloc56 to %\\\"core::panic::location::Location\\\"*)) #7\""
[2mJan 15 20:18:34.763[0m [34mDEBUG[0m wombat_symx: 		Statement: "\"  unreachable\""
[2mJan 15 20:18:34.763[0m [34mDEBUG[0m wombat_symx: 		Last statement is a terminator
[2mJan 15 20:18:34.763[0m [34mDEBUG[0m wombat_symx: 	Basic Block: "bb11"
[2mJan 15 20:18:34.763[0m [34mDEBUG[0m wombat_symx: 		is_cleanup: NO
[2mJan 15 20:18:34.763[0m [34mDEBUG[0m wombat_symx: 		Statement: "\"  %5 = call { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %_21.0, i32 %y_mut.0)\""
[2mJan 15 20:18:34.763[0m [34mDEBUG[0m wombat_symx: 		Statement: "\"  %_23.0 = extractvalue { i32, i1 } %5, 0\""
[2mJan 15 20:18:34.763[0m [34mDEBUG[0m wombat_symx: 		Statement: "\"  %_23.1 = extractvalue { i32, i1 } %5, 1\""
[2mJan 15 20:18:34.763[0m [34mDEBUG[0m wombat_symx: 		Statement: "\"  br i1 %_23.1, label %panic3, label %bb12, !prof !3\""
[2mJan 15 20:18:34.763[0m [34mDEBUG[0m wombat_symx: 		Last statement is a terminator
[2mJan 15 20:18:34.763[0m [34mDEBUG[0m wombat_symx: 	Basic Block: "panic2"
[2mJan 15 20:18:34.763[0m [34mDEBUG[0m wombat_symx: 		is_cleanup: YES
[2mJan 15 20:18:34.763[0m [34mDEBUG[0m wombat_symx: 		Statement: "\"  call void @_ZN4core9panicking5panic17h4241c5ccea17facaE([0 x i8]* noundef nonnull align 1 bitcast ([28 x i8]* @str.2 to [0 x i8]*), i64 28, %\\\"core::panic::location::Location\\\"* noundef align 8 dereferenceable(24) bitcast (<{ i8*, [16 x i8] }>* @alloc58 to %\\\"core::panic::location::Location\\\"*)) #7\""
[2mJan 15 20:18:34.763[0m [34mDEBUG[0m wombat_symx: 		Statement: "\"  unreachable\""
[2mJan 15 20:18:34.764[0m [34mDEBUG[0m wombat_symx: 		Last statement is a terminator
[2mJan 15 20:18:34.764[0m [34mDEBUG[0m wombat_symx: 	Basic Block: "bb12"
[2mJan 15 20:18:34.764[0m [34mDEBUG[0m wombat_symx: 		is_cleanup: NO
[2mJan 15 20:18:34.764[0m [34mDEBUG[0m wombat_symx: 		Statement: "\"  ret i32 %_23.0\""
[2mJan 15 20:18:34.764[0m [34mDEBUG[0m wombat_symx: 		Last statement is a terminator
[2mJan 15 20:18:34.764[0m [34mDEBUG[0m wombat_symx: 	Basic Block: "panic3"
[2mJan 15 20:18:34.764[0m [34mDEBUG[0m wombat_symx: 		is_cleanup: YES
[2mJan 15 20:18:34.764[0m [34mDEBUG[0m wombat_symx: 		Statement: "\"  call void @_ZN4core9panicking5panic17h4241c5ccea17facaE([0 x i8]* noundef nonnull align 1 bitcast ([28 x i8]* @str.2 to [0 x i8]*), i64 28, %\\\"core::panic::location::Location\\\"* noundef align 8 dereferenceable(24) bitcast (<{ i8*, [16 x i8] }>* @alloc58 to %\\\"core::panic::location::Location\\\"*)) #7\""
[2mJan 15 20:18:34.764[0m [34mDEBUG[0m wombat_symx: 		Statement: "\"  unreachable\""
[2mJan 15 20:18:34.764[0m [34mDEBUG[0m wombat_symx: 		Last statement is a terminator
[2mJan 15 20:18:34.764[0m [34mDEBUG[0m wombat_symx: 
[2mJan 15 20:18:34.764[0m [34mDEBUG[0m wombat_symx: Start node: "start"
IF STATEMENT
terminator is InstructionValue { instruction_value: Value { name: "", address: 0x55add297a7f0, is_const: false, is_null: false, is_undef: false, llvm_value: "  br i1 %_4, label %bb1, label %bb3", llvm_type: "void" } }
Operand 0 is Some(Left(IntValue(IntValue { int_value: Value { name: "_4", address: 0x55add297a740, is_const: false, is_null: false, is_undef: false, llvm_value: "  %_4 = icmp sgt i32 %0, 0", llvm_type: "i1" } })))
Operand 1 is Some(Right(BasicBlock { address: 0x55add29797f0, is_const: false, llvm_value: "\nbb3:                                              ; preds = %bb1, %start\n  %x_mut.0 = phi i32 [ %0, %start ], [ %_7.0, %bb1 ]\n  %_8 = icmp sgt i32 %1, 0\n  br i1 %_8, label %bb4, label %bb6\n", llvm_type: "label" }))
Operand 2 is Some(Right(BasicBlock { address: 0x55add2979dd0, is_const: false, llvm_value: "\nbb1:                                              ; preds = %start\n  %2 = call { i32, i1 } @llvm.smul.with.overflow.i32(i32 -1, i32 %0)\n  %_7.0 = extractvalue { i32, i1 } %2, 0\n  %_7.1 = extractvalue { i32, i1 } %2, 1\n  br i1 %_7.1, label %panic, label %bb3, !prof !3\n", llvm_type: "label" }))
IF STATEMENT
terminator is InstructionValue { instruction_value: Value { name: "", address: 0x55add297a9a0, is_const: false, is_null: false, is_undef: false, llvm_value: "  br i1 %_8, label %bb4, label %bb6", llvm_type: "void" } }
Operand 0 is Some(Left(IntValue(IntValue { int_value: Value { name: "_8", address: 0x55add297a8f0, is_const: false, is_null: false, is_undef: false, llvm_value: "  %_8 = icmp sgt i32 %1, 0", llvm_type: "i1" } })))
Operand 1 is Some(Right(BasicBlock { address: 0x55add2979ec0, is_const: false, llvm_value: "\nbb6:                                              ; preds = %bb4, %bb3\n  %y_mut.0 = phi i32 [ %1, %bb3 ], [ %_11.0, %bb4 ]\n  %_13 = icmp sle i32 %x_mut.0, 0\n  %_12 = xor i1 %_13, true\n  br i1 %_12, label %bb7, label %bb8\n", llvm_type: "label" }))
Operand 2 is Some(Right(BasicBlock { address: 0x55add2979f10, is_const: false, llvm_value: "\nbb4:                                              ; preds = %bb3\n  %3 = call { i32, i1 } @llvm.smul.with.overflow.i32(i32 -1, i32 %1)\n  %_11.0 = extractvalue { i32, i1 } %3, 0\n  %_11.1 = extractvalue { i32, i1 } %3, 1\n  br i1 %_11.1, label %panic1, label %bb6, !prof !3\n", llvm_type: "label" }))
IF STATEMENT
terminator is InstructionValue { instruction_value: Value { name: "", address: 0x55add297ad60, is_const: false, is_null: false, is_undef: false, llvm_value: "  br i1 %_7.1, label %panic, label %bb3, !prof !3", llvm_type: "void" } }
Operand 0 is Some(Left(IntValue(IntValue { int_value: Value { name: "_7.1", address: 0x55add297abd0, is_const: false, is_null: false, is_undef: false, llvm_value: "  %_7.1 = extractvalue { i32, i1 } %2, 1", llvm_type: "i1" } })))
Operand 1 is Some(Right(BasicBlock { address: 0x55add29797f0, is_const: false, llvm_value: "\nbb3:                                              ; preds = %bb1, %start\n  %x_mut.0 = phi i32 [ %0, %start ], [ %_7.0, %bb1 ]\n  %_8 = icmp sgt i32 %1, 0\n  br i1 %_8, label %bb4, label %bb6\n", llvm_type: "label" }))
Operand 2 is Some(Right(BasicBlock { address: 0x55add2979e70, is_const: false, llvm_value: "\npanic:                                            ; preds = %bb1\n  call void @_ZN4core9panicking5panic17h4241c5ccea17facaE([0 x i8]* noundef nonnull align 1 bitcast ([33 x i8]* @str.0 to [0 x i8]*), i64 33, %\"core::panic::location::Location\"* noundef align 8 dereferenceable(24) bitcast (<{ i8*, [16 x i8] }>* @alloc48 to %\"core::panic::location::Location\"*)) #7\n  unreachable\n", llvm_type: "label" }))
IF STATEMENT
terminator is InstructionValue { instruction_value: Value { name: "", address: 0x55add297b0a0, is_const: false, is_null: false, is_undef: false, llvm_value: "  br i1 %_12, label %bb7, label %bb8", llvm_type: "void" } }
Operand 0 is Some(Left(IntValue(IntValue { int_value: Value { name: "_12", address: 0x55add297aff0, is_const: false, is_null: false, is_undef: false, llvm_value: "  %_12 = xor i1 %_13, true", llvm_type: "i1" } })))
Operand 1 is Some(Right(BasicBlock { address: 0x55add297a000, is_const: false, llvm_value: "\nbb8:                                              ; preds = %bb6\n  %_16 = icmp sle i32 %y_mut.0, 0\n  %_15 = xor i1 %_16, true\n  br i1 %_15, label %bb9, label %bb10\n", llvm_type: "label" }))
Operand 2 is Some(Right(BasicBlock { address: 0x55add297a050, is_const: false, llvm_value: "\nbb7:                                              ; preds = %bb6\n  call void @_ZN4core9panicking5panic17h4241c5ccea17facaE([0 x i8]* noundef nonnull align 1 bitcast (<{ [28 x i8] }>* @alloc51 to [0 x i8]*), i64 28, %\"core::panic::location::Location\"* noundef align 8 dereferenceable(24) bitcast (<{ i8*, [16 x i8] }>* @alloc53 to %\"core::panic::location::Location\"*)) #7\n  unreachable\n", llvm_type: "label" }))
IF STATEMENT
terminator is InstructionValue { instruction_value: Value { name: "", address: 0x55add297b460, is_const: false, is_null: false, is_undef: false, llvm_value: "  br i1 %_11.1, label %panic1, label %bb6, !prof !3", llvm_type: "void" } }
Operand 0 is Some(Left(IntValue(IntValue { int_value: Value { name: "_11.1", address: 0x55add297b2d0, is_const: false, is_null: false, is_undef: false, llvm_value: "  %_11.1 = extractvalue { i32, i1 } %3, 1", llvm_type: "i1" } })))
Operand 1 is Some(Right(BasicBlock { address: 0x55add2979ec0, is_const: false, llvm_value: "\nbb6:                                              ; preds = %bb4, %bb3\n  %y_mut.0 = phi i32 [ %1, %bb3 ], [ %_11.0, %bb4 ]\n  %_13 = icmp sle i32 %x_mut.0, 0\n  %_12 = xor i1 %_13, true\n  br i1 %_12, label %bb7, label %bb8\n", llvm_type: "label" }))
Operand 2 is Some(Right(BasicBlock { address: 0x55add2979fb0, is_const: false, llvm_value: "\npanic1:                                           ; preds = %bb4\n  call void @_ZN4core9panicking5panic17h4241c5ccea17facaE([0 x i8]* noundef nonnull align 1 bitcast ([33 x i8]* @str.0 to [0 x i8]*), i64 33, %\"core::panic::location::Location\"* noundef align 8 dereferenceable(24) bitcast (<{ i8*, [16 x i8] }>* @alloc50 to %\"core::panic::location::Location\"*)) #7\n  unreachable\n", llvm_type: "label" }))
IF STATEMENT
terminator is InstructionValue { instruction_value: Value { name: "", address: 0x55add297b8d0, is_const: false, is_null: false, is_undef: false, llvm_value: "  br i1 %_15, label %bb9, label %bb10", llvm_type: "void" } }
Operand 0 is Some(Left(IntValue(IntValue { int_value: Value { name: "_15", address: 0x55add297b820, is_const: false, is_null: false, is_undef: false, llvm_value: "  %_15 = xor i1 %_16, true", llvm_type: "i1" } })))
Operand 1 is Some(Right(BasicBlock { address: 0x55add297a0a0, is_const: false, llvm_value: "\nbb10:                                             ; preds = %bb8\n  %4 = call { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %x_mut.0, i32 %z_non_mut)\n  %_21.0 = extractvalue { i32, i1 } %4, 0\n  %_21.1 = extractvalue { i32, i1 } %4, 1\n  br i1 %_21.1, label %panic2, label %bb11, !prof !3\n", llvm_type: "label" }))
Operand 2 is Some(Right(BasicBlock { address: 0x55add297a0f0, is_const: false, llvm_value: "\nbb9:                                              ; preds = %bb8\n  call void @_ZN4core9panicking5panic17h4241c5ccea17facaE([0 x i8]* noundef nonnull align 1 bitcast (<{ [28 x i8] }>* @alloc54 to [0 x i8]*), i64 28, %\"core::panic::location::Location\"* noundef align 8 dereferenceable(24) bitcast (<{ i8*, [16 x i8] }>* @alloc56 to %\"core::panic::location::Location\"*)) #7\n  unreachable\n", llvm_type: "label" }))
IF STATEMENT
terminator is InstructionValue { instruction_value: Value { name: "", address: 0x55add297bdc0, is_const: false, is_null: false, is_undef: false, llvm_value: "  br i1 %_21.1, label %panic2, label %bb11, !prof !3", llvm_type: "void" } }
Operand 0 is Some(Left(IntValue(IntValue { int_value: Value { name: "_21.1", address: 0x55add297bc30, is_const: false, is_null: false, is_undef: false, llvm_value: "  %_21.1 = extractvalue { i32, i1 } %4, 1", llvm_type: "i1" } })))
Operand 1 is Some(Right(BasicBlock { address: 0x55add297a140, is_const: false, llvm_value: "\nbb11:                                             ; preds = %bb10\n  %5 = call { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %_21.0, i32 %y_mut.0)\n  %_23.0 = extractvalue { i32, i1 } %5, 0\n  %_23.1 = extractvalue { i32, i1 } %5, 1\n  br i1 %_23.1, label %panic3, label %bb12, !prof !3\n", llvm_type: "label" }))
Operand 2 is Some(Right(BasicBlock { address: 0x55add297a190, is_const: false, llvm_value: "\npanic2:                                           ; preds = %bb10\n  call void @_ZN4core9panicking5panic17h4241c5ccea17facaE([0 x i8]* noundef nonnull align 1 bitcast ([28 x i8]* @str.2 to [0 x i8]*), i64 28, %\"core::panic::location::Location\"* noundef align 8 dereferenceable(24) bitcast (<{ i8*, [16 x i8] }>* @alloc58 to %\"core::panic::location::Location\"*)) #7\n  unreachable\n", llvm_type: "label" }))
IF STATEMENT
terminator is InstructionValue { instruction_value: Value { name: "", address: 0x55add297c2b0, is_const: false, is_null: false, is_undef: false, llvm_value: "  br i1 %_23.1, label %panic3, label %bb12, !prof !3", llvm_type: "void" } }
Operand 0 is Some(Left(IntValue(IntValue { int_value: Value { name: "_23.1", address: 0x55add297c120, is_const: false, is_null: false, is_undef: false, llvm_value: "  %_23.1 = extractvalue { i32, i1 } %5, 1", llvm_type: "i1" } })))
Operand 1 is Some(Right(BasicBlock { address: 0x55add297a1e0, is_const: false, llvm_value: "\nbb12:                                             ; preds = %bb11\n  ret i32 %_23.0\n", llvm_type: "label" }))
Operand 2 is Some(Right(BasicBlock { address: 0x55add297a230, is_const: false, llvm_value: "\npanic3:                                           ; preds = %bb11\n  call void @_ZN4core9panicking5panic17h4241c5ccea17facaE([0 x i8]* noundef nonnull align 1 bitcast ([28 x i8]* @str.2 to [0 x i8]*), i64 28, %\"core::panic::location::Location\"* noundef align 8 dereferenceable(24) bitcast (<{ i8*, [16 x i8] }>* @alloc58 to %\"core::panic::location::Location\"*)) #7\n  unreachable\n", llvm_type: "label" }))
[2mJan 15 20:18:34.764[0m [34mDEBUG[0m wombat_symx: 	Successor to start node: "bb1"
[2mJan 15 20:18:34.764[0m [34mDEBUG[0m wombat_symx: 	Successor to start node: "bb3"
IF STATEMENT
terminator is InstructionValue { instruction_value: Value { name: "", address: 0x55add297a7f0, is_const: false, is_null: false, is_undef: false, llvm_value: "  br i1 %_4, label %bb1, label %bb3", llvm_type: "void" } }
Operand 0 is Some(Left(IntValue(IntValue { int_value: Value { name: "_4", address: 0x55add297a740, is_const: false, is_null: false, is_undef: false, llvm_value: "  %_4 = icmp sgt i32 %0, 0", llvm_type: "i1" } })))
Operand 1 is Some(Right(BasicBlock { address: 0x55add29797f0, is_const: false, llvm_value: "\nbb3:                                              ; preds = %bb1, %start\n  %x_mut.0 = phi i32 [ %0, %start ], [ %_7.0, %bb1 ]\n  %_8 = icmp sgt i32 %1, 0\n  br i1 %_8, label %bb4, label %bb6\n", llvm_type: "label" }))
Operand 2 is Some(Right(BasicBlock { address: 0x55add2979dd0, is_const: false, llvm_value: "\nbb1:                                              ; preds = %start\n  %2 = call { i32, i1 } @llvm.smul.with.overflow.i32(i32 -1, i32 %0)\n  %_7.0 = extractvalue { i32, i1 } %2, 0\n  %_7.1 = extractvalue { i32, i1 } %2, 1\n  br i1 %_7.1, label %panic, label %bb3, !prof !3\n", llvm_type: "label" }))
IF STATEMENT
terminator is InstructionValue { instruction_value: Value { name: "", address: 0x55add297a9a0, is_const: false, is_null: false, is_undef: false, llvm_value: "  br i1 %_8, label %bb4, label %bb6", llvm_type: "void" } }
Operand 0 is Some(Left(IntValue(IntValue { int_value: Value { name: "_8", address: 0x55add297a8f0, is_const: false, is_null: false, is_undef: false, llvm_value: "  %_8 = icmp sgt i32 %1, 0", llvm_type: "i1" } })))
Operand 1 is Some(Right(BasicBlock { address: 0x55add2979ec0, is_const: false, llvm_value: "\nbb6:                                              ; preds = %bb4, %bb3\n  %y_mut.0 = phi i32 [ %1, %bb3 ], [ %_11.0, %bb4 ]\n  %_13 = icmp sle i32 %x_mut.0, 0\n  %_12 = xor i1 %_13, true\n  br i1 %_12, label %bb7, label %bb8\n", llvm_type: "label" }))
Operand 2 is Some(Right(BasicBlock { address: 0x55add2979f10, is_const: false, llvm_value: "\nbb4:                                              ; preds = %bb3\n  %3 = call { i32, i1 } @llvm.smul.with.overflow.i32(i32 -1, i32 %1)\n  %_11.0 = extractvalue { i32, i1 } %3, 0\n  %_11.1 = extractvalue { i32, i1 } %3, 1\n  br i1 %_11.1, label %panic1, label %bb6, !prof !3\n", llvm_type: "label" }))
IF STATEMENT
terminator is InstructionValue { instruction_value: Value { name: "", address: 0x55add297ad60, is_const: false, is_null: false, is_undef: false, llvm_value: "  br i1 %_7.1, label %panic, label %bb3, !prof !3", llvm_type: "void" } }
Operand 0 is Some(Left(IntValue(IntValue { int_value: Value { name: "_7.1", address: 0x55add297abd0, is_const: false, is_null: false, is_undef: false, llvm_value: "  %_7.1 = extractvalue { i32, i1 } %2, 1", llvm_type: "i1" } })))
Operand 1 is Some(Right(BasicBlock { address: 0x55add29797f0, is_const: false, llvm_value: "\nbb3:                                              ; preds = %bb1, %start\n  %x_mut.0 = phi i32 [ %0, %start ], [ %_7.0, %bb1 ]\n  %_8 = icmp sgt i32 %1, 0\n  br i1 %_8, label %bb4, label %bb6\n", llvm_type: "label" }))
Operand 2 is Some(Right(BasicBlock { address: 0x55add2979e70, is_const: false, llvm_value: "\npanic:                                            ; preds = %bb1\n  call void @_ZN4core9panicking5panic17h4241c5ccea17facaE([0 x i8]* noundef nonnull align 1 bitcast ([33 x i8]* @str.0 to [0 x i8]*), i64 33, %\"core::panic::location::Location\"* noundef align 8 dereferenceable(24) bitcast (<{ i8*, [16 x i8] }>* @alloc48 to %\"core::panic::location::Location\"*)) #7\n  unreachable\n", llvm_type: "label" }))
IF STATEMENT
terminator is InstructionValue { instruction_value: Value { name: "", address: 0x55add297b0a0, is_const: false, is_null: false, is_undef: false, llvm_value: "  br i1 %_12, label %bb7, label %bb8", llvm_type: "void" } }
Operand 0 is Some(Left(IntValue(IntValue { int_value: Value { name: "_12", address: 0x55add297aff0, is_const: false, is_null: false, is_undef: false, llvm_value: "  %_12 = xor i1 %_13, true", llvm_type: "i1" } })))
Operand 1 is Some(Right(BasicBlock { address: 0x55add297a000, is_const: false, llvm_value: "\nbb8:                                              ; preds = %bb6\n  %_16 = icmp sle i32 %y_mut.0, 0\n  %_15 = xor i1 %_16, true\n  br i1 %_15, label %bb9, label %bb10\n", llvm_type: "label" }))
Operand 2 is Some(Right(BasicBlock { address: 0x55add297a050, is_const: false, llvm_value: "\nbb7:                                              ; preds = %bb6\n  call void @_ZN4core9panicking5panic17h4241c5ccea17facaE([0 x i8]* noundef nonnull align 1 bitcast (<{ [28 x i8] }>* @alloc51 to [0 x i8]*), i64 28, %\"core::panic::location::Location\"* noundef align 8 dereferenceable(24) bitcast (<{ i8*, [16 x i8] }>* @alloc53 to %\"core::panic::location::Location\"*)) #7\n  unreachable\n", llvm_type: "label" }))
IF STATEMENT
terminator is InstructionValue { instruction_value: Value { name: "", address: 0x55add297b460, is_const: false, is_null: false, is_undef: false, llvm_value: "  br i1 %_11.1, label %panic1, label %bb6, !prof !3", llvm_type: "void" } }
Operand 0 is Some(Left(IntValue(IntValue { int_value: Value { name: "_11.1", address: 0x55add297b2d0, is_const: false, is_null: false, is_undef: false, llvm_value: "  %_11.1 = extractvalue { i32, i1 } %3, 1", llvm_type: "i1" } })))
Operand 1 is Some(Right(BasicBlock { address: 0x55add2979ec0, is_const: false, llvm_value: "\nbb6:                                              ; preds = %bb4, %bb3\n  %y_mut.0 = phi i32 [ %1, %bb3 ], [ %_11.0, %bb4 ]\n  %_13 = icmp sle i32 %x_mut.0, 0\n  %_12 = xor i1 %_13, true\n  br i1 %_12, label %bb7, label %bb8\n", llvm_type: "label" }))
Operand 2 is Some(Right(BasicBlock { address: 0x55add2979fb0, is_const: false, llvm_value: "\npanic1:                                           ; preds = %bb4\n  call void @_ZN4core9panicking5panic17h4241c5ccea17facaE([0 x i8]* noundef nonnull align 1 bitcast ([33 x i8]* @str.0 to [0 x i8]*), i64 33, %\"core::panic::location::Location\"* noundef align 8 dereferenceable(24) bitcast (<{ i8*, [16 x i8] }>* @alloc50 to %\"core::panic::location::Location\"*)) #7\n  unreachable\n", llvm_type: "label" }))
IF STATEMENT
terminator is InstructionValue { instruction_value: Value { name: "", address: 0x55add297b8d0, is_const: false, is_null: false, is_undef: false, llvm_value: "  br i1 %_15, label %bb9, label %bb10", llvm_type: "void" } }
Operand 0 is Some(Left(IntValue(IntValue { int_value: Value { name: "_15", address: 0x55add297b820, is_const: false, is_null: false, is_undef: false, llvm_value: "  %_15 = xor i1 %_16, true", llvm_type: "i1" } })))
Operand 1 is Some(Right(BasicBlock { address: 0x55add297a0a0, is_const: false, llvm_value: "\nbb10:                                             ; preds = %bb8\n  %4 = call { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %x_mut.0, i32 %z_non_mut)\n  %_21.0 = extractvalue { i32, i1 } %4, 0\n  %_21.1 = extractvalue { i32, i1 } %4, 1\n  br i1 %_21.1, label %panic2, label %bb11, !prof !3\n", llvm_type: "label" }))
Operand 2 is Some(Right(BasicBlock { address: 0x55add297a0f0, is_const: false, llvm_value: "\nbb9:                                              ; preds = %bb8\n  call void @_ZN4core9panicking5panic17h4241c5ccea17facaE([0 x i8]* noundef nonnull align 1 bitcast (<{ [28 x i8] }>* @alloc54 to [0 x i8]*), i64 28, %\"core::panic::location::Location\"* noundef align 8 dereferenceable(24) bitcast (<{ i8*, [16 x i8] }>* @alloc56 to %\"core::panic::location::Location\"*)) #7\n  unreachable\n", llvm_type: "label" }))
IF STATEMENT
terminator is InstructionValue { instruction_value: Value { name: "", address: 0x55add297bdc0, is_const: false, is_null: false, is_undef: false, llvm_value: "  br i1 %_21.1, label %panic2, label %bb11, !prof !3", llvm_type: "void" } }
Operand 0 is Some(Left(IntValue(IntValue { int_value: Value { name: "_21.1", address: 0x55add297bc30, is_const: false, is_null: false, is_undef: false, llvm_value: "  %_21.1 = extractvalue { i32, i1 } %4, 1", llvm_type: "i1" } })))
Operand 1 is Some(Right(BasicBlock { address: 0x55add297a140, is_const: false, llvm_value: "\nbb11:                                             ; preds = %bb10\n  %5 = call { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %_21.0, i32 %y_mut.0)\n  %_23.0 = extractvalue { i32, i1 } %5, 0\n  %_23.1 = extractvalue { i32, i1 } %5, 1\n  br i1 %_23.1, label %panic3, label %bb12, !prof !3\n", llvm_type: "label" }))
Operand 2 is Some(Right(BasicBlock { address: 0x55add297a190, is_const: false, llvm_value: "\npanic2:                                           ; preds = %bb10\n  call void @_ZN4core9panicking5panic17h4241c5ccea17facaE([0 x i8]* noundef nonnull align 1 bitcast ([28 x i8]* @str.2 to [0 x i8]*), i64 28, %\"core::panic::location::Location\"* noundef align 8 dereferenceable(24) bitcast (<{ i8*, [16 x i8] }>* @alloc58 to %\"core::panic::location::Location\"*)) #7\n  unreachable\n", llvm_type: "label" }))
IF STATEMENT
terminator is InstructionValue { instruction_value: Value { name: "", address: 0x55add297c2b0, is_const: false, is_null: false, is_undef: false, llvm_value: "  br i1 %_23.1, label %panic3, label %bb12, !prof !3", llvm_type: "void" } }
Operand 0 is Some(Left(IntValue(IntValue { int_value: Value { name: "_23.1", address: 0x55add297c120, is_const: false, is_null: false, is_undef: false, llvm_value: "  %_23.1 = extractvalue { i32, i1 } %5, 1", llvm_type: "i1" } })))
Operand 1 is Some(Right(BasicBlock { address: 0x55add297a1e0, is_const: false, llvm_value: "\nbb12:                                             ; preds = %bb11\n  ret i32 %_23.0\n", llvm_type: "label" }))
Operand 2 is Some(Right(BasicBlock { address: 0x55add297a230, is_const: false, llvm_value: "\npanic3:                                           ; preds = %bb11\n  call void @_ZN4core9panicking5panic17h4241c5ccea17facaE([0 x i8]* noundef nonnull align 1 bitcast ([28 x i8]* @str.2 to [0 x i8]*), i64 28, %\"core::panic::location::Location\"* noundef align 8 dereferenceable(24) bitcast (<{ i8*, [16 x i8] }>* @alloc58 to %\"core::panic::location::Location\"*)) #7\n  unreachable\n", llvm_type: "label" }))
[2mJan 15 20:18:34.765[0m [34mDEBUG[0m wombat_symx: Forward edges:	{"bb1": {"bb3", "panic"}, "panic2": {"common_end"}, "start": {"bb1", "bb3"}, "bb3": {"bb6", "bb4"}, "panic": {"common_end"}, "bb6": {"bb7", "bb8"}, "panic3": {"common_end"}, "bb8": {"bb9", "bb10"}, "panic1": {"common_end"}, "bb10": {"bb11", "panic2"}, "bb9": {"common_end"}, "bb4": {"panic1", "bb6"}, "bb12": {"common_end"}, "bb11": {"bb12", "panic3"}, "bb7": {"common_end"}}
IF STATEMENT
terminator is InstructionValue { instruction_value: Value { name: "", address: 0x55add297a7f0, is_const: false, is_null: false, is_undef: false, llvm_value: "  br i1 %_4, label %bb1, label %bb3", llvm_type: "void" } }
Operand 0 is Some(Left(IntValue(IntValue { int_value: Value { name: "_4", address: 0x55add297a740, is_const: false, is_null: false, is_undef: false, llvm_value: "  %_4 = icmp sgt i32 %0, 0", llvm_type: "i1" } })))
Operand 1 is Some(Right(BasicBlock { address: 0x55add29797f0, is_const: false, llvm_value: "\nbb3:                                              ; preds = %bb1, %start\n  %x_mut.0 = phi i32 [ %0, %start ], [ %_7.0, %bb1 ]\n  %_8 = icmp sgt i32 %1, 0\n  br i1 %_8, label %bb4, label %bb6\n", llvm_type: "label" }))
Operand 2 is Some(Right(BasicBlock { address: 0x55add2979dd0, is_const: false, llvm_value: "\nbb1:                                              ; preds = %start\n  %2 = call { i32, i1 } @llvm.smul.with.overflow.i32(i32 -1, i32 %0)\n  %_7.0 = extractvalue { i32, i1 } %2, 0\n  %_7.1 = extractvalue { i32, i1 } %2, 1\n  br i1 %_7.1, label %panic, label %bb3, !prof !3\n", llvm_type: "label" }))
IF STATEMENT
terminator is InstructionValue { instruction_value: Value { name: "", address: 0x55add297a9a0, is_const: false, is_null: false, is_undef: false, llvm_value: "  br i1 %_8, label %bb4, label %bb6", llvm_type: "void" } }
Operand 0 is Some(Left(IntValue(IntValue { int_value: Value { name: "_8", address: 0x55add297a8f0, is_const: false, is_null: false, is_undef: false, llvm_value: "  %_8 = icmp sgt i32 %1, 0", llvm_type: "i1" } })))
Operand 1 is Some(Right(BasicBlock { address: 0x55add2979ec0, is_const: false, llvm_value: "\nbb6:                                              ; preds = %bb4, %bb3\n  %y_mut.0 = phi i32 [ %1, %bb3 ], [ %_11.0, %bb4 ]\n  %_13 = icmp sle i32 %x_mut.0, 0\n  %_12 = xor i1 %_13, true\n  br i1 %_12, label %bb7, label %bb8\n", llvm_type: "label" }))
Operand 2 is Some(Right(BasicBlock { address: 0x55add2979f10, is_const: false, llvm_value: "\nbb4:                                              ; preds = %bb3\n  %3 = call { i32, i1 } @llvm.smul.with.overflow.i32(i32 -1, i32 %1)\n  %_11.0 = extractvalue { i32, i1 } %3, 0\n  %_11.1 = extractvalue { i32, i1 } %3, 1\n  br i1 %_11.1, label %panic1, label %bb6, !prof !3\n", llvm_type: "label" }))
IF STATEMENT
terminator is InstructionValue { instruction_value: Value { name: "", address: 0x55add297ad60, is_const: false, is_null: false, is_undef: false, llvm_value: "  br i1 %_7.1, label %panic, label %bb3, !prof !3", llvm_type: "void" } }
Operand 0 is Some(Left(IntValue(IntValue { int_value: Value { name: "_7.1", address: 0x55add297abd0, is_const: false, is_null: false, is_undef: false, llvm_value: "  %_7.1 = extractvalue { i32, i1 } %2, 1", llvm_type: "i1" } })))
Operand 1 is Some(Right(BasicBlock { address: 0x55add29797f0, is_const: false, llvm_value: "\nbb3:                                              ; preds = %bb1, %start\n  %x_mut.0 = phi i32 [ %0, %start ], [ %_7.0, %bb1 ]\n  %_8 = icmp sgt i32 %1, 0\n  br i1 %_8, label %bb4, label %bb6\n", llvm_type: "label" }))
Operand 2 is Some(Right(BasicBlock { address: 0x55add2979e70, is_const: false, llvm_value: "\npanic:                                            ; preds = %bb1\n  call void @_ZN4core9panicking5panic17h4241c5ccea17facaE([0 x i8]* noundef nonnull align 1 bitcast ([33 x i8]* @str.0 to [0 x i8]*), i64 33, %\"core::panic::location::Location\"* noundef align 8 dereferenceable(24) bitcast (<{ i8*, [16 x i8] }>* @alloc48 to %\"core::panic::location::Location\"*)) #7\n  unreachable\n", llvm_type: "label" }))
IF STATEMENT
terminator is InstructionValue { instruction_value: Value { name: "", address: 0x55add297b0a0, is_const: false, is_null: false, is_undef: false, llvm_value: "  br i1 %_12, label %bb7, label %bb8", llvm_type: "void" } }
Operand 0 is Some(Left(IntValue(IntValue { int_value: Value { name: "_12", address: 0x55add297aff0, is_const: false, is_null: false, is_undef: false, llvm_value: "  %_12 = xor i1 %_13, true", llvm_type: "i1" } })))
Operand 1 is Some(Right(BasicBlock { address: 0x55add297a000, is_const: false, llvm_value: "\nbb8:                                              ; preds = %bb6\n  %_16 = icmp sle i32 %y_mut.0, 0\n  %_15 = xor i1 %_16, true\n  br i1 %_15, label %bb9, label %bb10\n", llvm_type: "label" }))
Operand 2 is Some(Right(BasicBlock { address: 0x55add297a050, is_const: false, llvm_value: "\nbb7:                                              ; preds = %bb6\n  call void @_ZN4core9panicking5panic17h4241c5ccea17facaE([0 x i8]* noundef nonnull align 1 bitcast (<{ [28 x i8] }>* @alloc51 to [0 x i8]*), i64 28, %\"core::panic::location::Location\"* noundef align 8 dereferenceable(24) bitcast (<{ i8*, [16 x i8] }>* @alloc53 to %\"core::panic::location::Location\"*)) #7\n  unreachable\n", llvm_type: "label" }))
IF STATEMENT
terminator is InstructionValue { instruction_value: Value { name: "", address: 0x55add297b460, is_const: false, is_null: false, is_undef: false, llvm_value: "  br i1 %_11.1, label %panic1, label %bb6, !prof !3", llvm_type: "void" } }
Operand 0 is Some(Left(IntValue(IntValue { int_value: Value { name: "_11.1", address: 0x55add297b2d0, is_const: false, is_null: false, is_undef: false, llvm_value: "  %_11.1 = extractvalue { i32, i1 } %3, 1", llvm_type: "i1" } })))
Operand 1 is Some(Right(BasicBlock { address: 0x55add2979ec0, is_const: false, llvm_value: "\nbb6:                                              ; preds = %bb4, %bb3\n  %y_mut.0 = phi i32 [ %1, %bb3 ], [ %_11.0, %bb4 ]\n  %_13 = icmp sle i32 %x_mut.0, 0\n  %_12 = xor i1 %_13, true\n  br i1 %_12, label %bb7, label %bb8\n", llvm_type: "label" }))
Operand 2 is Some(Right(BasicBlock { address: 0x55add2979fb0, is_const: false, llvm_value: "\npanic1:                                           ; preds = %bb4\n  call void @_ZN4core9panicking5panic17h4241c5ccea17facaE([0 x i8]* noundef nonnull align 1 bitcast ([33 x i8]* @str.0 to [0 x i8]*), i64 33, %\"core::panic::location::Location\"* noundef align 8 dereferenceable(24) bitcast (<{ i8*, [16 x i8] }>* @alloc50 to %\"core::panic::location::Location\"*)) #7\n  unreachable\n", llvm_type: "label" }))
IF STATEMENT
terminator is InstructionValue { instruction_value: Value { name: "", address: 0x55add297b8d0, is_const: false, is_null: false, is_undef: false, llvm_value: "  br i1 %_15, label %bb9, label %bb10", llvm_type: "void" } }
Operand 0 is Some(Left(IntValue(IntValue { int_value: Value { name: "_15", address: 0x55add297b820, is_const: false, is_null: false, is_undef: false, llvm_value: "  %_15 = xor i1 %_16, true", llvm_type: "i1" } })))
Operand 1 is Some(Right(BasicBlock { address: 0x55add297a0a0, is_const: false, llvm_value: "\nbb10:                                             ; preds = %bb8\n  %4 = call { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %x_mut.0, i32 %z_non_mut)\n  %_21.0 = extractvalue { i32, i1 } %4, 0\n  %_21.1 = extractvalue { i32, i1 } %4, 1\n  br i1 %_21.1, label %panic2, label %bb11, !prof !3\n", llvm_type: "label" }))
Operand 2 is Some(Right(BasicBlock { address: 0x55add297a0f0, is_const: false, llvm_value: "\nbb9:                                              ; preds = %bb8\n  call void @_ZN4core9panicking5panic17h4241c5ccea17facaE([0 x i8]* noundef nonnull align 1 bitcast (<{ [28 x i8] }>* @alloc54 to [0 x i8]*), i64 28, %\"core::panic::location::Location\"* noundef align 8 dereferenceable(24) bitcast (<{ i8*, [16 x i8] }>* @alloc56 to %\"core::panic::location::Location\"*)) #7\n  unreachable\n", llvm_type: "label" }))
IF STATEMENT
terminator is InstructionValue { instruction_value: Value { name: "", address: 0x55add297bdc0, is_const: false, is_null: false, is_undef: false, llvm_value: "  br i1 %_21.1, label %panic2, label %bb11, !prof !3", llvm_type: "void" } }
Operand 0 is Some(Left(IntValue(IntValue { int_value: Value { name: "_21.1", address: 0x55add297bc30, is_const: false, is_null: false, is_undef: false, llvm_value: "  %_21.1 = extractvalue { i32, i1 } %4, 1", llvm_type: "i1" } })))
Operand 1 is Some(Right(BasicBlock { address: 0x55add297a140, is_const: false, llvm_value: "\nbb11:                                             ; preds = %bb10\n  %5 = call { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %_21.0, i32 %y_mut.0)\n  %_23.0 = extractvalue { i32, i1 } %5, 0\n  %_23.1 = extractvalue { i32, i1 } %5, 1\n  br i1 %_23.1, label %panic3, label %bb12, !prof !3\n", llvm_type: "label" }))
Operand 2 is Some(Right(BasicBlock { address: 0x55add297a190, is_const: false, llvm_value: "\npanic2:                                           ; preds = %bb10\n  call void @_ZN4core9panicking5panic17h4241c5ccea17facaE([0 x i8]* noundef nonnull align 1 bitcast ([28 x i8]* @str.2 to [0 x i8]*), i64 28, %\"core::panic::location::Location\"* noundef align 8 dereferenceable(24) bitcast (<{ i8*, [16 x i8] }>* @alloc58 to %\"core::panic::location::Location\"*)) #7\n  unreachable\n", llvm_type: "label" }))
IF STATEMENT
terminator is InstructionValue { instruction_value: Value { name: "", address: 0x55add297c2b0, is_const: false, is_null: false, is_undef: false, llvm_value: "  br i1 %_23.1, label %panic3, label %bb12, !prof !3", llvm_type: "void" } }
Operand 0 is Some(Left(IntValue(IntValue { int_value: Value { name: "_23.1", address: 0x55add297c120, is_const: false, is_null: false, is_undef: false, llvm_value: "  %_23.1 = extractvalue { i32, i1 } %5, 1", llvm_type: "i1" } })))
Operand 1 is Some(Right(BasicBlock { address: 0x55add297a1e0, is_const: false, llvm_value: "\nbb12:                                             ; preds = %bb11\n  ret i32 %_23.0\n", llvm_type: "label" }))
Operand 2 is Some(Right(BasicBlock { address: 0x55add297a230, is_const: false, llvm_value: "\npanic3:                                           ; preds = %bb11\n  call void @_ZN4core9panicking5panic17h4241c5ccea17facaE([0 x i8]* noundef nonnull align 1 bitcast ([28 x i8]* @str.2 to [0 x i8]*), i64 28, %\"core::panic::location::Location\"* noundef align 8 dereferenceable(24) bitcast (<{ i8*, [16 x i8] }>* @alloc58 to %\"core::panic::location::Location\"*)) #7\n  unreachable\n", llvm_type: "label" }))
[2mJan 15 20:18:34.766[0m [34mDEBUG[0m wombat_symx: Backward edges:	{"bb1": {"start"}, "panic1": {"bb4"}, "bb7": {"bb6"}, "bb4": {"bb3"}, "common_end": {"panic", "panic2", "bb12", "panic3", "bb9", "panic1", "bb7"}, "start": {}, "bb3": {"bb1", "start"}, "panic2": {"bb10"}, "panic": {"bb1"}, "bb8": {"bb6"}, "panic3": {"bb11"}, "bb6": {"bb4", "bb3"}, "bb11": {"bb10"}, "bb10": {"bb8"}, "bb12": {"bb11"}, "bb9": {"bb8"}}
IF STATEMENT
terminator is InstructionValue { instruction_value: Value { name: "", address: 0x55add297a7f0, is_const: false, is_null: false, is_undef: false, llvm_value: "  br i1 %_4, label %bb1, label %bb3", llvm_type: "void" } }
Operand 0 is Some(Left(IntValue(IntValue { int_value: Value { name: "_4", address: 0x55add297a740, is_const: false, is_null: false, is_undef: false, llvm_value: "  %_4 = icmp sgt i32 %0, 0", llvm_type: "i1" } })))
Operand 1 is Some(Right(BasicBlock { address: 0x55add29797f0, is_const: false, llvm_value: "\nbb3:                                              ; preds = %bb1, %start\n  %x_mut.0 = phi i32 [ %0, %start ], [ %_7.0, %bb1 ]\n  %_8 = icmp sgt i32 %1, 0\n  br i1 %_8, label %bb4, label %bb6\n", llvm_type: "label" }))
Operand 2 is Some(Right(BasicBlock { address: 0x55add2979dd0, is_const: false, llvm_value: "\nbb1:                                              ; preds = %start\n  %2 = call { i32, i1 } @llvm.smul.with.overflow.i32(i32 -1, i32 %0)\n  %_7.0 = extractvalue { i32, i1 } %2, 0\n  %_7.1 = extractvalue { i32, i1 } %2, 1\n  br i1 %_7.1, label %panic, label %bb3, !prof !3\n", llvm_type: "label" }))
IF STATEMENT
terminator is InstructionValue { instruction_value: Value { name: "", address: 0x55add297a9a0, is_const: false, is_null: false, is_undef: false, llvm_value: "  br i1 %_8, label %bb4, label %bb6", llvm_type: "void" } }
Operand 0 is Some(Left(IntValue(IntValue { int_value: Value { name: "_8", address: 0x55add297a8f0, is_const: false, is_null: false, is_undef: false, llvm_value: "  %_8 = icmp sgt i32 %1, 0", llvm_type: "i1" } })))
Operand 1 is Some(Right(BasicBlock { address: 0x55add2979ec0, is_const: false, llvm_value: "\nbb6:                                              ; preds = %bb4, %bb3\n  %y_mut.0 = phi i32 [ %1, %bb3 ], [ %_11.0, %bb4 ]\n  %_13 = icmp sle i32 %x_mut.0, 0\n  %_12 = xor i1 %_13, true\n  br i1 %_12, label %bb7, label %bb8\n", llvm_type: "label" }))
Operand 2 is Some(Right(BasicBlock { address: 0x55add2979f10, is_const: false, llvm_value: "\nbb4:                                              ; preds = %bb3\n  %3 = call { i32, i1 } @llvm.smul.with.overflow.i32(i32 -1, i32 %1)\n  %_11.0 = extractvalue { i32, i1 } %3, 0\n  %_11.1 = extractvalue { i32, i1 } %3, 1\n  br i1 %_11.1, label %panic1, label %bb6, !prof !3\n", llvm_type: "label" }))
IF STATEMENT
terminator is InstructionValue { instruction_value: Value { name: "", address: 0x55add297ad60, is_const: false, is_null: false, is_undef: false, llvm_value: "  br i1 %_7.1, label %panic, label %bb3, !prof !3", llvm_type: "void" } }
Operand 0 is Some(Left(IntValue(IntValue { int_value: Value { name: "_7.1", address: 0x55add297abd0, is_const: false, is_null: false, is_undef: false, llvm_value: "  %_7.1 = extractvalue { i32, i1 } %2, 1", llvm_type: "i1" } })))
Operand 1 is Some(Right(BasicBlock { address: 0x55add29797f0, is_const: false, llvm_value: "\nbb3:                                              ; preds = %bb1, %start\n  %x_mut.0 = phi i32 [ %0, %start ], [ %_7.0, %bb1 ]\n  %_8 = icmp sgt i32 %1, 0\n  br i1 %_8, label %bb4, label %bb6\n", llvm_type: "label" }))
Operand 2 is Some(Right(BasicBlock { address: 0x55add2979e70, is_const: false, llvm_value: "\npanic:                                            ; preds = %bb1\n  call void @_ZN4core9panicking5panic17h4241c5ccea17facaE([0 x i8]* noundef nonnull align 1 bitcast ([33 x i8]* @str.0 to [0 x i8]*), i64 33, %\"core::panic::location::Location\"* noundef align 8 dereferenceable(24) bitcast (<{ i8*, [16 x i8] }>* @alloc48 to %\"core::panic::location::Location\"*)) #7\n  unreachable\n", llvm_type: "label" }))
IF STATEMENT
terminator is InstructionValue { instruction_value: Value { name: "", address: 0x55add297b0a0, is_const: false, is_null: false, is_undef: false, llvm_value: "  br i1 %_12, label %bb7, label %bb8", llvm_type: "void" } }
Operand 0 is Some(Left(IntValue(IntValue { int_value: Value { name: "_12", address: 0x55add297aff0, is_const: false, is_null: false, is_undef: false, llvm_value: "  %_12 = xor i1 %_13, true", llvm_type: "i1" } })))
Operand 1 is Some(Right(BasicBlock { address: 0x55add297a000, is_const: false, llvm_value: "\nbb8:                                              ; preds = %bb6\n  %_16 = icmp sle i32 %y_mut.0, 0\n  %_15 = xor i1 %_16, true\n  br i1 %_15, label %bb9, label %bb10\n", llvm_type: "label" }))
Operand 2 is Some(Right(BasicBlock { address: 0x55add297a050, is_const: false, llvm_value: "\nbb7:                                              ; preds = %bb6\n  call void @_ZN4core9panicking5panic17h4241c5ccea17facaE([0 x i8]* noundef nonnull align 1 bitcast (<{ [28 x i8] }>* @alloc51 to [0 x i8]*), i64 28, %\"core::panic::location::Location\"* noundef align 8 dereferenceable(24) bitcast (<{ i8*, [16 x i8] }>* @alloc53 to %\"core::panic::location::Location\"*)) #7\n  unreachable\n", llvm_type: "label" }))
IF STATEMENT
terminator is InstructionValue { instruction_value: Value { name: "", address: 0x55add297b460, is_const: false, is_null: false, is_undef: false, llvm_value: "  br i1 %_11.1, label %panic1, label %bb6, !prof !3", llvm_type: "void" } }
Operand 0 is Some(Left(IntValue(IntValue { int_value: Value { name: "_11.1", address: 0x55add297b2d0, is_const: false, is_null: false, is_undef: false, llvm_value: "  %_11.1 = extractvalue { i32, i1 } %3, 1", llvm_type: "i1" } })))
Operand 1 is Some(Right(BasicBlock { address: 0x55add2979ec0, is_const: false, llvm_value: "\nbb6:                                              ; preds = %bb4, %bb3\n  %y_mut.0 = phi i32 [ %1, %bb3 ], [ %_11.0, %bb4 ]\n  %_13 = icmp sle i32 %x_mut.0, 0\n  %_12 = xor i1 %_13, true\n  br i1 %_12, label %bb7, label %bb8\n", llvm_type: "label" }))
Operand 2 is Some(Right(BasicBlock { address: 0x55add2979fb0, is_const: false, llvm_value: "\npanic1:                                           ; preds = %bb4\n  call void @_ZN4core9panicking5panic17h4241c5ccea17facaE([0 x i8]* noundef nonnull align 1 bitcast ([33 x i8]* @str.0 to [0 x i8]*), i64 33, %\"core::panic::location::Location\"* noundef align 8 dereferenceable(24) bitcast (<{ i8*, [16 x i8] }>* @alloc50 to %\"core::panic::location::Location\"*)) #7\n  unreachable\n", llvm_type: "label" }))
IF STATEMENT
terminator is InstructionValue { instruction_value: Value { name: "", address: 0x55add297b8d0, is_const: false, is_null: false, is_undef: false, llvm_value: "  br i1 %_15, label %bb9, label %bb10", llvm_type: "void" } }
Operand 0 is Some(Left(IntValue(IntValue { int_value: Value { name: "_15", address: 0x55add297b820, is_const: false, is_null: false, is_undef: false, llvm_value: "  %_15 = xor i1 %_16, true", llvm_type: "i1" } })))
Operand 1 is Some(Right(BasicBlock { address: 0x55add297a0a0, is_const: false, llvm_value: "\nbb10:                                             ; preds = %bb8\n  %4 = call { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %x_mut.0, i32 %z_non_mut)\n  %_21.0 = extractvalue { i32, i1 } %4, 0\n  %_21.1 = extractvalue { i32, i1 } %4, 1\n  br i1 %_21.1, label %panic2, label %bb11, !prof !3\n", llvm_type: "label" }))
Operand 2 is Some(Right(BasicBlock { address: 0x55add297a0f0, is_const: false, llvm_value: "\nbb9:                                              ; preds = %bb8\n  call void @_ZN4core9panicking5panic17h4241c5ccea17facaE([0 x i8]* noundef nonnull align 1 bitcast (<{ [28 x i8] }>* @alloc54 to [0 x i8]*), i64 28, %\"core::panic::location::Location\"* noundef align 8 dereferenceable(24) bitcast (<{ i8*, [16 x i8] }>* @alloc56 to %\"core::panic::location::Location\"*)) #7\n  unreachable\n", llvm_type: "label" }))
IF STATEMENT
terminator is InstructionValue { instruction_value: Value { name: "", address: 0x55add297bdc0, is_const: false, is_null: false, is_undef: false, llvm_value: "  br i1 %_21.1, label %panic2, label %bb11, !prof !3", llvm_type: "void" } }
Operand 0 is Some(Left(IntValue(IntValue { int_value: Value { name: "_21.1", address: 0x55add297bc30, is_const: false, is_null: false, is_undef: false, llvm_value: "  %_21.1 = extractvalue { i32, i1 } %4, 1", llvm_type: "i1" } })))
Operand 1 is Some(Right(BasicBlock { address: 0x55add297a140, is_const: false, llvm_value: "\nbb11:                                             ; preds = %bb10\n  %5 = call { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %_21.0, i32 %y_mut.0)\n  %_23.0 = extractvalue { i32, i1 } %5, 0\n  %_23.1 = extractvalue { i32, i1 } %5, 1\n  br i1 %_23.1, label %panic3, label %bb12, !prof !3\n", llvm_type: "label" }))
Operand 2 is Some(Right(BasicBlock { address: 0x55add297a190, is_const: false, llvm_value: "\npanic2:                                           ; preds = %bb10\n  call void @_ZN4core9panicking5panic17h4241c5ccea17facaE([0 x i8]* noundef nonnull align 1 bitcast ([28 x i8]* @str.2 to [0 x i8]*), i64 28, %\"core::panic::location::Location\"* noundef align 8 dereferenceable(24) bitcast (<{ i8*, [16 x i8] }>* @alloc58 to %\"core::panic::location::Location\"*)) #7\n  unreachable\n", llvm_type: "label" }))
IF STATEMENT
terminator is InstructionValue { instruction_value: Value { name: "", address: 0x55add297c2b0, is_const: false, is_null: false, is_undef: false, llvm_value: "  br i1 %_23.1, label %panic3, label %bb12, !prof !3", llvm_type: "void" } }
Operand 0 is Some(Left(IntValue(IntValue { int_value: Value { name: "_23.1", address: 0x55add297c120, is_const: false, is_null: false, is_undef: false, llvm_value: "  %_23.1 = extractvalue { i32, i1 } %5, 1", llvm_type: "i1" } })))
Operand 1 is Some(Right(BasicBlock { address: 0x55add297a1e0, is_const: false, llvm_value: "\nbb12:                                             ; preds = %bb11\n  ret i32 %_23.0\n", llvm_type: "label" }))
Operand 2 is Some(Right(BasicBlock { address: 0x55add297a230, is_const: false, llvm_value: "\npanic3:                                           ; preds = %bb11\n  call void @_ZN4core9panicking5panic17h4241c5ccea17facaE([0 x i8]* noundef nonnull align 1 bitcast ([28 x i8]* @str.2 to [0 x i8]*), i64 28, %\"core::panic::location::Location\"* noundef align 8 dereferenceable(24) bitcast (<{ i8*, [16 x i8] }>* @alloc58 to %\"core::panic::location::Location\"*)) #7\n  unreachable\n", llvm_type: "label" }))
IF STATEMENT
terminator is InstructionValue { instruction_value: Value { name: "", address: 0x55add297a7f0, is_const: false, is_null: false, is_undef: false, llvm_value: "  br i1 %_4, label %bb1, label %bb3", llvm_type: "void" } }
Operand 0 is Some(Left(IntValue(IntValue { int_value: Value { name: "_4", address: 0x55add297a740, is_const: false, is_null: false, is_undef: false, llvm_value: "  %_4 = icmp sgt i32 %0, 0", llvm_type: "i1" } })))
Operand 1 is Some(Right(BasicBlock { address: 0x55add29797f0, is_const: false, llvm_value: "\nbb3:                                              ; preds = %bb1, %start\n  %x_mut.0 = phi i32 [ %0, %start ], [ %_7.0, %bb1 ]\n  %_8 = icmp sgt i32 %1, 0\n  br i1 %_8, label %bb4, label %bb6\n", llvm_type: "label" }))
Operand 2 is Some(Right(BasicBlock { address: 0x55add2979dd0, is_const: false, llvm_value: "\nbb1:                                              ; preds = %start\n  %2 = call { i32, i1 } @llvm.smul.with.overflow.i32(i32 -1, i32 %0)\n  %_7.0 = extractvalue { i32, i1 } %2, 0\n  %_7.1 = extractvalue { i32, i1 } %2, 1\n  br i1 %_7.1, label %panic, label %bb3, !prof !3\n", llvm_type: "label" }))
IF STATEMENT
terminator is InstructionValue { instruction_value: Value { name: "", address: 0x55add297a9a0, is_const: false, is_null: false, is_undef: false, llvm_value: "  br i1 %_8, label %bb4, label %bb6", llvm_type: "void" } }
Operand 0 is Some(Left(IntValue(IntValue { int_value: Value { name: "_8", address: 0x55add297a8f0, is_const: false, is_null: false, is_undef: false, llvm_value: "  %_8 = icmp sgt i32 %1, 0", llvm_type: "i1" } })))
Operand 1 is Some(Right(BasicBlock { address: 0x55add2979ec0, is_const: false, llvm_value: "\nbb6:                                              ; preds = %bb4, %bb3\n  %y_mut.0 = phi i32 [ %1, %bb3 ], [ %_11.0, %bb4 ]\n  %_13 = icmp sle i32 %x_mut.0, 0\n  %_12 = xor i1 %_13, true\n  br i1 %_12, label %bb7, label %bb8\n", llvm_type: "label" }))
Operand 2 is Some(Right(BasicBlock { address: 0x55add2979f10, is_const: false, llvm_value: "\nbb4:                                              ; preds = %bb3\n  %3 = call { i32, i1 } @llvm.smul.with.overflow.i32(i32 -1, i32 %1)\n  %_11.0 = extractvalue { i32, i1 } %3, 0\n  %_11.1 = extractvalue { i32, i1 } %3, 1\n  br i1 %_11.1, label %panic1, label %bb6, !prof !3\n", llvm_type: "label" }))
IF STATEMENT
terminator is InstructionValue { instruction_value: Value { name: "", address: 0x55add297ad60, is_const: false, is_null: false, is_undef: false, llvm_value: "  br i1 %_7.1, label %panic, label %bb3, !prof !3", llvm_type: "void" } }
Operand 0 is Some(Left(IntValue(IntValue { int_value: Value { name: "_7.1", address: 0x55add297abd0, is_const: false, is_null: false, is_undef: false, llvm_value: "  %_7.1 = extractvalue { i32, i1 } %2, 1", llvm_type: "i1" } })))
Operand 1 is Some(Right(BasicBlock { address: 0x55add29797f0, is_const: false, llvm_value: "\nbb3:                                              ; preds = %bb1, %start\n  %x_mut.0 = phi i32 [ %0, %start ], [ %_7.0, %bb1 ]\n  %_8 = icmp sgt i32 %1, 0\n  br i1 %_8, label %bb4, label %bb6\n", llvm_type: "label" }))
Operand 2 is Some(Right(BasicBlock { address: 0x55add2979e70, is_const: false, llvm_value: "\npanic:                                            ; preds = %bb1\n  call void @_ZN4core9panicking5panic17h4241c5ccea17facaE([0 x i8]* noundef nonnull align 1 bitcast ([33 x i8]* @str.0 to [0 x i8]*), i64 33, %\"core::panic::location::Location\"* noundef align 8 dereferenceable(24) bitcast (<{ i8*, [16 x i8] }>* @alloc48 to %\"core::panic::location::Location\"*)) #7\n  unreachable\n", llvm_type: "label" }))
IF STATEMENT
terminator is InstructionValue { instruction_value: Value { name: "", address: 0x55add297b0a0, is_const: false, is_null: false, is_undef: false, llvm_value: "  br i1 %_12, label %bb7, label %bb8", llvm_type: "void" } }
Operand 0 is Some(Left(IntValue(IntValue { int_value: Value { name: "_12", address: 0x55add297aff0, is_const: false, is_null: false, is_undef: false, llvm_value: "  %_12 = xor i1 %_13, true", llvm_type: "i1" } })))
Operand 1 is Some(Right(BasicBlock { address: 0x55add297a000, is_const: false, llvm_value: "\nbb8:                                              ; preds = %bb6\n  %_16 = icmp sle i32 %y_mut.0, 0\n  %_15 = xor i1 %_16, true\n  br i1 %_15, label %bb9, label %bb10\n", llvm_type: "label" }))
Operand 2 is Some(Right(BasicBlock { address: 0x55add297a050, is_const: false, llvm_value: "\nbb7:                                              ; preds = %bb6\n  call void @_ZN4core9panicking5panic17h4241c5ccea17facaE([0 x i8]* noundef nonnull align 1 bitcast (<{ [28 x i8] }>* @alloc51 to [0 x i8]*), i64 28, %\"core::panic::location::Location\"* noundef align 8 dereferenceable(24) bitcast (<{ i8*, [16 x i8] }>* @alloc53 to %\"core::panic::location::Location\"*)) #7\n  unreachable\n", llvm_type: "label" }))
IF STATEMENT
terminator is InstructionValue { instruction_value: Value { name: "", address: 0x55add297b460, is_const: false, is_null: false, is_undef: false, llvm_value: "  br i1 %_11.1, label %panic1, label %bb6, !prof !3", llvm_type: "void" } }
Operand 0 is Some(Left(IntValue(IntValue { int_value: Value { name: "_11.1", address: 0x55add297b2d0, is_const: false, is_null: false, is_undef: false, llvm_value: "  %_11.1 = extractvalue { i32, i1 } %3, 1", llvm_type: "i1" } })))
Operand 1 is Some(Right(BasicBlock { address: 0x55add2979ec0, is_const: false, llvm_value: "\nbb6:                                              ; preds = %bb4, %bb3\n  %y_mut.0 = phi i32 [ %1, %bb3 ], [ %_11.0, %bb4 ]\n  %_13 = icmp sle i32 %x_mut.0, 0\n  %_12 = xor i1 %_13, true\n  br i1 %_12, label %bb7, label %bb8\n", llvm_type: "label" }))
Operand 2 is Some(Right(BasicBlock { address: 0x55add2979fb0, is_const: false, llvm_value: "\npanic1:                                           ; preds = %bb4\n  call void @_ZN4core9panicking5panic17h4241c5ccea17facaE([0 x i8]* noundef nonnull align 1 bitcast ([33 x i8]* @str.0 to [0 x i8]*), i64 33, %\"core::panic::location::Location\"* noundef align 8 dereferenceable(24) bitcast (<{ i8*, [16 x i8] }>* @alloc50 to %\"core::panic::location::Location\"*)) #7\n  unreachable\n", llvm_type: "label" }))
IF STATEMENT
terminator is InstructionValue { instruction_value: Value { name: "", address: 0x55add297b8d0, is_const: false, is_null: false, is_undef: false, llvm_value: "  br i1 %_15, label %bb9, label %bb10", llvm_type: "void" } }
Operand 0 is Some(Left(IntValue(IntValue { int_value: Value { name: "_15", address: 0x55add297b820, is_const: false, is_null: false, is_undef: false, llvm_value: "  %_15 = xor i1 %_16, true", llvm_type: "i1" } })))
Operand 1 is Some(Right(BasicBlock { address: 0x55add297a0a0, is_const: false, llvm_value: "\nbb10:                                             ; preds = %bb8\n  %4 = call { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %x_mut.0, i32 %z_non_mut)\n  %_21.0 = extractvalue { i32, i1 } %4, 0\n  %_21.1 = extractvalue { i32, i1 } %4, 1\n  br i1 %_21.1, label %panic2, label %bb11, !prof !3\n", llvm_type: "label" }))
Operand 2 is Some(Right(BasicBlock { address: 0x55add297a0f0, is_const: false, llvm_value: "\nbb9:                                              ; preds = %bb8\n  call void @_ZN4core9panicking5panic17h4241c5ccea17facaE([0 x i8]* noundef nonnull align 1 bitcast (<{ [28 x i8] }>* @alloc54 to [0 x i8]*), i64 28, %\"core::panic::location::Location\"* noundef align 8 dereferenceable(24) bitcast (<{ i8*, [16 x i8] }>* @alloc56 to %\"core::panic::location::Location\"*)) #7\n  unreachable\n", llvm_type: "label" }))
IF STATEMENT
terminator is InstructionValue { instruction_value: Value { name: "", address: 0x55add297bdc0, is_const: false, is_null: false, is_undef: false, llvm_value: "  br i1 %_21.1, label %panic2, label %bb11, !prof !3", llvm_type: "void" } }
Operand 0 is Some(Left(IntValue(IntValue { int_value: Value { name: "_21.1", address: 0x55add297bc30, is_const: false, is_null: false, is_undef: false, llvm_value: "  %_21.1 = extractvalue { i32, i1 } %4, 1", llvm_type: "i1" } })))
Operand 1 is Some(Right(BasicBlock { address: 0x55add297a140, is_const: false, llvm_value: "\nbb11:                                             ; preds = %bb10\n  %5 = call { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %_21.0, i32 %y_mut.0)\n  %_23.0 = extractvalue { i32, i1 } %5, 0\n  %_23.1 = extractvalue { i32, i1 } %5, 1\n  br i1 %_23.1, label %panic3, label %bb12, !prof !3\n", llvm_type: "label" }))
Operand 2 is Some(Right(BasicBlock { address: 0x55add297a190, is_const: false, llvm_value: "\npanic2:                                           ; preds = %bb10\n  call void @_ZN4core9panicking5panic17h4241c5ccea17facaE([0 x i8]* noundef nonnull align 1 bitcast ([28 x i8]* @str.2 to [0 x i8]*), i64 28, %\"core::panic::location::Location\"* noundef align 8 dereferenceable(24) bitcast (<{ i8*, [16 x i8] }>* @alloc58 to %\"core::panic::location::Location\"*)) #7\n  unreachable\n", llvm_type: "label" }))
IF STATEMENT
terminator is InstructionValue { instruction_value: Value { name: "", address: 0x55add297c2b0, is_const: false, is_null: false, is_undef: false, llvm_value: "  br i1 %_23.1, label %panic3, label %bb12, !prof !3", llvm_type: "void" } }
Operand 0 is Some(Left(IntValue(IntValue { int_value: Value { name: "_23.1", address: 0x55add297c120, is_const: false, is_null: false, is_undef: false, llvm_value: "  %_23.1 = extractvalue { i32, i1 } %5, 1", llvm_type: "i1" } })))
Operand 1 is Some(Right(BasicBlock { address: 0x55add297a1e0, is_const: false, llvm_value: "\nbb12:                                             ; preds = %bb11\n  ret i32 %_23.0\n", llvm_type: "label" }))
Operand 2 is Some(Right(BasicBlock { address: 0x55add297a230, is_const: false, llvm_value: "\npanic3:                                           ; preds = %bb11\n  call void @_ZN4core9panicking5panic17h4241c5ccea17facaE([0 x i8]* noundef nonnull align 1 bitcast ([28 x i8]* @str.2 to [0 x i8]*), i64 28, %\"core::panic::location::Location\"* noundef align 8 dereferenceable(24) bitcast (<{ i8*, [16 x i8] }>* @alloc58 to %\"core::panic::location::Location\"*)) #7\n  unreachable\n", llvm_type: "label" }))
[2mJan 15 20:18:34.768[0m [34mDEBUG[0m wombat_symx: Forward sorted nodes:	["start", "bb1", "panic", "bb3", "bb4", "panic1", "bb6", "bb8", "bb7", "bb10", "bb9", "bb11", "panic2", "bb12", "panic3", "common_end"]
IF STATEMENT
terminator is InstructionValue { instruction_value: Value { name: "", address: 0x55add297a7f0, is_const: false, is_null: false, is_undef: false, llvm_value: "  br i1 %_4, label %bb1, label %bb3", llvm_type: "void" } }
Operand 0 is Some(Left(IntValue(IntValue { int_value: Value { name: "_4", address: 0x55add297a740, is_const: false, is_null: false, is_undef: false, llvm_value: "  %_4 = icmp sgt i32 %0, 0", llvm_type: "i1" } })))
Operand 1 is Some(Right(BasicBlock { address: 0x55add29797f0, is_const: false, llvm_value: "\nbb3:                                              ; preds = %bb1, %start\n  %x_mut.0 = phi i32 [ %0, %start ], [ %_7.0, %bb1 ]\n  %_8 = icmp sgt i32 %1, 0\n  br i1 %_8, label %bb4, label %bb6\n", llvm_type: "label" }))
Operand 2 is Some(Right(BasicBlock { address: 0x55add2979dd0, is_const: false, llvm_value: "\nbb1:                                              ; preds = %start\n  %2 = call { i32, i1 } @llvm.smul.with.overflow.i32(i32 -1, i32 %0)\n  %_7.0 = extractvalue { i32, i1 } %2, 0\n  %_7.1 = extractvalue { i32, i1 } %2, 1\n  br i1 %_7.1, label %panic, label %bb3, !prof !3\n", llvm_type: "label" }))
IF STATEMENT
terminator is InstructionValue { instruction_value: Value { name: "", address: 0x55add297a9a0, is_const: false, is_null: false, is_undef: false, llvm_value: "  br i1 %_8, label %bb4, label %bb6", llvm_type: "void" } }
Operand 0 is Some(Left(IntValue(IntValue { int_value: Value { name: "_8", address: 0x55add297a8f0, is_const: false, is_null: false, is_undef: false, llvm_value: "  %_8 = icmp sgt i32 %1, 0", llvm_type: "i1" } })))
Operand 1 is Some(Right(BasicBlock { address: 0x55add2979ec0, is_const: false, llvm_value: "\nbb6:                                              ; preds = %bb4, %bb3\n  %y_mut.0 = phi i32 [ %1, %bb3 ], [ %_11.0, %bb4 ]\n  %_13 = icmp sle i32 %x_mut.0, 0\n  %_12 = xor i1 %_13, true\n  br i1 %_12, label %bb7, label %bb8\n", llvm_type: "label" }))
Operand 2 is Some(Right(BasicBlock { address: 0x55add2979f10, is_const: false, llvm_value: "\nbb4:                                              ; preds = %bb3\n  %3 = call { i32, i1 } @llvm.smul.with.overflow.i32(i32 -1, i32 %1)\n  %_11.0 = extractvalue { i32, i1 } %3, 0\n  %_11.1 = extractvalue { i32, i1 } %3, 1\n  br i1 %_11.1, label %panic1, label %bb6, !prof !3\n", llvm_type: "label" }))
IF STATEMENT
terminator is InstructionValue { instruction_value: Value { name: "", address: 0x55add297ad60, is_const: false, is_null: false, is_undef: false, llvm_value: "  br i1 %_7.1, label %panic, label %bb3, !prof !3", llvm_type: "void" } }
Operand 0 is Some(Left(IntValue(IntValue { int_value: Value { name: "_7.1", address: 0x55add297abd0, is_const: false, is_null: false, is_undef: false, llvm_value: "  %_7.1 = extractvalue { i32, i1 } %2, 1", llvm_type: "i1" } })))
Operand 1 is Some(Right(BasicBlock { address: 0x55add29797f0, is_const: false, llvm_value: "\nbb3:                                              ; preds = %bb1, %start\n  %x_mut.0 = phi i32 [ %0, %start ], [ %_7.0, %bb1 ]\n  %_8 = icmp sgt i32 %1, 0\n  br i1 %_8, label %bb4, label %bb6\n", llvm_type: "label" }))
Operand 2 is Some(Right(BasicBlock { address: 0x55add2979e70, is_const: false, llvm_value: "\npanic:                                            ; preds = %bb1\n  call void @_ZN4core9panicking5panic17h4241c5ccea17facaE([0 x i8]* noundef nonnull align 1 bitcast ([33 x i8]* @str.0 to [0 x i8]*), i64 33, %\"core::panic::location::Location\"* noundef align 8 dereferenceable(24) bitcast (<{ i8*, [16 x i8] }>* @alloc48 to %\"core::panic::location::Location\"*)) #7\n  unreachable\n", llvm_type: "label" }))
IF STATEMENT
terminator is InstructionValue { instruction_value: Value { name: "", address: 0x55add297b0a0, is_const: false, is_null: false, is_undef: false, llvm_value: "  br i1 %_12, label %bb7, label %bb8", llvm_type: "void" } }
Operand 0 is Some(Left(IntValue(IntValue { int_value: Value { name: "_12", address: 0x55add297aff0, is_const: false, is_null: false, is_undef: false, llvm_value: "  %_12 = xor i1 %_13, true", llvm_type: "i1" } })))
Operand 1 is Some(Right(BasicBlock { address: 0x55add297a000, is_const: false, llvm_value: "\nbb8:                                              ; preds = %bb6\n  %_16 = icmp sle i32 %y_mut.0, 0\n  %_15 = xor i1 %_16, true\n  br i1 %_15, label %bb9, label %bb10\n", llvm_type: "label" }))
Operand 2 is Some(Right(BasicBlock { address: 0x55add297a050, is_const: false, llvm_value: "\nbb7:                                              ; preds = %bb6\n  call void @_ZN4core9panicking5panic17h4241c5ccea17facaE([0 x i8]* noundef nonnull align 1 bitcast (<{ [28 x i8] }>* @alloc51 to [0 x i8]*), i64 28, %\"core::panic::location::Location\"* noundef align 8 dereferenceable(24) bitcast (<{ i8*, [16 x i8] }>* @alloc53 to %\"core::panic::location::Location\"*)) #7\n  unreachable\n", llvm_type: "label" }))
IF STATEMENT
terminator is InstructionValue { instruction_value: Value { name: "", address: 0x55add297b460, is_const: false, is_null: false, is_undef: false, llvm_value: "  br i1 %_11.1, label %panic1, label %bb6, !prof !3", llvm_type: "void" } }
Operand 0 is Some(Left(IntValue(IntValue { int_value: Value { name: "_11.1", address: 0x55add297b2d0, is_const: false, is_null: false, is_undef: false, llvm_value: "  %_11.1 = extractvalue { i32, i1 } %3, 1", llvm_type: "i1" } })))
Operand 1 is Some(Right(BasicBlock { address: 0x55add2979ec0, is_const: false, llvm_value: "\nbb6:                                              ; preds = %bb4, %bb3\n  %y_mut.0 = phi i32 [ %1, %bb3 ], [ %_11.0, %bb4 ]\n  %_13 = icmp sle i32 %x_mut.0, 0\n  %_12 = xor i1 %_13, true\n  br i1 %_12, label %bb7, label %bb8\n", llvm_type: "label" }))
Operand 2 is Some(Right(BasicBlock { address: 0x55add2979fb0, is_const: false, llvm_value: "\npanic1:                                           ; preds = %bb4\n  call void @_ZN4core9panicking5panic17h4241c5ccea17facaE([0 x i8]* noundef nonnull align 1 bitcast ([33 x i8]* @str.0 to [0 x i8]*), i64 33, %\"core::panic::location::Location\"* noundef align 8 dereferenceable(24) bitcast (<{ i8*, [16 x i8] }>* @alloc50 to %\"core::panic::location::Location\"*)) #7\n  unreachable\n", llvm_type: "label" }))
IF STATEMENT
terminator is InstructionValue { instruction_value: Value { name: "", address: 0x55add297b8d0, is_const: false, is_null: false, is_undef: false, llvm_value: "  br i1 %_15, label %bb9, label %bb10", llvm_type: "void" } }
Operand 0 is Some(Left(IntValue(IntValue { int_value: Value { name: "_15", address: 0x55add297b820, is_const: false, is_null: false, is_undef: false, llvm_value: "  %_15 = xor i1 %_16, true", llvm_type: "i1" } })))
Operand 1 is Some(Right(BasicBlock { address: 0x55add297a0a0, is_const: false, llvm_value: "\nbb10:                                             ; preds = %bb8\n  %4 = call { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %x_mut.0, i32 %z_non_mut)\n  %_21.0 = extractvalue { i32, i1 } %4, 0\n  %_21.1 = extractvalue { i32, i1 } %4, 1\n  br i1 %_21.1, label %panic2, label %bb11, !prof !3\n", llvm_type: "label" }))
Operand 2 is Some(Right(BasicBlock { address: 0x55add297a0f0, is_const: false, llvm_value: "\nbb9:                                              ; preds = %bb8\n  call void @_ZN4core9panicking5panic17h4241c5ccea17facaE([0 x i8]* noundef nonnull align 1 bitcast (<{ [28 x i8] }>* @alloc54 to [0 x i8]*), i64 28, %\"core::panic::location::Location\"* noundef align 8 dereferenceable(24) bitcast (<{ i8*, [16 x i8] }>* @alloc56 to %\"core::panic::location::Location\"*)) #7\n  unreachable\n", llvm_type: "label" }))
IF STATEMENT
terminator is InstructionValue { instruction_value: Value { name: "", address: 0x55add297bdc0, is_const: false, is_null: false, is_undef: false, llvm_value: "  br i1 %_21.1, label %panic2, label %bb11, !prof !3", llvm_type: "void" } }
Operand 0 is Some(Left(IntValue(IntValue { int_value: Value { name: "_21.1", address: 0x55add297bc30, is_const: false, is_null: false, is_undef: false, llvm_value: "  %_21.1 = extractvalue { i32, i1 } %4, 1", llvm_type: "i1" } })))
Operand 1 is Some(Right(BasicBlock { address: 0x55add297a140, is_const: false, llvm_value: "\nbb11:                                             ; preds = %bb10\n  %5 = call { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %_21.0, i32 %y_mut.0)\n  %_23.0 = extractvalue { i32, i1 } %5, 0\n  %_23.1 = extractvalue { i32, i1 } %5, 1\n  br i1 %_23.1, label %panic3, label %bb12, !prof !3\n", llvm_type: "label" }))
Operand 2 is Some(Right(BasicBlock { address: 0x55add297a190, is_const: false, llvm_value: "\npanic2:                                           ; preds = %bb10\n  call void @_ZN4core9panicking5panic17h4241c5ccea17facaE([0 x i8]* noundef nonnull align 1 bitcast ([28 x i8]* @str.2 to [0 x i8]*), i64 28, %\"core::panic::location::Location\"* noundef align 8 dereferenceable(24) bitcast (<{ i8*, [16 x i8] }>* @alloc58 to %\"core::panic::location::Location\"*)) #7\n  unreachable\n", llvm_type: "label" }))
IF STATEMENT
terminator is InstructionValue { instruction_value: Value { name: "", address: 0x55add297c2b0, is_const: false, is_null: false, is_undef: false, llvm_value: "  br i1 %_23.1, label %panic3, label %bb12, !prof !3", llvm_type: "void" } }
Operand 0 is Some(Left(IntValue(IntValue { int_value: Value { name: "_23.1", address: 0x55add297c120, is_const: false, is_null: false, is_undef: false, llvm_value: "  %_23.1 = extractvalue { i32, i1 } %5, 1", llvm_type: "i1" } })))
Operand 1 is Some(Right(BasicBlock { address: 0x55add297a1e0, is_const: false, llvm_value: "\nbb12:                                             ; preds = %bb11\n  ret i32 %_23.0\n", llvm_type: "label" }))
Operand 2 is Some(Right(BasicBlock { address: 0x55add297a230, is_const: false, llvm_value: "\npanic3:                                           ; preds = %bb11\n  call void @_ZN4core9panicking5panic17h4241c5ccea17facaE([0 x i8]* noundef nonnull align 1 bitcast ([28 x i8]* @str.2 to [0 x i8]*), i64 28, %\"core::panic::location::Location\"* noundef align 8 dereferenceable(24) bitcast (<{ i8*, [16 x i8] }>* @alloc58 to %\"core::panic::location::Location\"*)) #7\n  unreachable\n", llvm_type: "label" }))
IF STATEMENT
terminator is InstructionValue { instruction_value: Value { name: "", address: 0x55add297a7f0, is_const: false, is_null: false, is_undef: false, llvm_value: "  br i1 %_4, label %bb1, label %bb3", llvm_type: "void" } }
Operand 0 is Some(Left(IntValue(IntValue { int_value: Value { name: "_4", address: 0x55add297a740, is_const: false, is_null: false, is_undef: false, llvm_value: "  %_4 = icmp sgt i32 %0, 0", llvm_type: "i1" } })))
Operand 1 is Some(Right(BasicBlock { address: 0x55add29797f0, is_const: false, llvm_value: "\nbb3:                                              ; preds = %bb1, %start\n  %x_mut.0 = phi i32 [ %0, %start ], [ %_7.0, %bb1 ]\n  %_8 = icmp sgt i32 %1, 0\n  br i1 %_8, label %bb4, label %bb6\n", llvm_type: "label" }))
Operand 2 is Some(Right(BasicBlock { address: 0x55add2979dd0, is_const: false, llvm_value: "\nbb1:                                              ; preds = %start\n  %2 = call { i32, i1 } @llvm.smul.with.overflow.i32(i32 -1, i32 %0)\n  %_7.0 = extractvalue { i32, i1 } %2, 0\n  %_7.1 = extractvalue { i32, i1 } %2, 1\n  br i1 %_7.1, label %panic, label %bb3, !prof !3\n", llvm_type: "label" }))
IF STATEMENT
terminator is InstructionValue { instruction_value: Value { name: "", address: 0x55add297a9a0, is_const: false, is_null: false, is_undef: false, llvm_value: "  br i1 %_8, label %bb4, label %bb6", llvm_type: "void" } }
Operand 0 is Some(Left(IntValue(IntValue { int_value: Value { name: "_8", address: 0x55add297a8f0, is_const: false, is_null: false, is_undef: false, llvm_value: "  %_8 = icmp sgt i32 %1, 0", llvm_type: "i1" } })))
Operand 1 is Some(Right(BasicBlock { address: 0x55add2979ec0, is_const: false, llvm_value: "\nbb6:                                              ; preds = %bb4, %bb3\n  %y_mut.0 = phi i32 [ %1, %bb3 ], [ %_11.0, %bb4 ]\n  %_13 = icmp sle i32 %x_mut.0, 0\n  %_12 = xor i1 %_13, true\n  br i1 %_12, label %bb7, label %bb8\n", llvm_type: "label" }))
Operand 2 is Some(Right(BasicBlock { address: 0x55add2979f10, is_const: false, llvm_value: "\nbb4:                                              ; preds = %bb3\n  %3 = call { i32, i1 } @llvm.smul.with.overflow.i32(i32 -1, i32 %1)\n  %_11.0 = extractvalue { i32, i1 } %3, 0\n  %_11.1 = extractvalue { i32, i1 } %3, 1\n  br i1 %_11.1, label %panic1, label %bb6, !prof !3\n", llvm_type: "label" }))
IF STATEMENT
terminator is InstructionValue { instruction_value: Value { name: "", address: 0x55add297ad60, is_const: false, is_null: false, is_undef: false, llvm_value: "  br i1 %_7.1, label %panic, label %bb3, !prof !3", llvm_type: "void" } }
Operand 0 is Some(Left(IntValue(IntValue { int_value: Value { name: "_7.1", address: 0x55add297abd0, is_const: false, is_null: false, is_undef: false, llvm_value: "  %_7.1 = extractvalue { i32, i1 } %2, 1", llvm_type: "i1" } })))
Operand 1 is Some(Right(BasicBlock { address: 0x55add29797f0, is_const: false, llvm_value: "\nbb3:                                              ; preds = %bb1, %start\n  %x_mut.0 = phi i32 [ %0, %start ], [ %_7.0, %bb1 ]\n  %_8 = icmp sgt i32 %1, 0\n  br i1 %_8, label %bb4, label %bb6\n", llvm_type: "label" }))
Operand 2 is Some(Right(BasicBlock { address: 0x55add2979e70, is_const: false, llvm_value: "\npanic:                                            ; preds = %bb1\n  call void @_ZN4core9panicking5panic17h4241c5ccea17facaE([0 x i8]* noundef nonnull align 1 bitcast ([33 x i8]* @str.0 to [0 x i8]*), i64 33, %\"core::panic::location::Location\"* noundef align 8 dereferenceable(24) bitcast (<{ i8*, [16 x i8] }>* @alloc48 to %\"core::panic::location::Location\"*)) #7\n  unreachable\n", llvm_type: "label" }))
IF STATEMENT
terminator is InstructionValue { instruction_value: Value { name: "", address: 0x55add297b0a0, is_const: false, is_null: false, is_undef: false, llvm_value: "  br i1 %_12, label %bb7, label %bb8", llvm_type: "void" } }
Operand 0 is Some(Left(IntValue(IntValue { int_value: Value { name: "_12", address: 0x55add297aff0, is_const: false, is_null: false, is_undef: false, llvm_value: "  %_12 = xor i1 %_13, true", llvm_type: "i1" } })))
Operand 1 is Some(Right(BasicBlock { address: 0x55add297a000, is_const: false, llvm_value: "\nbb8:                                              ; preds = %bb6\n  %_16 = icmp sle i32 %y_mut.0, 0\n  %_15 = xor i1 %_16, true\n  br i1 %_15, label %bb9, label %bb10\n", llvm_type: "label" }))
Operand 2 is Some(Right(BasicBlock { address: 0x55add297a050, is_const: false, llvm_value: "\nbb7:                                              ; preds = %bb6\n  call void @_ZN4core9panicking5panic17h4241c5ccea17facaE([0 x i8]* noundef nonnull align 1 bitcast (<{ [28 x i8] }>* @alloc51 to [0 x i8]*), i64 28, %\"core::panic::location::Location\"* noundef align 8 dereferenceable(24) bitcast (<{ i8*, [16 x i8] }>* @alloc53 to %\"core::panic::location::Location\"*)) #7\n  unreachable\n", llvm_type: "label" }))
IF STATEMENT
terminator is InstructionValue { instruction_value: Value { name: "", address: 0x55add297b460, is_const: false, is_null: false, is_undef: false, llvm_value: "  br i1 %_11.1, label %panic1, label %bb6, !prof !3", llvm_type: "void" } }
Operand 0 is Some(Left(IntValue(IntValue { int_value: Value { name: "_11.1", address: 0x55add297b2d0, is_const: false, is_null: false, is_undef: false, llvm_value: "  %_11.1 = extractvalue { i32, i1 } %3, 1", llvm_type: "i1" } })))
Operand 1 is Some(Right(BasicBlock { address: 0x55add2979ec0, is_const: false, llvm_value: "\nbb6:                                              ; preds = %bb4, %bb3\n  %y_mut.0 = phi i32 [ %1, %bb3 ], [ %_11.0, %bb4 ]\n  %_13 = icmp sle i32 %x_mut.0, 0\n  %_12 = xor i1 %_13, true\n  br i1 %_12, label %bb7, label %bb8\n", llvm_type: "label" }))
Operand 2 is Some(Right(BasicBlock { address: 0x55add2979fb0, is_const: false, llvm_value: "\npanic1:                                           ; preds = %bb4\n  call void @_ZN4core9panicking5panic17h4241c5ccea17facaE([0 x i8]* noundef nonnull align 1 bitcast ([33 x i8]* @str.0 to [0 x i8]*), i64 33, %\"core::panic::location::Location\"* noundef align 8 dereferenceable(24) bitcast (<{ i8*, [16 x i8] }>* @alloc50 to %\"core::panic::location::Location\"*)) #7\n  unreachable\n", llvm_type: "label" }))
IF STATEMENT
terminator is InstructionValue { instruction_value: Value { name: "", address: 0x55add297b8d0, is_const: false, is_null: false, is_undef: false, llvm_value: "  br i1 %_15, label %bb9, label %bb10", llvm_type: "void" } }
Operand 0 is Some(Left(IntValue(IntValue { int_value: Value { name: "_15", address: 0x55add297b820, is_const: false, is_null: false, is_undef: false, llvm_value: "  %_15 = xor i1 %_16, true", llvm_type: "i1" } })))
Operand 1 is Some(Right(BasicBlock { address: 0x55add297a0a0, is_const: false, llvm_value: "\nbb10:                                             ; preds = %bb8\n  %4 = call { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %x_mut.0, i32 %z_non_mut)\n  %_21.0 = extractvalue { i32, i1 } %4, 0\n  %_21.1 = extractvalue { i32, i1 } %4, 1\n  br i1 %_21.1, label %panic2, label %bb11, !prof !3\n", llvm_type: "label" }))
Operand 2 is Some(Right(BasicBlock { address: 0x55add297a0f0, is_const: false, llvm_value: "\nbb9:                                              ; preds = %bb8\n  call void @_ZN4core9panicking5panic17h4241c5ccea17facaE([0 x i8]* noundef nonnull align 1 bitcast (<{ [28 x i8] }>* @alloc54 to [0 x i8]*), i64 28, %\"core::panic::location::Location\"* noundef align 8 dereferenceable(24) bitcast (<{ i8*, [16 x i8] }>* @alloc56 to %\"core::panic::location::Location\"*)) #7\n  unreachable\n", llvm_type: "label" }))
IF STATEMENT
terminator is InstructionValue { instruction_value: Value { name: "", address: 0x55add297bdc0, is_const: false, is_null: false, is_undef: false, llvm_value: "  br i1 %_21.1, label %panic2, label %bb11, !prof !3", llvm_type: "void" } }
Operand 0 is Some(Left(IntValue(IntValue { int_value: Value { name: "_21.1", address: 0x55add297bc30, is_const: false, is_null: false, is_undef: false, llvm_value: "  %_21.1 = extractvalue { i32, i1 } %4, 1", llvm_type: "i1" } })))
Operand 1 is Some(Right(BasicBlock { address: 0x55add297a140, is_const: false, llvm_value: "\nbb11:                                             ; preds = %bb10\n  %5 = call { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %_21.0, i32 %y_mut.0)\n  %_23.0 = extractvalue { i32, i1 } %5, 0\n  %_23.1 = extractvalue { i32, i1 } %5, 1\n  br i1 %_23.1, label %panic3, label %bb12, !prof !3\n", llvm_type: "label" }))
Operand 2 is Some(Right(BasicBlock { address: 0x55add297a190, is_const: false, llvm_value: "\npanic2:                                           ; preds = %bb10\n  call void @_ZN4core9panicking5panic17h4241c5ccea17facaE([0 x i8]* noundef nonnull align 1 bitcast ([28 x i8]* @str.2 to [0 x i8]*), i64 28, %\"core::panic::location::Location\"* noundef align 8 dereferenceable(24) bitcast (<{ i8*, [16 x i8] }>* @alloc58 to %\"core::panic::location::Location\"*)) #7\n  unreachable\n", llvm_type: "label" }))
IF STATEMENT
terminator is InstructionValue { instruction_value: Value { name: "", address: 0x55add297c2b0, is_const: false, is_null: false, is_undef: false, llvm_value: "  br i1 %_23.1, label %panic3, label %bb12, !prof !3", llvm_type: "void" } }
Operand 0 is Some(Left(IntValue(IntValue { int_value: Value { name: "_23.1", address: 0x55add297c120, is_const: false, is_null: false, is_undef: false, llvm_value: "  %_23.1 = extractvalue { i32, i1 } %5, 1", llvm_type: "i1" } })))
Operand 1 is Some(Right(BasicBlock { address: 0x55add297a1e0, is_const: false, llvm_value: "\nbb12:                                             ; preds = %bb11\n  ret i32 %_23.0\n", llvm_type: "label" }))
Operand 2 is Some(Right(BasicBlock { address: 0x55add297a230, is_const: false, llvm_value: "\npanic3:                                           ; preds = %bb11\n  call void @_ZN4core9panicking5panic17h4241c5ccea17facaE([0 x i8]* noundef nonnull align 1 bitcast ([28 x i8]* @str.2 to [0 x i8]*), i64 28, %\"core::panic::location::Location\"* noundef align 8 dereferenceable(24) bitcast (<{ i8*, [16 x i8] }>* @alloc58 to %\"core::panic::location::Location\"*)) #7\n  unreachable\n", llvm_type: "label" }))
[2mJan 15 20:18:34.770[0m [34mDEBUG[0m wombat_symx: Backward sorted nodes:	["common_end", "panic3", "bb12", "panic2", "bb11", "bb9", "bb10", "bb7", "bb8", "bb6", "panic1", "bb4", "bb3", "panic", "bb1", "start"]
IF STATEMENT
terminator is InstructionValue { instruction_value: Value { name: "", address: 0x55add297a7f0, is_const: false, is_null: false, is_undef: false, llvm_value: "  br i1 %_4, label %bb1, label %bb3", llvm_type: "void" } }
Operand 0 is Some(Left(IntValue(IntValue { int_value: Value { name: "_4", address: 0x55add297a740, is_const: false, is_null: false, is_undef: false, llvm_value: "  %_4 = icmp sgt i32 %0, 0", llvm_type: "i1" } })))
Operand 1 is Some(Right(BasicBlock { address: 0x55add29797f0, is_const: false, llvm_value: "\nbb3:                                              ; preds = %bb1, %start\n  %x_mut.0 = phi i32 [ %0, %start ], [ %_7.0, %bb1 ]\n  %_8 = icmp sgt i32 %1, 0\n  br i1 %_8, label %bb4, label %bb6\n", llvm_type: "label" }))
Operand 2 is Some(Right(BasicBlock { address: 0x55add2979dd0, is_const: false, llvm_value: "\nbb1:                                              ; preds = %start\n  %2 = call { i32, i1 } @llvm.smul.with.overflow.i32(i32 -1, i32 %0)\n  %_7.0 = extractvalue { i32, i1 } %2, 0\n  %_7.1 = extractvalue { i32, i1 } %2, 1\n  br i1 %_7.1, label %panic, label %bb3, !prof !3\n", llvm_type: "label" }))
IF STATEMENT
terminator is InstructionValue { instruction_value: Value { name: "", address: 0x55add297a9a0, is_const: false, is_null: false, is_undef: false, llvm_value: "  br i1 %_8, label %bb4, label %bb6", llvm_type: "void" } }
Operand 0 is Some(Left(IntValue(IntValue { int_value: Value { name: "_8", address: 0x55add297a8f0, is_const: false, is_null: false, is_undef: false, llvm_value: "  %_8 = icmp sgt i32 %1, 0", llvm_type: "i1" } })))
Operand 1 is Some(Right(BasicBlock { address: 0x55add2979ec0, is_const: false, llvm_value: "\nbb6:                                              ; preds = %bb4, %bb3\n  %y_mut.0 = phi i32 [ %1, %bb3 ], [ %_11.0, %bb4 ]\n  %_13 = icmp sle i32 %x_mut.0, 0\n  %_12 = xor i1 %_13, true\n  br i1 %_12, label %bb7, label %bb8\n", llvm_type: "label" }))
Operand 2 is Some(Right(BasicBlock { address: 0x55add2979f10, is_const: false, llvm_value: "\nbb4:                                              ; preds = %bb3\n  %3 = call { i32, i1 } @llvm.smul.with.overflow.i32(i32 -1, i32 %1)\n  %_11.0 = extractvalue { i32, i1 } %3, 0\n  %_11.1 = extractvalue { i32, i1 } %3, 1\n  br i1 %_11.1, label %panic1, label %bb6, !prof !3\n", llvm_type: "label" }))
IF STATEMENT
terminator is InstructionValue { instruction_value: Value { name: "", address: 0x55add297ad60, is_const: false, is_null: false, is_undef: false, llvm_value: "  br i1 %_7.1, label %panic, label %bb3, !prof !3", llvm_type: "void" } }
Operand 0 is Some(Left(IntValue(IntValue { int_value: Value { name: "_7.1", address: 0x55add297abd0, is_const: false, is_null: false, is_undef: false, llvm_value: "  %_7.1 = extractvalue { i32, i1 } %2, 1", llvm_type: "i1" } })))
Operand 1 is Some(Right(BasicBlock { address: 0x55add29797f0, is_const: false, llvm_value: "\nbb3:                                              ; preds = %bb1, %start\n  %x_mut.0 = phi i32 [ %0, %start ], [ %_7.0, %bb1 ]\n  %_8 = icmp sgt i32 %1, 0\n  br i1 %_8, label %bb4, label %bb6\n", llvm_type: "label" }))
Operand 2 is Some(Right(BasicBlock { address: 0x55add2979e70, is_const: false, llvm_value: "\npanic:                                            ; preds = %bb1\n  call void @_ZN4core9panicking5panic17h4241c5ccea17facaE([0 x i8]* noundef nonnull align 1 bitcast ([33 x i8]* @str.0 to [0 x i8]*), i64 33, %\"core::panic::location::Location\"* noundef align 8 dereferenceable(24) bitcast (<{ i8*, [16 x i8] }>* @alloc48 to %\"core::panic::location::Location\"*)) #7\n  unreachable\n", llvm_type: "label" }))
IF STATEMENT
terminator is InstructionValue { instruction_value: Value { name: "", address: 0x55add297b0a0, is_const: false, is_null: false, is_undef: false, llvm_value: "  br i1 %_12, label %bb7, label %bb8", llvm_type: "void" } }
Operand 0 is Some(Left(IntValue(IntValue { int_value: Value { name: "_12", address: 0x55add297aff0, is_const: false, is_null: false, is_undef: false, llvm_value: "  %_12 = xor i1 %_13, true", llvm_type: "i1" } })))
Operand 1 is Some(Right(BasicBlock { address: 0x55add297a000, is_const: false, llvm_value: "\nbb8:                                              ; preds = %bb6\n  %_16 = icmp sle i32 %y_mut.0, 0\n  %_15 = xor i1 %_16, true\n  br i1 %_15, label %bb9, label %bb10\n", llvm_type: "label" }))
Operand 2 is Some(Right(BasicBlock { address: 0x55add297a050, is_const: false, llvm_value: "\nbb7:                                              ; preds = %bb6\n  call void @_ZN4core9panicking5panic17h4241c5ccea17facaE([0 x i8]* noundef nonnull align 1 bitcast (<{ [28 x i8] }>* @alloc51 to [0 x i8]*), i64 28, %\"core::panic::location::Location\"* noundef align 8 dereferenceable(24) bitcast (<{ i8*, [16 x i8] }>* @alloc53 to %\"core::panic::location::Location\"*)) #7\n  unreachable\n", llvm_type: "label" }))
IF STATEMENT
terminator is InstructionValue { instruction_value: Value { name: "", address: 0x55add297b460, is_const: false, is_null: false, is_undef: false, llvm_value: "  br i1 %_11.1, label %panic1, label %bb6, !prof !3", llvm_type: "void" } }
Operand 0 is Some(Left(IntValue(IntValue { int_value: Value { name: "_11.1", address: 0x55add297b2d0, is_const: false, is_null: false, is_undef: false, llvm_value: "  %_11.1 = extractvalue { i32, i1 } %3, 1", llvm_type: "i1" } })))
Operand 1 is Some(Right(BasicBlock { address: 0x55add2979ec0, is_const: false, llvm_value: "\nbb6:                                              ; preds = %bb4, %bb3\n  %y_mut.0 = phi i32 [ %1, %bb3 ], [ %_11.0, %bb4 ]\n  %_13 = icmp sle i32 %x_mut.0, 0\n  %_12 = xor i1 %_13, true\n  br i1 %_12, label %bb7, label %bb8\n", llvm_type: "label" }))
Operand 2 is Some(Right(BasicBlock { address: 0x55add2979fb0, is_const: false, llvm_value: "\npanic1:                                           ; preds = %bb4\n  call void @_ZN4core9panicking5panic17h4241c5ccea17facaE([0 x i8]* noundef nonnull align 1 bitcast ([33 x i8]* @str.0 to [0 x i8]*), i64 33, %\"core::panic::location::Location\"* noundef align 8 dereferenceable(24) bitcast (<{ i8*, [16 x i8] }>* @alloc50 to %\"core::panic::location::Location\"*)) #7\n  unreachable\n", llvm_type: "label" }))
IF STATEMENT
terminator is InstructionValue { instruction_value: Value { name: "", address: 0x55add297b8d0, is_const: false, is_null: false, is_undef: false, llvm_value: "  br i1 %_15, label %bb9, label %bb10", llvm_type: "void" } }
Operand 0 is Some(Left(IntValue(IntValue { int_value: Value { name: "_15", address: 0x55add297b820, is_const: false, is_null: false, is_undef: false, llvm_value: "  %_15 = xor i1 %_16, true", llvm_type: "i1" } })))
Operand 1 is Some(Right(BasicBlock { address: 0x55add297a0a0, is_const: false, llvm_value: "\nbb10:                                             ; preds = %bb8\n  %4 = call { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %x_mut.0, i32 %z_non_mut)\n  %_21.0 = extractvalue { i32, i1 } %4, 0\n  %_21.1 = extractvalue { i32, i1 } %4, 1\n  br i1 %_21.1, label %panic2, label %bb11, !prof !3\n", llvm_type: "label" }))
Operand 2 is Some(Right(BasicBlock { address: 0x55add297a0f0, is_const: false, llvm_value: "\nbb9:                                              ; preds = %bb8\n  call void @_ZN4core9panicking5panic17h4241c5ccea17facaE([0 x i8]* noundef nonnull align 1 bitcast (<{ [28 x i8] }>* @alloc54 to [0 x i8]*), i64 28, %\"core::panic::location::Location\"* noundef align 8 dereferenceable(24) bitcast (<{ i8*, [16 x i8] }>* @alloc56 to %\"core::panic::location::Location\"*)) #7\n  unreachable\n", llvm_type: "label" }))
IF STATEMENT
terminator is InstructionValue { instruction_value: Value { name: "", address: 0x55add297bdc0, is_const: false, is_null: false, is_undef: false, llvm_value: "  br i1 %_21.1, label %panic2, label %bb11, !prof !3", llvm_type: "void" } }
Operand 0 is Some(Left(IntValue(IntValue { int_value: Value { name: "_21.1", address: 0x55add297bc30, is_const: false, is_null: false, is_undef: false, llvm_value: "  %_21.1 = extractvalue { i32, i1 } %4, 1", llvm_type: "i1" } })))
Operand 1 is Some(Right(BasicBlock { address: 0x55add297a140, is_const: false, llvm_value: "\nbb11:                                             ; preds = %bb10\n  %5 = call { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %_21.0, i32 %y_mut.0)\n  %_23.0 = extractvalue { i32, i1 } %5, 0\n  %_23.1 = extractvalue { i32, i1 } %5, 1\n  br i1 %_23.1, label %panic3, label %bb12, !prof !3\n", llvm_type: "label" }))
Operand 2 is Some(Right(BasicBlock { address: 0x55add297a190, is_const: false, llvm_value: "\npanic2:                                           ; preds = %bb10\n  call void @_ZN4core9panicking5panic17h4241c5ccea17facaE([0 x i8]* noundef nonnull align 1 bitcast ([28 x i8]* @str.2 to [0 x i8]*), i64 28, %\"core::panic::location::Location\"* noundef align 8 dereferenceable(24) bitcast (<{ i8*, [16 x i8] }>* @alloc58 to %\"core::panic::location::Location\"*)) #7\n  unreachable\n", llvm_type: "label" }))
IF STATEMENT
terminator is InstructionValue { instruction_value: Value { name: "", address: 0x55add297c2b0, is_const: false, is_null: false, is_undef: false, llvm_value: "  br i1 %_23.1, label %panic3, label %bb12, !prof !3", llvm_type: "void" } }
Operand 0 is Some(Left(IntValue(IntValue { int_value: Value { name: "_23.1", address: 0x55add297c120, is_const: false, is_null: false, is_undef: false, llvm_value: "  %_23.1 = extractvalue { i32, i1 } %5, 1", llvm_type: "i1" } })))
Operand 1 is Some(Right(BasicBlock { address: 0x55add297a1e0, is_const: false, llvm_value: "\nbb12:                                             ; preds = %bb11\n  ret i32 %_23.0\n", llvm_type: "label" }))
Operand 2 is Some(Right(BasicBlock { address: 0x55add297a230, is_const: false, llvm_value: "\npanic3:                                           ; preds = %bb11\n  call void @_ZN4core9panicking5panic17h4241c5ccea17facaE([0 x i8]* noundef nonnull align 1 bitcast ([28 x i8]* @str.2 to [0 x i8]*), i64 28, %\"core::panic::location::Location\"* noundef align 8 dereferenceable(24) bitcast (<{ i8*, [16 x i8] }>* @alloc58 to %\"core::panic::location::Location\"*)) #7\n  unreachable\n", llvm_type: "label" }))
IF STATEMENT
terminator is InstructionValue { instruction_value: Value { name: "", address: 0x55add297a7f0, is_const: false, is_null: false, is_undef: false, llvm_value: "  br i1 %_4, label %bb1, label %bb3", llvm_type: "void" } }
Operand 0 is Some(Left(IntValue(IntValue { int_value: Value { name: "_4", address: 0x55add297a740, is_const: false, is_null: false, is_undef: false, llvm_value: "  %_4 = icmp sgt i32 %0, 0", llvm_type: "i1" } })))
Operand 1 is Some(Right(BasicBlock { address: 0x55add29797f0, is_const: false, llvm_value: "\nbb3:                                              ; preds = %bb1, %start\n  %x_mut.0 = phi i32 [ %0, %start ], [ %_7.0, %bb1 ]\n  %_8 = icmp sgt i32 %1, 0\n  br i1 %_8, label %bb4, label %bb6\n", llvm_type: "label" }))
Operand 2 is Some(Right(BasicBlock { address: 0x55add2979dd0, is_const: false, llvm_value: "\nbb1:                                              ; preds = %start\n  %2 = call { i32, i1 } @llvm.smul.with.overflow.i32(i32 -1, i32 %0)\n  %_7.0 = extractvalue { i32, i1 } %2, 0\n  %_7.1 = extractvalue { i32, i1 } %2, 1\n  br i1 %_7.1, label %panic, label %bb3, !prof !3\n", llvm_type: "label" }))
IF STATEMENT
terminator is InstructionValue { instruction_value: Value { name: "", address: 0x55add297a9a0, is_const: false, is_null: false, is_undef: false, llvm_value: "  br i1 %_8, label %bb4, label %bb6", llvm_type: "void" } }
Operand 0 is Some(Left(IntValue(IntValue { int_value: Value { name: "_8", address: 0x55add297a8f0, is_const: false, is_null: false, is_undef: false, llvm_value: "  %_8 = icmp sgt i32 %1, 0", llvm_type: "i1" } })))
Operand 1 is Some(Right(BasicBlock { address: 0x55add2979ec0, is_const: false, llvm_value: "\nbb6:                                              ; preds = %bb4, %bb3\n  %y_mut.0 = phi i32 [ %1, %bb3 ], [ %_11.0, %bb4 ]\n  %_13 = icmp sle i32 %x_mut.0, 0\n  %_12 = xor i1 %_13, true\n  br i1 %_12, label %bb7, label %bb8\n", llvm_type: "label" }))
Operand 2 is Some(Right(BasicBlock { address: 0x55add2979f10, is_const: false, llvm_value: "\nbb4:                                              ; preds = %bb3\n  %3 = call { i32, i1 } @llvm.smul.with.overflow.i32(i32 -1, i32 %1)\n  %_11.0 = extractvalue { i32, i1 } %3, 0\n  %_11.1 = extractvalue { i32, i1 } %3, 1\n  br i1 %_11.1, label %panic1, label %bb6, !prof !3\n", llvm_type: "label" }))
IF STATEMENT
terminator is InstructionValue { instruction_value: Value { name: "", address: 0x55add297ad60, is_const: false, is_null: false, is_undef: false, llvm_value: "  br i1 %_7.1, label %panic, label %bb3, !prof !3", llvm_type: "void" } }
Operand 0 is Some(Left(IntValue(IntValue { int_value: Value { name: "_7.1", address: 0x55add297abd0, is_const: false, is_null: false, is_undef: false, llvm_value: "  %_7.1 = extractvalue { i32, i1 } %2, 1", llvm_type: "i1" } })))
Operand 1 is Some(Right(BasicBlock { address: 0x55add29797f0, is_const: false, llvm_value: "\nbb3:                                              ; preds = %bb1, %start\n  %x_mut.0 = phi i32 [ %0, %start ], [ %_7.0, %bb1 ]\n  %_8 = icmp sgt i32 %1, 0\n  br i1 %_8, label %bb4, label %bb6\n", llvm_type: "label" }))
Operand 2 is Some(Right(BasicBlock { address: 0x55add2979e70, is_const: false, llvm_value: "\npanic:                                            ; preds = %bb1\n  call void @_ZN4core9panicking5panic17h4241c5ccea17facaE([0 x i8]* noundef nonnull align 1 bitcast ([33 x i8]* @str.0 to [0 x i8]*), i64 33, %\"core::panic::location::Location\"* noundef align 8 dereferenceable(24) bitcast (<{ i8*, [16 x i8] }>* @alloc48 to %\"core::panic::location::Location\"*)) #7\n  unreachable\n", llvm_type: "label" }))
IF STATEMENT
terminator is InstructionValue { instruction_value: Value { name: "", address: 0x55add297b0a0, is_const: false, is_null: false, is_undef: false, llvm_value: "  br i1 %_12, label %bb7, label %bb8", llvm_type: "void" } }
Operand 0 is Some(Left(IntValue(IntValue { int_value: Value { name: "_12", address: 0x55add297aff0, is_const: false, is_null: false, is_undef: false, llvm_value: "  %_12 = xor i1 %_13, true", llvm_type: "i1" } })))
Operand 1 is Some(Right(BasicBlock { address: 0x55add297a000, is_const: false, llvm_value: "\nbb8:                                              ; preds = %bb6\n  %_16 = icmp sle i32 %y_mut.0, 0\n  %_15 = xor i1 %_16, true\n  br i1 %_15, label %bb9, label %bb10\n", llvm_type: "label" }))
Operand 2 is Some(Right(BasicBlock { address: 0x55add297a050, is_const: false, llvm_value: "\nbb7:                                              ; preds = %bb6\n  call void @_ZN4core9panicking5panic17h4241c5ccea17facaE([0 x i8]* noundef nonnull align 1 bitcast (<{ [28 x i8] }>* @alloc51 to [0 x i8]*), i64 28, %\"core::panic::location::Location\"* noundef align 8 dereferenceable(24) bitcast (<{ i8*, [16 x i8] }>* @alloc53 to %\"core::panic::location::Location\"*)) #7\n  unreachable\n", llvm_type: "label" }))
IF STATEMENT
terminator is InstructionValue { instruction_value: Value { name: "", address: 0x55add297b460, is_const: false, is_null: false, is_undef: false, llvm_value: "  br i1 %_11.1, label %panic1, label %bb6, !prof !3", llvm_type: "void" } }
Operand 0 is Some(Left(IntValue(IntValue { int_value: Value { name: "_11.1", address: 0x55add297b2d0, is_const: false, is_null: false, is_undef: false, llvm_value: "  %_11.1 = extractvalue { i32, i1 } %3, 1", llvm_type: "i1" } })))
Operand 1 is Some(Right(BasicBlock { address: 0x55add2979ec0, is_const: false, llvm_value: "\nbb6:                                              ; preds = %bb4, %bb3\n  %y_mut.0 = phi i32 [ %1, %bb3 ], [ %_11.0, %bb4 ]\n  %_13 = icmp sle i32 %x_mut.0, 0\n  %_12 = xor i1 %_13, true\n  br i1 %_12, label %bb7, label %bb8\n", llvm_type: "label" }))
Operand 2 is Some(Right(BasicBlock { address: 0x55add2979fb0, is_const: false, llvm_value: "\npanic1:                                           ; preds = %bb4\n  call void @_ZN4core9panicking5panic17h4241c5ccea17facaE([0 x i8]* noundef nonnull align 1 bitcast ([33 x i8]* @str.0 to [0 x i8]*), i64 33, %\"core::panic::location::Location\"* noundef align 8 dereferenceable(24) bitcast (<{ i8*, [16 x i8] }>* @alloc50 to %\"core::panic::location::Location\"*)) #7\n  unreachable\n", llvm_type: "label" }))
IF STATEMENT
terminator is InstructionValue { instruction_value: Value { name: "", address: 0x55add297b8d0, is_const: false, is_null: false, is_undef: false, llvm_value: "  br i1 %_15, label %bb9, label %bb10", llvm_type: "void" } }
Operand 0 is Some(Left(IntValue(IntValue { int_value: Value { name: "_15", address: 0x55add297b820, is_const: false, is_null: false, is_undef: false, llvm_value: "  %_15 = xor i1 %_16, true", llvm_type: "i1" } })))
Operand 1 is Some(Right(BasicBlock { address: 0x55add297a0a0, is_const: false, llvm_value: "\nbb10:                                             ; preds = %bb8\n  %4 = call { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %x_mut.0, i32 %z_non_mut)\n  %_21.0 = extractvalue { i32, i1 } %4, 0\n  %_21.1 = extractvalue { i32, i1 } %4, 1\n  br i1 %_21.1, label %panic2, label %bb11, !prof !3\n", llvm_type: "label" }))
Operand 2 is Some(Right(BasicBlock { address: 0x55add297a0f0, is_const: false, llvm_value: "\nbb9:                                              ; preds = %bb8\n  call void @_ZN4core9panicking5panic17h4241c5ccea17facaE([0 x i8]* noundef nonnull align 1 bitcast (<{ [28 x i8] }>* @alloc54 to [0 x i8]*), i64 28, %\"core::panic::location::Location\"* noundef align 8 dereferenceable(24) bitcast (<{ i8*, [16 x i8] }>* @alloc56 to %\"core::panic::location::Location\"*)) #7\n  unreachable\n", llvm_type: "label" }))
IF STATEMENT
terminator is InstructionValue { instruction_value: Value { name: "", address: 0x55add297bdc0, is_const: false, is_null: false, is_undef: false, llvm_value: "  br i1 %_21.1, label %panic2, label %bb11, !prof !3", llvm_type: "void" } }
Operand 0 is Some(Left(IntValue(IntValue { int_value: Value { name: "_21.1", address: 0x55add297bc30, is_const: false, is_null: false, is_undef: false, llvm_value: "  %_21.1 = extractvalue { i32, i1 } %4, 1", llvm_type: "i1" } })))
Operand 1 is Some(Right(BasicBlock { address: 0x55add297a140, is_const: false, llvm_value: "\nbb11:                                             ; preds = %bb10\n  %5 = call { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %_21.0, i32 %y_mut.0)\n  %_23.0 = extractvalue { i32, i1 } %5, 0\n  %_23.1 = extractvalue { i32, i1 } %5, 1\n  br i1 %_23.1, label %panic3, label %bb12, !prof !3\n", llvm_type: "label" }))
Operand 2 is Some(Right(BasicBlock { address: 0x55add297a190, is_const: false, llvm_value: "\npanic2:                                           ; preds = %bb10\n  call void @_ZN4core9panicking5panic17h4241c5ccea17facaE([0 x i8]* noundef nonnull align 1 bitcast ([28 x i8]* @str.2 to [0 x i8]*), i64 28, %\"core::panic::location::Location\"* noundef align 8 dereferenceable(24) bitcast (<{ i8*, [16 x i8] }>* @alloc58 to %\"core::panic::location::Location\"*)) #7\n  unreachable\n", llvm_type: "label" }))
IF STATEMENT
terminator is InstructionValue { instruction_value: Value { name: "", address: 0x55add297c2b0, is_const: false, is_null: false, is_undef: false, llvm_value: "  br i1 %_23.1, label %panic3, label %bb12, !prof !3", llvm_type: "void" } }
Operand 0 is Some(Left(IntValue(IntValue { int_value: Value { name: "_23.1", address: 0x55add297c120, is_const: false, is_null: false, is_undef: false, llvm_value: "  %_23.1 = extractvalue { i32, i1 } %5, 1", llvm_type: "i1" } })))
Operand 1 is Some(Right(BasicBlock { address: 0x55add297a1e0, is_const: false, llvm_value: "\nbb12:                                             ; preds = %bb11\n  ret i32 %_23.0\n", llvm_type: "label" }))
Operand 2 is Some(Right(BasicBlock { address: 0x55add297a230, is_const: false, llvm_value: "\npanic3:                                           ; preds = %bb11\n  call void @_ZN4core9panicking5panic17h4241c5ccea17facaE([0 x i8]* noundef nonnull align 1 bitcast ([28 x i8]* @str.2 to [0 x i8]*), i64 28, %\"core::panic::location::Location\"* noundef align 8 dereferenceable(24) bitcast (<{ i8*, [16 x i8] }>* @alloc58 to %\"core::panic::location::Location\"*)) #7\n  unreachable\n", llvm_type: "label" }))
IF STATEMENT
terminator is InstructionValue { instruction_value: Value { name: "", address: 0x55add297a7f0, is_const: false, is_null: false, is_undef: false, llvm_value: "  br i1 %_4, label %bb1, label %bb3", llvm_type: "void" } }
Operand 0 is Some(Left(IntValue(IntValue { int_value: Value { name: "_4", address: 0x55add297a740, is_const: false, is_null: false, is_undef: false, llvm_value: "  %_4 = icmp sgt i32 %0, 0", llvm_type: "i1" } })))
Operand 1 is Some(Right(BasicBlock { address: 0x55add29797f0, is_const: false, llvm_value: "\nbb3:                                              ; preds = %bb1, %start\n  %x_mut.0 = phi i32 [ %0, %start ], [ %_7.0, %bb1 ]\n  %_8 = icmp sgt i32 %1, 0\n  br i1 %_8, label %bb4, label %bb6\n", llvm_type: "label" }))
Operand 2 is Some(Right(BasicBlock { address: 0x55add2979dd0, is_const: false, llvm_value: "\nbb1:                                              ; preds = %start\n  %2 = call { i32, i1 } @llvm.smul.with.overflow.i32(i32 -1, i32 %0)\n  %_7.0 = extractvalue { i32, i1 } %2, 0\n  %_7.1 = extractvalue { i32, i1 } %2, 1\n  br i1 %_7.1, label %panic, label %bb3, !prof !3\n", llvm_type: "label" }))
IF STATEMENT
terminator is InstructionValue { instruction_value: Value { name: "", address: 0x55add297a9a0, is_const: false, is_null: false, is_undef: false, llvm_value: "  br i1 %_8, label %bb4, label %bb6", llvm_type: "void" } }
Operand 0 is Some(Left(IntValue(IntValue { int_value: Value { name: "_8", address: 0x55add297a8f0, is_const: false, is_null: false, is_undef: false, llvm_value: "  %_8 = icmp sgt i32 %1, 0", llvm_type: "i1" } })))
Operand 1 is Some(Right(BasicBlock { address: 0x55add2979ec0, is_const: false, llvm_value: "\nbb6:                                              ; preds = %bb4, %bb3\n  %y_mut.0 = phi i32 [ %1, %bb3 ], [ %_11.0, %bb4 ]\n  %_13 = icmp sle i32 %x_mut.0, 0\n  %_12 = xor i1 %_13, true\n  br i1 %_12, label %bb7, label %bb8\n", llvm_type: "label" }))
Operand 2 is Some(Right(BasicBlock { address: 0x55add2979f10, is_const: false, llvm_value: "\nbb4:                                              ; preds = %bb3\n  %3 = call { i32, i1 } @llvm.smul.with.overflow.i32(i32 -1, i32 %1)\n  %_11.0 = extractvalue { i32, i1 } %3, 0\n  %_11.1 = extractvalue { i32, i1 } %3, 1\n  br i1 %_11.1, label %panic1, label %bb6, !prof !3\n", llvm_type: "label" }))
IF STATEMENT
terminator is InstructionValue { instruction_value: Value { name: "", address: 0x55add297ad60, is_const: false, is_null: false, is_undef: false, llvm_value: "  br i1 %_7.1, label %panic, label %bb3, !prof !3", llvm_type: "void" } }
Operand 0 is Some(Left(IntValue(IntValue { int_value: Value { name: "_7.1", address: 0x55add297abd0, is_const: false, is_null: false, is_undef: false, llvm_value: "  %_7.1 = extractvalue { i32, i1 } %2, 1", llvm_type: "i1" } })))
Operand 1 is Some(Right(BasicBlock { address: 0x55add29797f0, is_const: false, llvm_value: "\nbb3:                                              ; preds = %bb1, %start\n  %x_mut.0 = phi i32 [ %0, %start ], [ %_7.0, %bb1 ]\n  %_8 = icmp sgt i32 %1, 0\n  br i1 %_8, label %bb4, label %bb6\n", llvm_type: "label" }))
Operand 2 is Some(Right(BasicBlock { address: 0x55add2979e70, is_const: false, llvm_value: "\npanic:                                            ; preds = %bb1\n  call void @_ZN4core9panicking5panic17h4241c5ccea17facaE([0 x i8]* noundef nonnull align 1 bitcast ([33 x i8]* @str.0 to [0 x i8]*), i64 33, %\"core::panic::location::Location\"* noundef align 8 dereferenceable(24) bitcast (<{ i8*, [16 x i8] }>* @alloc48 to %\"core::panic::location::Location\"*)) #7\n  unreachable\n", llvm_type: "label" }))
IF STATEMENT
terminator is InstructionValue { instruction_value: Value { name: "", address: 0x55add297b0a0, is_const: false, is_null: false, is_undef: false, llvm_value: "  br i1 %_12, label %bb7, label %bb8", llvm_type: "void" } }
Operand 0 is Some(Left(IntValue(IntValue { int_value: Value { name: "_12", address: 0x55add297aff0, is_const: false, is_null: false, is_undef: false, llvm_value: "  %_12 = xor i1 %_13, true", llvm_type: "i1" } })))
Operand 1 is Some(Right(BasicBlock { address: 0x55add297a000, is_const: false, llvm_value: "\nbb8:                                              ; preds = %bb6\n  %_16 = icmp sle i32 %y_mut.0, 0\n  %_15 = xor i1 %_16, true\n  br i1 %_15, label %bb9, label %bb10\n", llvm_type: "label" }))
Operand 2 is Some(Right(BasicBlock { address: 0x55add297a050, is_const: false, llvm_value: "\nbb7:                                              ; preds = %bb6\n  call void @_ZN4core9panicking5panic17h4241c5ccea17facaE([0 x i8]* noundef nonnull align 1 bitcast (<{ [28 x i8] }>* @alloc51 to [0 x i8]*), i64 28, %\"core::panic::location::Location\"* noundef align 8 dereferenceable(24) bitcast (<{ i8*, [16 x i8] }>* @alloc53 to %\"core::panic::location::Location\"*)) #7\n  unreachable\n", llvm_type: "label" }))
IF STATEMENT
terminator is InstructionValue { instruction_value: Value { name: "", address: 0x55add297b460, is_const: false, is_null: false, is_undef: false, llvm_value: "  br i1 %_11.1, label %panic1, label %bb6, !prof !3", llvm_type: "void" } }
Operand 0 is Some(Left(IntValue(IntValue { int_value: Value { name: "_11.1", address: 0x55add297b2d0, is_const: false, is_null: false, is_undef: false, llvm_value: "  %_11.1 = extractvalue { i32, i1 } %3, 1", llvm_type: "i1" } })))
Operand 1 is Some(Right(BasicBlock { address: 0x55add2979ec0, is_const: false, llvm_value: "\nbb6:                                              ; preds = %bb4, %bb3\n  %y_mut.0 = phi i32 [ %1, %bb3 ], [ %_11.0, %bb4 ]\n  %_13 = icmp sle i32 %x_mut.0, 0\n  %_12 = xor i1 %_13, true\n  br i1 %_12, label %bb7, label %bb8\n", llvm_type: "label" }))
Operand 2 is Some(Right(BasicBlock { address: 0x55add2979fb0, is_const: false, llvm_value: "\npanic1:                                           ; preds = %bb4\n  call void @_ZN4core9panicking5panic17h4241c5ccea17facaE([0 x i8]* noundef nonnull align 1 bitcast ([33 x i8]* @str.0 to [0 x i8]*), i64 33, %\"core::panic::location::Location\"* noundef align 8 dereferenceable(24) bitcast (<{ i8*, [16 x i8] }>* @alloc50 to %\"core::panic::location::Location\"*)) #7\n  unreachable\n", llvm_type: "label" }))
IF STATEMENT
terminator is InstructionValue { instruction_value: Value { name: "", address: 0x55add297b8d0, is_const: false, is_null: false, is_undef: false, llvm_value: "  br i1 %_15, label %bb9, label %bb10", llvm_type: "void" } }
Operand 0 is Some(Left(IntValue(IntValue { int_value: Value { name: "_15", address: 0x55add297b820, is_const: false, is_null: false, is_undef: false, llvm_value: "  %_15 = xor i1 %_16, true", llvm_type: "i1" } })))
Operand 1 is Some(Right(BasicBlock { address: 0x55add297a0a0, is_const: false, llvm_value: "\nbb10:                                             ; preds = %bb8\n  %4 = call { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %x_mut.0, i32 %z_non_mut)\n  %_21.0 = extractvalue { i32, i1 } %4, 0\n  %_21.1 = extractvalue { i32, i1 } %4, 1\n  br i1 %_21.1, label %panic2, label %bb11, !prof !3\n", llvm_type: "label" }))
Operand 2 is Some(Right(BasicBlock { address: 0x55add297a0f0, is_const: false, llvm_value: "\nbb9:                                              ; preds = %bb8\n  call void @_ZN4core9panicking5panic17h4241c5ccea17facaE([0 x i8]* noundef nonnull align 1 bitcast (<{ [28 x i8] }>* @alloc54 to [0 x i8]*), i64 28, %\"core::panic::location::Location\"* noundef align 8 dereferenceable(24) bitcast (<{ i8*, [16 x i8] }>* @alloc56 to %\"core::panic::location::Location\"*)) #7\n  unreachable\n", llvm_type: "label" }))
IF STATEMENT
terminator is InstructionValue { instruction_value: Value { name: "", address: 0x55add297bdc0, is_const: false, is_null: false, is_undef: false, llvm_value: "  br i1 %_21.1, label %panic2, label %bb11, !prof !3", llvm_type: "void" } }
Operand 0 is Some(Left(IntValue(IntValue { int_value: Value { name: "_21.1", address: 0x55add297bc30, is_const: false, is_null: false, is_undef: false, llvm_value: "  %_21.1 = extractvalue { i32, i1 } %4, 1", llvm_type: "i1" } })))
Operand 1 is Some(Right(BasicBlock { address: 0x55add297a140, is_const: false, llvm_value: "\nbb11:                                             ; preds = %bb10\n  %5 = call { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %_21.0, i32 %y_mut.0)\n  %_23.0 = extractvalue { i32, i1 } %5, 0\n  %_23.1 = extractvalue { i32, i1 } %5, 1\n  br i1 %_23.1, label %panic3, label %bb12, !prof !3\n", llvm_type: "label" }))
Operand 2 is Some(Right(BasicBlock { address: 0x55add297a190, is_const: false, llvm_value: "\npanic2:                                           ; preds = %bb10\n  call void @_ZN4core9panicking5panic17h4241c5ccea17facaE([0 x i8]* noundef nonnull align 1 bitcast ([28 x i8]* @str.2 to [0 x i8]*), i64 28, %\"core::panic::location::Location\"* noundef align 8 dereferenceable(24) bitcast (<{ i8*, [16 x i8] }>* @alloc58 to %\"core::panic::location::Location\"*)) #7\n  unreachable\n", llvm_type: "label" }))
IF STATEMENT
terminator is InstructionValue { instruction_value: Value { name: "", address: 0x55add297c2b0, is_const: false, is_null: false, is_undef: false, llvm_value: "  br i1 %_23.1, label %panic3, label %bb12, !prof !3", llvm_type: "void" } }
Operand 0 is Some(Left(IntValue(IntValue { int_value: Value { name: "_23.1", address: 0x55add297c120, is_const: false, is_null: false, is_undef: false, llvm_value: "  %_23.1 = extractvalue { i32, i1 } %5, 1", llvm_type: "i1" } })))
Operand 1 is Some(Right(BasicBlock { address: 0x55add297a1e0, is_const: false, llvm_value: "\nbb12:                                             ; preds = %bb11\n  ret i32 %_23.0\n", llvm_type: "label" }))
Operand 2 is Some(Right(BasicBlock { address: 0x55add297a230, is_const: false, llvm_value: "\npanic3:                                           ; preds = %bb11\n  call void @_ZN4core9panicking5panic17h4241c5ccea17facaE([0 x i8]* noundef nonnull align 1 bitcast ([28 x i8]* @str.2 to [0 x i8]*), i64 28, %\"core::panic::location::Location\"* noundef align 8 dereferenceable(24) bitcast (<{ i8*, [16 x i8] }>* @alloc58 to %\"core::panic::location::Location\"*)) #7\n  unreachable\n", llvm_type: "label" }))
IF STATEMENT
terminator is InstructionValue { instruction_value: Value { name: "", address: 0x55add297a7f0, is_const: false, is_null: false, is_undef: false, llvm_value: "  br i1 %_4, label %bb1, label %bb3", llvm_type: "void" } }
Operand 0 is Some(Left(IntValue(IntValue { int_value: Value { name: "_4", address: 0x55add297a740, is_const: false, is_null: false, is_undef: false, llvm_value: "  %_4 = icmp sgt i32 %0, 0", llvm_type: "i1" } })))
Operand 1 is Some(Right(BasicBlock { address: 0x55add29797f0, is_const: false, llvm_value: "\nbb3:                                              ; preds = %bb1, %start\n  %x_mut.0 = phi i32 [ %0, %start ], [ %_7.0, %bb1 ]\n  %_8 = icmp sgt i32 %1, 0\n  br i1 %_8, label %bb4, label %bb6\n", llvm_type: "label" }))
Operand 2 is Some(Right(BasicBlock { address: 0x55add2979dd0, is_const: false, llvm_value: "\nbb1:                                              ; preds = %start\n  %2 = call { i32, i1 } @llvm.smul.with.overflow.i32(i32 -1, i32 %0)\n  %_7.0 = extractvalue { i32, i1 } %2, 0\n  %_7.1 = extractvalue { i32, i1 } %2, 1\n  br i1 %_7.1, label %panic, label %bb3, !prof !3\n", llvm_type: "label" }))
IF STATEMENT
terminator is InstructionValue { instruction_value: Value { name: "", address: 0x55add297a9a0, is_const: false, is_null: false, is_undef: false, llvm_value: "  br i1 %_8, label %bb4, label %bb6", llvm_type: "void" } }
Operand 0 is Some(Left(IntValue(IntValue { int_value: Value { name: "_8", address: 0x55add297a8f0, is_const: false, is_null: false, is_undef: false, llvm_value: "  %_8 = icmp sgt i32 %1, 0", llvm_type: "i1" } })))
Operand 1 is Some(Right(BasicBlock { address: 0x55add2979ec0, is_const: false, llvm_value: "\nbb6:                                              ; preds = %bb4, %bb3\n  %y_mut.0 = phi i32 [ %1, %bb3 ], [ %_11.0, %bb4 ]\n  %_13 = icmp sle i32 %x_mut.0, 0\n  %_12 = xor i1 %_13, true\n  br i1 %_12, label %bb7, label %bb8\n", llvm_type: "label" }))
Operand 2 is Some(Right(BasicBlock { address: 0x55add2979f10, is_const: false, llvm_value: "\nbb4:                                              ; preds = %bb3\n  %3 = call { i32, i1 } @llvm.smul.with.overflow.i32(i32 -1, i32 %1)\n  %_11.0 = extractvalue { i32, i1 } %3, 0\n  %_11.1 = extractvalue { i32, i1 } %3, 1\n  br i1 %_11.1, label %panic1, label %bb6, !prof !3\n", llvm_type: "label" }))
IF STATEMENT
terminator is InstructionValue { instruction_value: Value { name: "", address: 0x55add297ad60, is_const: false, is_null: false, is_undef: false, llvm_value: "  br i1 %_7.1, label %panic, label %bb3, !prof !3", llvm_type: "void" } }
Operand 0 is Some(Left(IntValue(IntValue { int_value: Value { name: "_7.1", address: 0x55add297abd0, is_const: false, is_null: false, is_undef: false, llvm_value: "  %_7.1 = extractvalue { i32, i1 } %2, 1", llvm_type: "i1" } })))
Operand 1 is Some(Right(BasicBlock { address: 0x55add29797f0, is_const: false, llvm_value: "\nbb3:                                              ; preds = %bb1, %start\n  %x_mut.0 = phi i32 [ %0, %start ], [ %_7.0, %bb1 ]\n  %_8 = icmp sgt i32 %1, 0\n  br i1 %_8, label %bb4, label %bb6\n", llvm_type: "label" }))
Operand 2 is Some(Right(BasicBlock { address: 0x55add2979e70, is_const: false, llvm_value: "\npanic:                                            ; preds = %bb1\n  call void @_ZN4core9panicking5panic17h4241c5ccea17facaE([0 x i8]* noundef nonnull align 1 bitcast ([33 x i8]* @str.0 to [0 x i8]*), i64 33, %\"core::panic::location::Location\"* noundef align 8 dereferenceable(24) bitcast (<{ i8*, [16 x i8] }>* @alloc48 to %\"core::panic::location::Location\"*)) #7\n  unreachable\n", llvm_type: "label" }))
IF STATEMENT
terminator is InstructionValue { instruction_value: Value { name: "", address: 0x55add297b0a0, is_const: false, is_null: false, is_undef: false, llvm_value: "  br i1 %_12, label %bb7, label %bb8", llvm_type: "void" } }
Operand 0 is Some(Left(IntValue(IntValue { int_value: Value { name: "_12", address: 0x55add297aff0, is_const: false, is_null: false, is_undef: false, llvm_value: "  %_12 = xor i1 %_13, true", llvm_type: "i1" } })))
Operand 1 is Some(Right(BasicBlock { address: 0x55add297a000, is_const: false, llvm_value: "\nbb8:                                              ; preds = %bb6\n  %_16 = icmp sle i32 %y_mut.0, 0\n  %_15 = xor i1 %_16, true\n  br i1 %_15, label %bb9, label %bb10\n", llvm_type: "label" }))
Operand 2 is Some(Right(BasicBlock { address: 0x55add297a050, is_const: false, llvm_value: "\nbb7:                                              ; preds = %bb6\n  call void @_ZN4core9panicking5panic17h4241c5ccea17facaE([0 x i8]* noundef nonnull align 1 bitcast (<{ [28 x i8] }>* @alloc51 to [0 x i8]*), i64 28, %\"core::panic::location::Location\"* noundef align 8 dereferenceable(24) bitcast (<{ i8*, [16 x i8] }>* @alloc53 to %\"core::panic::location::Location\"*)) #7\n  unreachable\n", llvm_type: "label" }))
IF STATEMENT
terminator is InstructionValue { instruction_value: Value { name: "", address: 0x55add297b460, is_const: false, is_null: false, is_undef: false, llvm_value: "  br i1 %_11.1, label %panic1, label %bb6, !prof !3", llvm_type: "void" } }
Operand 0 is Some(Left(IntValue(IntValue { int_value: Value { name: "_11.1", address: 0x55add297b2d0, is_const: false, is_null: false, is_undef: false, llvm_value: "  %_11.1 = extractvalue { i32, i1 } %3, 1", llvm_type: "i1" } })))
Operand 1 is Some(Right(BasicBlock { address: 0x55add2979ec0, is_const: false, llvm_value: "\nbb6:                                              ; preds = %bb4, %bb3\n  %y_mut.0 = phi i32 [ %1, %bb3 ], [ %_11.0, %bb4 ]\n  %_13 = icmp sle i32 %x_mut.0, 0\n  %_12 = xor i1 %_13, true\n  br i1 %_12, label %bb7, label %bb8\n", llvm_type: "label" }))
Operand 2 is Some(Right(BasicBlock { address: 0x55add2979fb0, is_const: false, llvm_value: "\npanic1:                                           ; preds = %bb4\n  call void @_ZN4core9panicking5panic17h4241c5ccea17facaE([0 x i8]* noundef nonnull align 1 bitcast ([33 x i8]* @str.0 to [0 x i8]*), i64 33, %\"core::panic::location::Location\"* noundef align 8 dereferenceable(24) bitcast (<{ i8*, [16 x i8] }>* @alloc50 to %\"core::panic::location::Location\"*)) #7\n  unreachable\n", llvm_type: "label" }))
IF STATEMENT
terminator is InstructionValue { instruction_value: Value { name: "", address: 0x55add297b8d0, is_const: false, is_null: false, is_undef: false, llvm_value: "  br i1 %_15, label %bb9, label %bb10", llvm_type: "void" } }
Operand 0 is Some(Left(IntValue(IntValue { int_value: Value { name: "_15", address: 0x55add297b820, is_const: false, is_null: false, is_undef: false, llvm_value: "  %_15 = xor i1 %_16, true", llvm_type: "i1" } })))
Operand 1 is Some(Right(BasicBlock { address: 0x55add297a0a0, is_const: false, llvm_value: "\nbb10:                                             ; preds = %bb8\n  %4 = call { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %x_mut.0, i32 %z_non_mut)\n  %_21.0 = extractvalue { i32, i1 } %4, 0\n  %_21.1 = extractvalue { i32, i1 } %4, 1\n  br i1 %_21.1, label %panic2, label %bb11, !prof !3\n", llvm_type: "label" }))
Operand 2 is Some(Right(BasicBlock { address: 0x55add297a0f0, is_const: false, llvm_value: "\nbb9:                                              ; preds = %bb8\n  call void @_ZN4core9panicking5panic17h4241c5ccea17facaE([0 x i8]* noundef nonnull align 1 bitcast (<{ [28 x i8] }>* @alloc54 to [0 x i8]*), i64 28, %\"core::panic::location::Location\"* noundef align 8 dereferenceable(24) bitcast (<{ i8*, [16 x i8] }>* @alloc56 to %\"core::panic::location::Location\"*)) #7\n  unreachable\n", llvm_type: "label" }))
IF STATEMENT
terminator is InstructionValue { instruction_value: Value { name: "", address: 0x55add297bdc0, is_const: false, is_null: false, is_undef: false, llvm_value: "  br i1 %_21.1, label %panic2, label %bb11, !prof !3", llvm_type: "void" } }
Operand 0 is Some(Left(IntValue(IntValue { int_value: Value { name: "_21.1", address: 0x55add297bc30, is_const: false, is_null: false, is_undef: false, llvm_value: "  %_21.1 = extractvalue { i32, i1 } %4, 1", llvm_type: "i1" } })))
Operand 1 is Some(Right(BasicBlock { address: 0x55add297a140, is_const: false, llvm_value: "\nbb11:                                             ; preds = %bb10\n  %5 = call { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %_21.0, i32 %y_mut.0)\n  %_23.0 = extractvalue { i32, i1 } %5, 0\n  %_23.1 = extractvalue { i32, i1 } %5, 1\n  br i1 %_23.1, label %panic3, label %bb12, !prof !3\n", llvm_type: "label" }))
Operand 2 is Some(Right(BasicBlock { address: 0x55add297a190, is_const: false, llvm_value: "\npanic2:                                           ; preds = %bb10\n  call void @_ZN4core9panicking5panic17h4241c5ccea17facaE([0 x i8]* noundef nonnull align 1 bitcast ([28 x i8]* @str.2 to [0 x i8]*), i64 28, %\"core::panic::location::Location\"* noundef align 8 dereferenceable(24) bitcast (<{ i8*, [16 x i8] }>* @alloc58 to %\"core::panic::location::Location\"*)) #7\n  unreachable\n", llvm_type: "label" }))
IF STATEMENT
terminator is InstructionValue { instruction_value: Value { name: "", address: 0x55add297c2b0, is_const: false, is_null: false, is_undef: false, llvm_value: "  br i1 %_23.1, label %panic3, label %bb12, !prof !3", llvm_type: "void" } }
Operand 0 is Some(Left(IntValue(IntValue { int_value: Value { name: "_23.1", address: 0x55add297c120, is_const: false, is_null: false, is_undef: false, llvm_value: "  %_23.1 = extractvalue { i32, i1 } %5, 1", llvm_type: "i1" } })))
Operand 1 is Some(Right(BasicBlock { address: 0x55add297a1e0, is_const: false, llvm_value: "\nbb12:                                             ; preds = %bb11\n  ret i32 %_23.0\n", llvm_type: "label" }))
Operand 2 is Some(Right(BasicBlock { address: 0x55add297a230, is_const: false, llvm_value: "\npanic3:                                           ; preds = %bb11\n  call void @_ZN4core9panicking5panic17h4241c5ccea17facaE([0 x i8]* noundef nonnull align 1 bitcast ([28 x i8]* @str.2 to [0 x i8]*), i64 28, %\"core::panic::location::Location\"* noundef align 8 dereferenceable(24) bitcast (<{ i8*, [16 x i8] }>* @alloc58 to %\"core::panic::location::Location\"*)) #7\n  unreachable\n", llvm_type: "label" }))
[2mJan 15 20:18:34.802[0m [34mDEBUG[0m wombat_symx: Unsupported Call function "_ZN4core9panicking5panic17h4241c5ccea17facaE"
IF HAS NUM OPERANDS 3
IF HAS TERMINATOR InstructionValue { instruction_value: Value { name: "", address: 0x55add297c2b0, is_const: false, is_null: false, is_undef: false, llvm_value: "  br i1 %_23.1, label %panic3, label %bb12, !prof !3", llvm_type: "void" } }
IF HAS NODE "panic3"
TEST 123 "  %_23.1 = extractvalue { i32, i1 } %5, 1"
IF HAS TARGET VAL true
IF HAS TARGET VAL VAR true
IF HAS SWITCH VAR %_23.1
IF HAS DISCRIMINANT IntValue(IntValue { int_value: Value { name: "_23.1", address: 0x55add297c120, is_const: false, is_null: false, is_undef: false, llvm_value: "  %_23.1 = extractvalue { i32, i1 } %5, 1", llvm_type: "i1" } })
IF HAS ENTRY CONDITION (= %_23.1 true)
IF HAS NUM OPERANDS 3
IF HAS TERMINATOR InstructionValue { instruction_value: Value { name: "", address: 0x55add297c2b0, is_const: false, is_null: false, is_undef: false, llvm_value: "  br i1 %_23.1, label %panic3, label %bb12, !prof !3", llvm_type: "void" } }
IF HAS NODE "bb12"
TEST 123 "  %_23.1 = extractvalue { i32, i1 } %5, 1"
IF HAS TARGET VAL false
IF HAS TARGET VAL VAR false
IF HAS SWITCH VAR %_23.1
IF HAS DISCRIMINANT IntValue(IntValue { int_value: Value { name: "_23.1", address: 0x55add297c120, is_const: false, is_null: false, is_undef: false, llvm_value: "  %_23.1 = extractvalue { i32, i1 } %5, 1", llvm_type: "i1" } })
IF HAS ENTRY CONDITION (= %_23.1 false)
[2mJan 15 20:18:34.804[0m [34mDEBUG[0m wombat_symx: Unsupported Call function "_ZN4core9panicking5panic17h4241c5ccea17facaE"
IF HAS NUM OPERANDS 3
IF HAS TERMINATOR InstructionValue { instruction_value: Value { name: "", address: 0x55add297bdc0, is_const: false, is_null: false, is_undef: false, llvm_value: "  br i1 %_21.1, label %panic2, label %bb11, !prof !3", llvm_type: "void" } }
IF HAS NODE "panic2"
TEST 123 "  %_21.1 = extractvalue { i32, i1 } %4, 1"
IF HAS TARGET VAL true
IF HAS TARGET VAL VAR true
IF HAS SWITCH VAR %_21.1
IF HAS DISCRIMINANT IntValue(IntValue { int_value: Value { name: "_21.1", address: 0x55add297bc30, is_const: false, is_null: false, is_undef: false, llvm_value: "  %_21.1 = extractvalue { i32, i1 } %4, 1", llvm_type: "i1" } })
IF HAS ENTRY CONDITION (= %_21.1 true)
IF HAS NUM OPERANDS 3
IF HAS TERMINATOR InstructionValue { instruction_value: Value { name: "", address: 0x55add297c2b0, is_const: false, is_null: false, is_undef: false, llvm_value: "  br i1 %_23.1, label %panic3, label %bb12, !prof !3", llvm_type: "void" } }
IF HAS NODE "bb12"
TEST 123 "  %_23.1 = extractvalue { i32, i1 } %5, 1"
IF HAS TARGET VAL false
IF HAS TARGET VAL VAR false
IF HAS SWITCH VAR %_23.1
IF HAS DISCRIMINANT IntValue(IntValue { int_value: Value { name: "_23.1", address: 0x55add297c120, is_const: false, is_null: false, is_undef: false, llvm_value: "  %_23.1 = extractvalue { i32, i1 } %5, 1", llvm_type: "i1" } })
IF HAS ENTRY CONDITION (= %_23.1 false)
IF HAS NUM OPERANDS 3
IF HAS TERMINATOR InstructionValue { instruction_value: Value { name: "", address: 0x55add297c2b0, is_const: false, is_null: false, is_undef: false, llvm_value: "  br i1 %_23.1, label %panic3, label %bb12, !prof !3", llvm_type: "void" } }
IF HAS NODE "panic3"
TEST 123 "  %_23.1 = extractvalue { i32, i1 } %5, 1"
IF HAS TARGET VAL true
IF HAS TARGET VAL VAR true
IF HAS SWITCH VAR %_23.1
IF HAS DISCRIMINANT IntValue(IntValue { int_value: Value { name: "_23.1", address: 0x55add297c120, is_const: false, is_null: false, is_undef: false, llvm_value: "  %_23.1 = extractvalue { i32, i1 } %5, 1", llvm_type: "i1" } })
IF HAS ENTRY CONDITION (= %_23.1 true)
TEST 123 "  %_23.1 = extractvalue { i32, i1 } %5, 1"
TEST 123 "  %5 = call { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %_21.0, i32 %y_mut.0)"
TEST 123 "  %_23.0 = extractvalue { i32, i1 } %5, 0"
TEST 123 "  %5 = call { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %_21.0, i32 %y_mut.0)"
TEST 123 "  %_21.0 = extractvalue { i32, i1 } %4, 0"
TEST 123 "  %y_mut.0 = phi i32 [ %1, %bb3 ], [ %_11.0, %bb4 ]"
TEST 123 "  %5 = call { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %_21.0, i32 %y_mut.0)"
TEST 123 "  %5 = call { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %_21.0, i32 %y_mut.0)"
IF HAS NUM OPERANDS 3
IF HAS TERMINATOR InstructionValue { instruction_value: Value { name: "", address: 0x55add297bdc0, is_const: false, is_null: false, is_undef: false, llvm_value: "  br i1 %_21.1, label %panic2, label %bb11, !prof !3", llvm_type: "void" } }
IF HAS NODE "bb11"
TEST 123 "  %_21.1 = extractvalue { i32, i1 } %4, 1"
IF HAS TARGET VAL false
IF HAS TARGET VAL VAR false
IF HAS SWITCH VAR %_21.1
IF HAS DISCRIMINANT IntValue(IntValue { int_value: Value { name: "_21.1", address: 0x55add297bc30, is_const: false, is_null: false, is_undef: false, llvm_value: "  %_21.1 = extractvalue { i32, i1 } %4, 1", llvm_type: "i1" } })
IF HAS ENTRY CONDITION (= %_21.1 false)
[2mJan 15 20:18:34.806[0m [34mDEBUG[0m wombat_symx: Unsupported Call function "_ZN4core9panicking5panic17h4241c5ccea17facaE"
IF HAS NUM OPERANDS 3
IF HAS TERMINATOR InstructionValue { instruction_value: Value { name: "", address: 0x55add297b8d0, is_const: false, is_null: false, is_undef: false, llvm_value: "  br i1 %_15, label %bb9, label %bb10", llvm_type: "void" } }
IF HAS NODE "bb9"
TEST 123 "  %_15 = xor i1 %_16, true"
IF HAS TARGET VAL true
IF HAS TARGET VAL VAR true
IF HAS SWITCH VAR %_15
IF HAS DISCRIMINANT IntValue(IntValue { int_value: Value { name: "_15", address: 0x55add297b820, is_const: false, is_null: false, is_undef: false, llvm_value: "  %_15 = xor i1 %_16, true", llvm_type: "i1" } })
IF HAS ENTRY CONDITION (= %_15 true)
IF HAS NUM OPERANDS 3
IF HAS TERMINATOR InstructionValue { instruction_value: Value { name: "", address: 0x55add297bdc0, is_const: false, is_null: false, is_undef: false, llvm_value: "  br i1 %_21.1, label %panic2, label %bb11, !prof !3", llvm_type: "void" } }
IF HAS NODE "bb11"
TEST 123 "  %_21.1 = extractvalue { i32, i1 } %4, 1"
IF HAS TARGET VAL false
IF HAS TARGET VAL VAR false
IF HAS SWITCH VAR %_21.1
IF HAS DISCRIMINANT IntValue(IntValue { int_value: Value { name: "_21.1", address: 0x55add297bc30, is_const: false, is_null: false, is_undef: false, llvm_value: "  %_21.1 = extractvalue { i32, i1 } %4, 1", llvm_type: "i1" } })
IF HAS ENTRY CONDITION (= %_21.1 false)
IF HAS NUM OPERANDS 3
IF HAS TERMINATOR InstructionValue { instruction_value: Value { name: "", address: 0x55add297bdc0, is_const: false, is_null: false, is_undef: false, llvm_value: "  br i1 %_21.1, label %panic2, label %bb11, !prof !3", llvm_type: "void" } }
IF HAS NODE "panic2"
TEST 123 "  %_21.1 = extractvalue { i32, i1 } %4, 1"
IF HAS TARGET VAL true
IF HAS TARGET VAL VAR true
IF HAS SWITCH VAR %_21.1
IF HAS DISCRIMINANT IntValue(IntValue { int_value: Value { name: "_21.1", address: 0x55add297bc30, is_const: false, is_null: false, is_undef: false, llvm_value: "  %_21.1 = extractvalue { i32, i1 } %4, 1", llvm_type: "i1" } })
IF HAS ENTRY CONDITION (= %_21.1 true)
TEST 123 "  %_21.1 = extractvalue { i32, i1 } %4, 1"
TEST 123 "  %4 = call { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %x_mut.0, i32 %z_non_mut)"
TEST 123 "  %_21.0 = extractvalue { i32, i1 } %4, 0"
TEST 123 "  %4 = call { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %x_mut.0, i32 %z_non_mut)"
TEST 123 "  %x_mut.0 = phi i32 [ %0, %start ], [ %_7.0, %bb1 ]"
TEST 123 "i32 %z_non_mut"
TEST 123 "  %4 = call { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %x_mut.0, i32 %z_non_mut)"
TEST 123 "  %4 = call { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %x_mut.0, i32 %z_non_mut)"
IF HAS NUM OPERANDS 3
IF HAS TERMINATOR InstructionValue { instruction_value: Value { name: "", address: 0x55add297b8d0, is_const: false, is_null: false, is_undef: false, llvm_value: "  br i1 %_15, label %bb9, label %bb10", llvm_type: "void" } }
IF HAS NODE "bb10"
TEST 123 "  %_15 = xor i1 %_16, true"
IF HAS TARGET VAL false
IF HAS TARGET VAL VAR false
IF HAS SWITCH VAR %_15
IF HAS DISCRIMINANT IntValue(IntValue { int_value: Value { name: "_15", address: 0x55add297b820, is_const: false, is_null: false, is_undef: false, llvm_value: "  %_15 = xor i1 %_16, true", llvm_type: "i1" } })
IF HAS ENTRY CONDITION (= %_15 false)
[2mJan 15 20:18:34.809[0m [34mDEBUG[0m wombat_symx: Unsupported Call function "_ZN4core9panicking5panic17h4241c5ccea17facaE"
IF HAS NUM OPERANDS 3
IF HAS TERMINATOR InstructionValue { instruction_value: Value { name: "", address: 0x55add297b0a0, is_const: false, is_null: false, is_undef: false, llvm_value: "  br i1 %_12, label %bb7, label %bb8", llvm_type: "void" } }
IF HAS NODE "bb7"
TEST 123 "  %_12 = xor i1 %_13, true"
IF HAS TARGET VAL true
IF HAS TARGET VAL VAR true
IF HAS SWITCH VAR %_12
IF HAS DISCRIMINANT IntValue(IntValue { int_value: Value { name: "_12", address: 0x55add297aff0, is_const: false, is_null: false, is_undef: false, llvm_value: "  %_12 = xor i1 %_13, true", llvm_type: "i1" } })
IF HAS ENTRY CONDITION (= %_12 true)
IF HAS NUM OPERANDS 3
IF HAS TERMINATOR InstructionValue { instruction_value: Value { name: "", address: 0x55add297b8d0, is_const: false, is_null: false, is_undef: false, llvm_value: "  br i1 %_15, label %bb9, label %bb10", llvm_type: "void" } }
IF HAS NODE "bb9"
TEST 123 "  %_15 = xor i1 %_16, true"
IF HAS TARGET VAL true
IF HAS TARGET VAL VAR true
IF HAS SWITCH VAR %_15
IF HAS DISCRIMINANT IntValue(IntValue { int_value: Value { name: "_15", address: 0x55add297b820, is_const: false, is_null: false, is_undef: false, llvm_value: "  %_15 = xor i1 %_16, true", llvm_type: "i1" } })
IF HAS ENTRY CONDITION (= %_15 true)
IF HAS NUM OPERANDS 3
IF HAS TERMINATOR InstructionValue { instruction_value: Value { name: "", address: 0x55add297b8d0, is_const: false, is_null: false, is_undef: false, llvm_value: "  br i1 %_15, label %bb9, label %bb10", llvm_type: "void" } }
IF HAS NODE "bb10"
TEST 123 "  %_15 = xor i1 %_16, true"
IF HAS TARGET VAL false
IF HAS TARGET VAL VAR false
IF HAS SWITCH VAR %_15
IF HAS DISCRIMINANT IntValue(IntValue { int_value: Value { name: "_15", address: 0x55add297b820, is_const: false, is_null: false, is_undef: false, llvm_value: "  %_15 = xor i1 %_16, true", llvm_type: "i1" } })
IF HAS ENTRY CONDITION (= %_15 false)
TEST 123 "  %_16 = icmp sle i32 %y_mut.0, 0"
TEST 123 "i1 true"
TEST 123 "  %_15 = xor i1 %_16, true"
TEST 123 "  %_16 = icmp sle i32 %y_mut.0, 0"
TEST 123 "  %y_mut.0 = phi i32 [ %1, %bb3 ], [ %_11.0, %bb4 ]"
TEST 123 "i32 0"
IF HAS NUM OPERANDS 3
IF HAS TERMINATOR InstructionValue { instruction_value: Value { name: "", address: 0x55add297b0a0, is_const: false, is_null: false, is_undef: false, llvm_value: "  br i1 %_12, label %bb7, label %bb8", llvm_type: "void" } }
IF HAS NODE "bb8"
TEST 123 "  %_12 = xor i1 %_13, true"
IF HAS TARGET VAL false
IF HAS TARGET VAL VAR false
IF HAS SWITCH VAR %_12
IF HAS DISCRIMINANT IntValue(IntValue { int_value: Value { name: "_12", address: 0x55add297aff0, is_const: false, is_null: false, is_undef: false, llvm_value: "  %_12 = xor i1 %_13, true", llvm_type: "i1" } })
IF HAS ENTRY CONDITION (= %_12 false)
IF HAS NUM OPERANDS 3
IF HAS TERMINATOR InstructionValue { instruction_value: Value { name: "", address: 0x55add297b0a0, is_const: false, is_null: false, is_undef: false, llvm_value: "  br i1 %_12, label %bb7, label %bb8", llvm_type: "void" } }
IF HAS NODE "bb8"
TEST 123 "  %_12 = xor i1 %_13, true"
IF HAS TARGET VAL false
IF HAS TARGET VAL VAR false
IF HAS SWITCH VAR %_12
IF HAS DISCRIMINANT IntValue(IntValue { int_value: Value { name: "_12", address: 0x55add297aff0, is_const: false, is_null: false, is_undef: false, llvm_value: "  %_12 = xor i1 %_13, true", llvm_type: "i1" } })
IF HAS ENTRY CONDITION (= %_12 false)
IF HAS NUM OPERANDS 3
IF HAS TERMINATOR InstructionValue { instruction_value: Value { name: "", address: 0x55add297b0a0, is_const: false, is_null: false, is_undef: false, llvm_value: "  br i1 %_12, label %bb7, label %bb8", llvm_type: "void" } }
IF HAS NODE "bb7"
TEST 123 "  %_12 = xor i1 %_13, true"
IF HAS TARGET VAL true
IF HAS TARGET VAL VAR true
IF HAS SWITCH VAR %_12
IF HAS DISCRIMINANT IntValue(IntValue { int_value: Value { name: "_12", address: 0x55add297aff0, is_const: false, is_null: false, is_undef: false, llvm_value: "  %_12 = xor i1 %_13, true", llvm_type: "i1" } })
IF HAS ENTRY CONDITION (= %_12 true)
TEST 123 "  %_13 = icmp sle i32 %x_mut.0, 0"
TEST 123 "i1 true"
TEST 123 "  %_12 = xor i1 %_13, true"
TEST 123 "  %_13 = icmp sle i32 %x_mut.0, 0"
TEST 123 "  %x_mut.0 = phi i32 [ %0, %start ], [ %_7.0, %bb1 ]"
TEST 123 "i32 0"
IF HAS NUM OPERANDS 3
IF HAS TERMINATOR InstructionValue { instruction_value: Value { name: "", address: 0x55add297b460, is_const: false, is_null: false, is_undef: false, llvm_value: "  br i1 %_11.1, label %panic1, label %bb6, !prof !3", llvm_type: "void" } }
IF HAS NODE "bb6"
TEST 123 "  %_11.1 = extractvalue { i32, i1 } %3, 1"
IF HAS TARGET VAL false
IF HAS TARGET VAL VAR false
IF HAS SWITCH VAR %_11.1
IF HAS DISCRIMINANT IntValue(IntValue { int_value: Value { name: "_11.1", address: 0x55add297b2d0, is_const: false, is_null: false, is_undef: false, llvm_value: "  %_11.1 = extractvalue { i32, i1 } %3, 1", llvm_type: "i1" } })
IF HAS ENTRY CONDITION (= %_11.1 false)
IF HAS NUM OPERANDS 3
IF HAS TERMINATOR InstructionValue { instruction_value: Value { name: "", address: 0x55add297a9a0, is_const: false, is_null: false, is_undef: false, llvm_value: "  br i1 %_8, label %bb4, label %bb6", llvm_type: "void" } }
IF HAS NODE "bb6"
TEST 123 "  %_8 = icmp sgt i32 %1, 0"
IF HAS TARGET VAL false
IF HAS TARGET VAL VAR false
IF HAS SWITCH VAR %_8
IF HAS DISCRIMINANT IntValue(IntValue { int_value: Value { name: "_8", address: 0x55add297a8f0, is_const: false, is_null: false, is_undef: false, llvm_value: "  %_8 = icmp sgt i32 %1, 0", llvm_type: "i1" } })
IF HAS ENTRY CONDITION (= %_8 false)
[2mJan 15 20:18:34.813[0m [34mDEBUG[0m wombat_symx: Unsupported Call function "_ZN4core9panicking5panic17h4241c5ccea17facaE"
IF HAS NUM OPERANDS 3
IF HAS TERMINATOR InstructionValue { instruction_value: Value { name: "", address: 0x55add297b460, is_const: false, is_null: false, is_undef: false, llvm_value: "  br i1 %_11.1, label %panic1, label %bb6, !prof !3", llvm_type: "void" } }
IF HAS NODE "panic1"
TEST 123 "  %_11.1 = extractvalue { i32, i1 } %3, 1"
IF HAS TARGET VAL true
IF HAS TARGET VAL VAR true
IF HAS SWITCH VAR %_11.1
IF HAS DISCRIMINANT IntValue(IntValue { int_value: Value { name: "_11.1", address: 0x55add297b2d0, is_const: false, is_null: false, is_undef: false, llvm_value: "  %_11.1 = extractvalue { i32, i1 } %3, 1", llvm_type: "i1" } })
IF HAS ENTRY CONDITION (= %_11.1 true)
IF HAS NUM OPERANDS 3
IF HAS TERMINATOR InstructionValue { instruction_value: Value { name: "", address: 0x55add297b460, is_const: false, is_null: false, is_undef: false, llvm_value: "  br i1 %_11.1, label %panic1, label %bb6, !prof !3", llvm_type: "void" } }
IF HAS NODE "bb6"
TEST 123 "  %_11.1 = extractvalue { i32, i1 } %3, 1"
IF HAS TARGET VAL false
IF HAS TARGET VAL VAR false
IF HAS SWITCH VAR %_11.1
IF HAS DISCRIMINANT IntValue(IntValue { int_value: Value { name: "_11.1", address: 0x55add297b2d0, is_const: false, is_null: false, is_undef: false, llvm_value: "  %_11.1 = extractvalue { i32, i1 } %3, 1", llvm_type: "i1" } })
IF HAS ENTRY CONDITION (= %_11.1 false)
TEST 123 "  %y_mut.0 = phi i32 [ %1, %bb3 ], [ %_11.0, %bb4 ]"
TEST 123 "  %_11.0 = extractvalue { i32, i1 } %3, 0"
IF HAS NUM OPERANDS 3
IF HAS TERMINATOR InstructionValue { instruction_value: Value { name: "", address: 0x55add297b460, is_const: false, is_null: false, is_undef: false, llvm_value: "  br i1 %_11.1, label %panic1, label %bb6, !prof !3", llvm_type: "void" } }
IF HAS NODE "panic1"
TEST 123 "  %_11.1 = extractvalue { i32, i1 } %3, 1"
IF HAS TARGET VAL true
IF HAS TARGET VAL VAR true
IF HAS SWITCH VAR %_11.1
IF HAS DISCRIMINANT IntValue(IntValue { int_value: Value { name: "_11.1", address: 0x55add297b2d0, is_const: false, is_null: false, is_undef: false, llvm_value: "  %_11.1 = extractvalue { i32, i1 } %3, 1", llvm_type: "i1" } })
IF HAS ENTRY CONDITION (= %_11.1 true)
TEST 123 "  %_11.1 = extractvalue { i32, i1 } %3, 1"
TEST 123 "  %3 = call { i32, i1 } @llvm.smul.with.overflow.i32(i32 -1, i32 %1)"
TEST 123 "  %_11.0 = extractvalue { i32, i1 } %3, 0"
TEST 123 "  %3 = call { i32, i1 } @llvm.smul.with.overflow.i32(i32 -1, i32 %1)"
TEST 123 "i32 -1"
TEST 123 "i32 %1"
TEST 123 "  %3 = call { i32, i1 } @llvm.smul.with.overflow.i32(i32 -1, i32 %1)"
TEST 123 "  %3 = call { i32, i1 } @llvm.smul.with.overflow.i32(i32 -1, i32 %1)"
IF HAS NUM OPERANDS 3
IF HAS TERMINATOR InstructionValue { instruction_value: Value { name: "", address: 0x55add297a9a0, is_const: false, is_null: false, is_undef: false, llvm_value: "  br i1 %_8, label %bb4, label %bb6", llvm_type: "void" } }
IF HAS NODE "bb4"
TEST 123 "  %_8 = icmp sgt i32 %1, 0"
IF HAS TARGET VAL true
IF HAS TARGET VAL VAR true
IF HAS SWITCH VAR %_8
IF HAS DISCRIMINANT IntValue(IntValue { int_value: Value { name: "_8", address: 0x55add297a8f0, is_const: false, is_null: false, is_undef: false, llvm_value: "  %_8 = icmp sgt i32 %1, 0", llvm_type: "i1" } })
IF HAS ENTRY CONDITION (= %_8 true)
IF HAS NUM OPERANDS 3
IF HAS TERMINATOR InstructionValue { instruction_value: Value { name: "", address: 0x55add297a9a0, is_const: false, is_null: false, is_undef: false, llvm_value: "  br i1 %_8, label %bb4, label %bb6", llvm_type: "void" } }
IF HAS NODE "bb4"
TEST 123 "  %_8 = icmp sgt i32 %1, 0"
IF HAS TARGET VAL true
IF HAS TARGET VAL VAR true
IF HAS SWITCH VAR %_8
IF HAS DISCRIMINANT IntValue(IntValue { int_value: Value { name: "_8", address: 0x55add297a8f0, is_const: false, is_null: false, is_undef: false, llvm_value: "  %_8 = icmp sgt i32 %1, 0", llvm_type: "i1" } })
IF HAS ENTRY CONDITION (= %_8 true)
IF HAS NUM OPERANDS 3
IF HAS TERMINATOR InstructionValue { instruction_value: Value { name: "", address: 0x55add297a9a0, is_const: false, is_null: false, is_undef: false, llvm_value: "  br i1 %_8, label %bb4, label %bb6", llvm_type: "void" } }
IF HAS NODE "bb6"
TEST 123 "  %_8 = icmp sgt i32 %1, 0"
IF HAS TARGET VAL false
IF HAS TARGET VAL VAR false
IF HAS SWITCH VAR %_8
IF HAS DISCRIMINANT IntValue(IntValue { int_value: Value { name: "_8", address: 0x55add297a8f0, is_const: false, is_null: false, is_undef: false, llvm_value: "  %_8 = icmp sgt i32 %1, 0", llvm_type: "i1" } })
IF HAS ENTRY CONDITION (= %_8 false)
TEST 123 "  %y_mut.0 = phi i32 [ %1, %bb3 ], [ %_11.0, %bb4 ]"
TEST 123 "i32 %1"
TEST 123 "  %_8 = icmp sgt i32 %1, 0"
TEST 123 "i32 %1"
TEST 123 "i32 0"
IF HAS NUM OPERANDS 3
IF HAS TERMINATOR InstructionValue { instruction_value: Value { name: "", address: 0x55add297a7f0, is_const: false, is_null: false, is_undef: false, llvm_value: "  br i1 %_4, label %bb1, label %bb3", llvm_type: "void" } }
IF HAS NODE "bb3"
TEST 123 "  %_4 = icmp sgt i32 %0, 0"
IF HAS TARGET VAL false
IF HAS TARGET VAL VAR false
IF HAS SWITCH VAR %_4
IF HAS DISCRIMINANT IntValue(IntValue { int_value: Value { name: "_4", address: 0x55add297a740, is_const: false, is_null: false, is_undef: false, llvm_value: "  %_4 = icmp sgt i32 %0, 0", llvm_type: "i1" } })
IF HAS ENTRY CONDITION (= %_4 false)
IF HAS NUM OPERANDS 3
IF HAS TERMINATOR InstructionValue { instruction_value: Value { name: "", address: 0x55add297ad60, is_const: false, is_null: false, is_undef: false, llvm_value: "  br i1 %_7.1, label %panic, label %bb3, !prof !3", llvm_type: "void" } }
IF HAS NODE "bb3"
TEST 123 "  %_7.1 = extractvalue { i32, i1 } %2, 1"
IF HAS TARGET VAL false
IF HAS TARGET VAL VAR false
IF HAS SWITCH VAR %_7.1
IF HAS DISCRIMINANT IntValue(IntValue { int_value: Value { name: "_7.1", address: 0x55add297abd0, is_const: false, is_null: false, is_undef: false, llvm_value: "  %_7.1 = extractvalue { i32, i1 } %2, 1", llvm_type: "i1" } })
IF HAS ENTRY CONDITION (= %_7.1 false)
[2mJan 15 20:18:34.817[0m [34mDEBUG[0m wombat_symx: Unsupported Call function "_ZN4core9panicking5panic17h4241c5ccea17facaE"
IF HAS NUM OPERANDS 3
IF HAS TERMINATOR InstructionValue { instruction_value: Value { name: "", address: 0x55add297ad60, is_const: false, is_null: false, is_undef: false, llvm_value: "  br i1 %_7.1, label %panic, label %bb3, !prof !3", llvm_type: "void" } }
IF HAS NODE "panic"
TEST 123 "  %_7.1 = extractvalue { i32, i1 } %2, 1"
IF HAS TARGET VAL true
IF HAS TARGET VAL VAR true
IF HAS SWITCH VAR %_7.1
IF HAS DISCRIMINANT IntValue(IntValue { int_value: Value { name: "_7.1", address: 0x55add297abd0, is_const: false, is_null: false, is_undef: false, llvm_value: "  %_7.1 = extractvalue { i32, i1 } %2, 1", llvm_type: "i1" } })
IF HAS ENTRY CONDITION (= %_7.1 true)
IF HAS NUM OPERANDS 3
IF HAS TERMINATOR InstructionValue { instruction_value: Value { name: "", address: 0x55add297ad60, is_const: false, is_null: false, is_undef: false, llvm_value: "  br i1 %_7.1, label %panic, label %bb3, !prof !3", llvm_type: "void" } }
IF HAS NODE "bb3"
TEST 123 "  %_7.1 = extractvalue { i32, i1 } %2, 1"
IF HAS TARGET VAL false
IF HAS TARGET VAL VAR false
IF HAS SWITCH VAR %_7.1
IF HAS DISCRIMINANT IntValue(IntValue { int_value: Value { name: "_7.1", address: 0x55add297abd0, is_const: false, is_null: false, is_undef: false, llvm_value: "  %_7.1 = extractvalue { i32, i1 } %2, 1", llvm_type: "i1" } })
IF HAS ENTRY CONDITION (= %_7.1 false)
TEST 123 "  %x_mut.0 = phi i32 [ %0, %start ], [ %_7.0, %bb1 ]"
TEST 123 "  %_7.0 = extractvalue { i32, i1 } %2, 0"
IF HAS NUM OPERANDS 3
IF HAS TERMINATOR InstructionValue { instruction_value: Value { name: "", address: 0x55add297ad60, is_const: false, is_null: false, is_undef: false, llvm_value: "  br i1 %_7.1, label %panic, label %bb3, !prof !3", llvm_type: "void" } }
IF HAS NODE "panic"
TEST 123 "  %_7.1 = extractvalue { i32, i1 } %2, 1"
IF HAS TARGET VAL true
IF HAS TARGET VAL VAR true
IF HAS SWITCH VAR %_7.1
IF HAS DISCRIMINANT IntValue(IntValue { int_value: Value { name: "_7.1", address: 0x55add297abd0, is_const: false, is_null: false, is_undef: false, llvm_value: "  %_7.1 = extractvalue { i32, i1 } %2, 1", llvm_type: "i1" } })
IF HAS ENTRY CONDITION (= %_7.1 true)
TEST 123 "  %_7.1 = extractvalue { i32, i1 } %2, 1"
TEST 123 "  %2 = call { i32, i1 } @llvm.smul.with.overflow.i32(i32 -1, i32 %0)"
TEST 123 "  %_7.0 = extractvalue { i32, i1 } %2, 0"
TEST 123 "  %2 = call { i32, i1 } @llvm.smul.with.overflow.i32(i32 -1, i32 %0)"
TEST 123 "i32 -1"
TEST 123 "i32 %0"
TEST 123 "  %2 = call { i32, i1 } @llvm.smul.with.overflow.i32(i32 -1, i32 %0)"
TEST 123 "  %2 = call { i32, i1 } @llvm.smul.with.overflow.i32(i32 -1, i32 %0)"
IF HAS NUM OPERANDS 3
IF HAS TERMINATOR InstructionValue { instruction_value: Value { name: "", address: 0x55add297a7f0, is_const: false, is_null: false, is_undef: false, llvm_value: "  br i1 %_4, label %bb1, label %bb3", llvm_type: "void" } }
IF HAS NODE "bb1"
TEST 123 "  %_4 = icmp sgt i32 %0, 0"
IF HAS TARGET VAL true
IF HAS TARGET VAL VAR true
IF HAS SWITCH VAR %_4
IF HAS DISCRIMINANT IntValue(IntValue { int_value: Value { name: "_4", address: 0x55add297a740, is_const: false, is_null: false, is_undef: false, llvm_value: "  %_4 = icmp sgt i32 %0, 0", llvm_type: "i1" } })
IF HAS ENTRY CONDITION (= %_4 true)
IF HAS NUM OPERANDS 3
IF HAS TERMINATOR InstructionValue { instruction_value: Value { name: "", address: 0x55add297a7f0, is_const: false, is_null: false, is_undef: false, llvm_value: "  br i1 %_4, label %bb1, label %bb3", llvm_type: "void" } }
IF HAS NODE "bb3"
TEST 123 "  %_4 = icmp sgt i32 %0, 0"
IF HAS TARGET VAL false
IF HAS TARGET VAL VAR false
IF HAS SWITCH VAR %_4
IF HAS DISCRIMINANT IntValue(IntValue { int_value: Value { name: "_4", address: 0x55add297a740, is_const: false, is_null: false, is_undef: false, llvm_value: "  %_4 = icmp sgt i32 %0, 0", llvm_type: "i1" } })
IF HAS ENTRY CONDITION (= %_4 false)
TEST 123 "  %x_mut.0 = phi i32 [ %0, %start ], [ %_7.0, %bb1 ]"
TEST 123 "i32 %0"
IF HAS NUM OPERANDS 3
IF HAS TERMINATOR InstructionValue { instruction_value: Value { name: "", address: 0x55add297a7f0, is_const: false, is_null: false, is_undef: false, llvm_value: "  br i1 %_4, label %bb1, label %bb3", llvm_type: "void" } }
IF HAS NODE "bb1"
TEST 123 "  %_4 = icmp sgt i32 %0, 0"
IF HAS TARGET VAL true
IF HAS TARGET VAL VAR true
IF HAS SWITCH VAR %_4
IF HAS DISCRIMINANT IntValue(IntValue { int_value: Value { name: "_4", address: 0x55add297a740, is_const: false, is_null: false, is_undef: false, llvm_value: "  %_4 = icmp sgt i32 %0, 0", llvm_type: "i1" } })
IF HAS ENTRY CONDITION (= %_4 true)
TEST 123 "  %_4 = icmp sgt i32 %0, 0"
TEST 123 "i32 %0"
TEST 123 "i32 0"
TEST 123 "i32 %0"
TEST 123 "i32 %1"
TEST 123 "i32 %z_non_mut"
[2mJan 15 20:18:34.822[0m [34mDEBUG[0m wombat_symx: (declare-fun panic_var () Bool)
(declare-fun common_end () Bool)
(declare-fun %_23.1 () Bool)
(declare-fun panic3 () Bool)
(declare-fun bb12 () Bool)
(declare-fun %_21.1 () Bool)
(declare-fun panic2 () Bool)
(declare-fun %5.1 () Bool)
(declare-fun %5.0 () Int)
(declare-fun %_23.0 () Int)
(declare-fun %y_mut.0 () Int)
(declare-fun %_21.0 () Int)
(declare-fun bb11 () Bool)
(declare-fun %_15 () Bool)
(declare-fun bb9 () Bool)
(declare-fun %4.1 () Bool)
(declare-fun %4.0 () Int)
(declare-fun %z_non_mut () Int)
(declare-fun %x_mut.0 () Int)
(declare-fun bb10 () Bool)
(declare-fun %_12 () Bool)
(declare-fun bb7 () Bool)
(declare-fun const_true () Bool)
(declare-fun const_0 () Int)
(declare-fun %_16 () Bool)
(declare-fun bb8 () Bool)
(declare-fun %_13 () Bool)
(declare-fun %_8 () Bool)
(declare-fun %_11.1 () Bool)
(declare-fun bb6 () Bool)
(declare-fun panic1 () Bool)
(declare-fun const_-1 () Int)
(declare-fun %_11.0 () Int)
(declare-fun %3.1 () Bool)
(declare-fun %3.0 () Int)
(declare-fun %1 () Int)
(declare-fun bb4 () Bool)
(declare-fun %_7.1 () Bool)
(declare-fun %_4 () Bool)
(declare-fun bb3 () Bool)
(declare-fun panic () Bool)
(declare-fun %_7.0 () Int)
(declare-fun %2.1 () Bool)
(declare-fun %2.0 () Int)
(declare-fun %0 () Int)
(declare-fun bb1 () Bool)
(declare-fun start () Bool)
(assert (= common_end
   (=> (and true true true true true true true true) (and (not panic_var) true))))
(assert (= panic3
   (=> (and true (= %_23.1 true)) (=> (= panic_var true) (and true common_end)))))
(assert (= bb12
   (=> (and true (= %_23.1 false))
       (=> (= panic_var false) (and true common_end)))))
(assert (= panic2
   (=> (and true (= %_21.1 true)) (=> (= panic_var true) (and true common_end)))))
(assert (let ((a!1 (> (+ %_21.0 %y_mut.0)
              (ite (bvslt #x7fffffff #x00000000)
                   (- (bv2int #x7fffffff) 4294967296)
                   (bv2int #x7fffffff))))
      (a!2 (< (+ %_21.0 %y_mut.0)
              (ite (bvslt #x80000000 #x00000000)
                   (- (bv2int #x80000000) 4294967296)
                   (bv2int #x80000000)))))
(let ((a!3 (=> (and (= %5.0 (+ %_21.0 %y_mut.0)) (= %5.1 (or a!1 a!2)))
               (=> (= %_23.0 %5.0) (=> (= %_23.1 %5.1) (and true bb12 panic3))))))
  (= bb11 (=> (and true (= %_21.1 false)) a!3)))))
(assert (= bb9
   (=> (and true (= %_15 true)) (=> (= panic_var true) (and true common_end)))))
(assert (let ((a!1 (> (+ %x_mut.0 %z_non_mut)
              (ite (bvslt #x7fffffff #x00000000)
                   (- (bv2int #x7fffffff) 4294967296)
                   (bv2int #x7fffffff))))
      (a!2 (< (+ %x_mut.0 %z_non_mut)
              (ite (bvslt #x80000000 #x00000000)
                   (- (bv2int #x80000000) 4294967296)
                   (bv2int #x80000000)))))
(let ((a!3 (=> (and (= %4.0 (+ %x_mut.0 %z_non_mut)) (= %4.1 (or a!1 a!2)))
               (=> (= %_21.0 %4.0) (=> (= %_21.1 %4.1) (and true bb11 panic2))))))
  (= bb10 (=> (and true (= %_15 false)) a!3)))))
(assert (= bb7
   (=> (and true (= %_12 true)) (=> (= panic_var true) (and true common_end)))))
(assert (= const_true true))
(assert (= const_0 0))
(assert (let ((a!1 (=> (= %_16 (<= %y_mut.0 const_0))
               (=> (= %_15 (xor %_16 const_true)) (and true bb9 bb10)))))
  (= bb8 (=> (and true (= %_12 false)) a!1))))
(assert (= const_true true))
(assert (= const_0 0))
(assert (let ((a!1 (=> (= %_13 (<= %x_mut.0 const_0))
               (=> (= %_12 (xor %_13 const_true)) (and true bb8 bb7)))))
  (= bb6 (=> (and true (= %_11.1 false) (= %_8 false)) a!1))))
(assert (= panic1
   (=> (and true (= %_11.1 true)) (=> (= panic_var true) (and true common_end)))))
(assert (= const_-1 (- 1)))
(assert (let ((a!1 (> (* const_-1 %1)
              (ite (bvslt #x7fffffff #x00000000)
                   (- (bv2int #x7fffffff) 4294967296)
                   (bv2int #x7fffffff))))
      (a!2 (< (* const_-1 %1)
              (ite (bvslt #x80000000 #x00000000)
                   (- (bv2int #x80000000) 4294967296)
                   (bv2int #x80000000))))
      (a!3 (=> (= %_11.1 %3.1)
               (=> (=> (= %_11.1 false) (= %y_mut.0 %_11.0))
                   (and true bb6 panic1)))))
(let ((a!4 (=> (and (= %3.0 (* const_-1 %1)) (= %3.1 (or a!1 a!2)))
               (=> (= %_11.0 %3.0) a!3))))
  (= bb4 (=> (and true (= %_8 true)) a!4)))))
(assert (= const_0 0))
(assert (let ((a!1 (=> (= %_8 (> %1 const_0))
               (=> (=> (= %_8 false) (= %y_mut.0 %1)) (and true bb4 bb6)))))
  (= bb3 (=> (and true (= %_4 false) (= %_7.1 false)) a!1))))
(assert (= panic
   (=> (and true (= %_7.1 true)) (=> (= panic_var true) (and true common_end)))))
(assert (= const_-1 (- 1)))
(assert (let ((a!1 (> (* const_-1 %0)
              (ite (bvslt #x7fffffff #x00000000)
                   (- (bv2int #x7fffffff) 4294967296)
                   (bv2int #x7fffffff))))
      (a!2 (< (* const_-1 %0)
              (ite (bvslt #x80000000 #x00000000)
                   (- (bv2int #x80000000) 4294967296)
                   (bv2int #x80000000))))
      (a!3 (=> (= %_7.1 %2.1)
               (=> (=> (= %_7.1 false) (= %x_mut.0 %_7.0)) (and true bb3 panic)))))
(let ((a!4 (=> (and (= %2.0 (* const_-1 %0)) (= %2.1 (or a!1 a!2)))
               (=> (= %_7.0 %2.0) a!3))))
  (= bb1 (=> (and true (= %_4 true)) a!4)))))
(assert (= const_0 0))
(assert (let ((a!1 (=> (= %_4 (> %0 const_0))
               (=> (=> (= %_4 false) (= %x_mut.0 %0)) (and true bb3 bb1)))))
  (= start (=> true a!1))))
(assert (let ((a!1 (>= %0
               (ite (bvslt #x80000000 #x00000000)
                    (- (bv2int #x80000000) 4294967296)
                    (bv2int #x80000000))))
      (a!2 (<= %0
               (ite (bvslt #x7fffffff #x00000000)
                    (- (bv2int #x7fffffff) 4294967296)
                    (bv2int #x7fffffff)))))
  (and a!1 a!2)))
(assert (let ((a!1 (>= %1
               (ite (bvslt #x80000000 #x00000000)
                    (- (bv2int #x80000000) 4294967296)
                    (bv2int #x80000000))))
      (a!2 (<= %1
               (ite (bvslt #x7fffffff #x00000000)
                    (- (bv2int #x7fffffff) 4294967296)
                    (bv2int #x7fffffff)))))
  (and a!1 a!2)))
(assert (let ((a!1 (>= %z_non_mut
               (ite (bvslt #x80000000 #x00000000)
                    (- (bv2int #x80000000) 4294967296)
                    (bv2int #x80000000))))
      (a!2 (<= %z_non_mut
               (ite (bvslt #x7fffffff #x00000000)
                    (- (bv2int #x7fffffff) 4294967296)
                    (bv2int #x7fffffff)))))
  (and a!1 a!2)))
(assert (not start))


Function safety: unsafe
[2mJan 15 20:18:35.067[0m [34mDEBUG[0m wombat_symx: 
%_11.1 -> false
%_16 -> true
panic2 -> true
panic_var -> true
bb12 -> true
%3.1 -> false
%_7.1 -> false
bb3 -> false
bb10 -> false
bb1 -> true
const_true -> true
%_21.1 -> false
panic3 -> false
%4.1 -> false
panic -> true
%_8 -> false
common_end -> false
bb7 -> true
%_15 -> false
%_23.1 -> true
%2.1 -> false
%_4 -> false
bb6 -> false
panic1 -> true
bb4 -> true
bb8 -> false
const_0 -> 0
const_-1 -> (- 1)
start -> false
bb9 -> true
%_23.0 -> (- 2181038082)
%_13 -> true
%5.0 -> (- 2181038082)
%_12 -> false
bb11 -> false
%5.1 -> true
%y_mut.0 -> (- 134217730)
%z_non_mut -> (- 2046820320)
%3.0 -> 134217730
%1 -> (- 134217730)
%_11.0 -> (- 134217730)
%_7.0 -> 32
%4.0 -> (- 2046820352)
%_21.0 -> (- 2046820352)
%0 -> (- 32)
%2.0 -> 32
%x_mut.0 -> (- 32)


Argument values:
	"y_mut" = (- 134217730)
	"z_non_mut" = (- 2046820320)
	"x_mut" = (- 32)

************************************


[2mJan 15 20:18:35.078[0m [34mDEBUG[0m wombat_symx: Func param instr: IntValue { int_value: Value { name: "", address: 0x55add2974620, is_const: false, is_null: false, is_undef: false, llvm_value: "i32 %0", llvm_type: "i32" } }
TEST 123 "i32 %0"
TEST 123 "  store i32 %0, i32* %x, align 4"
TEST 123 "  %x = alloca i32, align 4"
[2mJan 15 20:18:35.109[0m [34mDEBUG[0m wombat_symx: Function arg names: {"x": "%0"}
Backward Symbolic Execution in hello_world::abs::h0f9f1fc5a72fe454
[2mJan 15 20:18:35.109[0m [34mDEBUG[0m wombat_symx: Number of Nodes: 6
[2mJan 15 20:18:35.110[0m [34mDEBUG[0m wombat_symx: Arg count: 1
[2mJan 15 20:18:35.110[0m [34mDEBUG[0m wombat_symx: Basic Blocks:
[2mJan 15 20:18:35.110[0m [34mDEBUG[0m wombat_symx: 	Basic Block: "start"
[2mJan 15 20:18:35.110[0m [34mDEBUG[0m wombat_symx: 		is_cleanup: NO
[2mJan 15 20:18:35.110[0m [34mDEBUG[0m wombat_symx: 		Statement: "\"  %_2 = icmp slt i32 %0, 0\""
[2mJan 15 20:18:35.110[0m [34mDEBUG[0m wombat_symx: 		Statement: "\"  br i1 %_2, label %bb1, label %bb3\""
[2mJan 15 20:18:35.110[0m [34mDEBUG[0m wombat_symx: 		Last statement is a terminator
[2mJan 15 20:18:35.110[0m [34mDEBUG[0m wombat_symx: 	Basic Block: "bb3"
[2mJan 15 20:18:35.110[0m [34mDEBUG[0m wombat_symx: 		is_cleanup: NO
[2mJan 15 20:18:35.110[0m [34mDEBUG[0m wombat_symx: 		Statement: "\"  %x.0 = phi i32 [ %0, %start ], [ %_5.0, %bb1 ]\""
[2mJan 15 20:18:35.110[0m [34mDEBUG[0m wombat_symx: 		Statement: "\"  %_7 = icmp sge i32 %x.0, 0\""
[2mJan 15 20:18:35.110[0m [34mDEBUG[0m wombat_symx: 		Statement: "\"  %_6 = xor i1 %_7, true\""
[2mJan 15 20:18:35.110[0m [34mDEBUG[0m wombat_symx: 		Statement: "\"  br i1 %_6, label %bb4, label %bb5\""
[2mJan 15 20:18:35.110[0m [34mDEBUG[0m wombat_symx: 		Last statement is a terminator
[2mJan 15 20:18:35.110[0m [34mDEBUG[0m wombat_symx: 	Basic Block: "bb1"
[2mJan 15 20:18:35.110[0m [34mDEBUG[0m wombat_symx: 		is_cleanup: NO
[2mJan 15 20:18:35.110[0m [34mDEBUG[0m wombat_symx: 		Statement: "\"  %1 = call { i32, i1 } @llvm.smul.with.overflow.i32(i32 -1, i32 %0)\""
[2mJan 15 20:18:35.111[0m [34mDEBUG[0m wombat_symx: 		Statement: "\"  %_5.0 = extractvalue { i32, i1 } %1, 0\""
[2mJan 15 20:18:35.111[0m [34mDEBUG[0m wombat_symx: 		Statement: "\"  %_5.1 = extractvalue { i32, i1 } %1, 1\""
[2mJan 15 20:18:35.111[0m [34mDEBUG[0m wombat_symx: 		Statement: "\"  br i1 %_5.1, label %panic, label %bb3, !prof !3\""
[2mJan 15 20:18:35.111[0m [34mDEBUG[0m wombat_symx: 		Last statement is a terminator
[2mJan 15 20:18:35.111[0m [34mDEBUG[0m wombat_symx: 	Basic Block: "panic"
[2mJan 15 20:18:35.111[0m [34mDEBUG[0m wombat_symx: 		is_cleanup: YES
[2mJan 15 20:18:35.111[0m [34mDEBUG[0m wombat_symx: 		Statement: "\"  call void @_ZN4core9panicking5panic17h4241c5ccea17facaE([0 x i8]* noundef nonnull align 1 bitcast ([33 x i8]* @str.0 to [0 x i8]*), i64 33, %\\\"core::panic::location::Location\\\"* noundef align 8 dereferenceable(24) bitcast (<{ i8*, [16 x i8] }>* @alloc60 to %\\\"core::panic::location::Location\\\"*)) #7\""
[2mJan 15 20:18:35.111[0m [34mDEBUG[0m wombat_symx: 		Statement: "\"  unreachable\""
[2mJan 15 20:18:35.111[0m [34mDEBUG[0m wombat_symx: 		Last statement is a terminator
[2mJan 15 20:18:35.111[0m [34mDEBUG[0m wombat_symx: 	Basic Block: "bb5"
[2mJan 15 20:18:35.111[0m [34mDEBUG[0m wombat_symx: 		is_cleanup: NO
[2mJan 15 20:18:35.111[0m [34mDEBUG[0m wombat_symx: 		Statement: "\"  ret i32 %x.0\""
[2mJan 15 20:18:35.111[0m [34mDEBUG[0m wombat_symx: 		Last statement is a terminator
[2mJan 15 20:18:35.111[0m [34mDEBUG[0m wombat_symx: 	Basic Block: "bb4"
[2mJan 15 20:18:35.111[0m [34mDEBUG[0m wombat_symx: 		is_cleanup: YES
[2mJan 15 20:18:35.111[0m [34mDEBUG[0m wombat_symx: 		Statement: "\"  call void @_ZN4core9panicking5panic17h4241c5ccea17facaE([0 x i8]* noundef nonnull align 1 bitcast (<{ [24 x i8] }>* @alloc61 to [0 x i8]*), i64 24, %\\\"core::panic::location::Location\\\"* noundef align 8 dereferenceable(24) bitcast (<{ i8*, [16 x i8] }>* @alloc63 to %\\\"core::panic::location::Location\\\"*)) #7\""
[2mJan 15 20:18:35.111[0m [34mDEBUG[0m wombat_symx: 		Statement: "\"  unreachable\""
[2mJan 15 20:18:35.111[0m [34mDEBUG[0m wombat_symx: 		Last statement is a terminator
[2mJan 15 20:18:35.111[0m [34mDEBUG[0m wombat_symx: 
[2mJan 15 20:18:35.111[0m [34mDEBUG[0m wombat_symx: Start node: "start"
IF STATEMENT
terminator is InstructionValue { instruction_value: Value { name: "", address: 0x55add297de10, is_const: false, is_null: false, is_undef: false, llvm_value: "  br i1 %_2, label %bb1, label %bb3", llvm_type: "void" } }
Operand 0 is Some(Left(IntValue(IntValue { int_value: Value { name: "_2", address: 0x55add297dd60, is_const: false, is_null: false, is_undef: false, llvm_value: "  %_2 = icmp slt i32 %0, 0", llvm_type: "i1" } })))
Operand 1 is Some(Right(BasicBlock { address: 0x55add297d950, is_const: false, llvm_value: "\nbb3:                                              ; preds = %bb1, %start\n  %x.0 = phi i32 [ %0, %start ], [ %_5.0, %bb1 ]\n  %_7 = icmp sge i32 %x.0, 0\n  %_6 = xor i1 %_7, true\n  br i1 %_6, label %bb4, label %bb5\n", llvm_type: "label" }))
Operand 2 is Some(Right(BasicBlock { address: 0x55add297d9a0, is_const: false, llvm_value: "\nbb1:                                              ; preds = %start\n  %1 = call { i32, i1 } @llvm.smul.with.overflow.i32(i32 -1, i32 %0)\n  %_5.0 = extractvalue { i32, i1 } %1, 0\n  %_5.1 = extractvalue { i32, i1 } %1, 1\n  br i1 %_5.1, label %panic, label %bb3, !prof !3\n", llvm_type: "label" }))
IF STATEMENT
terminator is InstructionValue { instruction_value: Value { name: "", address: 0x55add297e050, is_const: false, is_null: false, is_undef: false, llvm_value: "  br i1 %_6, label %bb4, label %bb5", llvm_type: "void" } }
Operand 0 is Some(Left(IntValue(IntValue { int_value: Value { name: "_6", address: 0x55add297dfa0, is_const: false, is_null: false, is_undef: false, llvm_value: "  %_6 = xor i1 %_7, true", llvm_type: "i1" } })))
Operand 1 is Some(Right(BasicBlock { address: 0x55add297da90, is_const: false, llvm_value: "\nbb5:                                              ; preds = %bb3\n  ret i32 %x.0\n", llvm_type: "label" }))
Operand 2 is Some(Right(BasicBlock { address: 0x55add297dae0, is_const: false, llvm_value: "\nbb4:                                              ; preds = %bb3\n  call void @_ZN4core9panicking5panic17h4241c5ccea17facaE([0 x i8]* noundef nonnull align 1 bitcast (<{ [24 x i8] }>* @alloc61 to [0 x i8]*), i64 24, %\"core::panic::location::Location\"* noundef align 8 dereferenceable(24) bitcast (<{ i8*, [16 x i8] }>* @alloc63 to %\"core::panic::location::Location\"*)) #7\n  unreachable\n", llvm_type: "label" }))
IF STATEMENT
terminator is InstructionValue { instruction_value: Value { name: "", address: 0x55add297e410, is_const: false, is_null: false, is_undef: false, llvm_value: "  br i1 %_5.1, label %panic, label %bb3, !prof !3", llvm_type: "void" } }
Operand 0 is Some(Left(IntValue(IntValue { int_value: Value { name: "_5.1", address: 0x55add297e280, is_const: false, is_null: false, is_undef: false, llvm_value: "  %_5.1 = extractvalue { i32, i1 } %1, 1", llvm_type: "i1" } })))
Operand 1 is Some(Right(BasicBlock { address: 0x55add297d950, is_const: false, llvm_value: "\nbb3:                                              ; preds = %bb1, %start\n  %x.0 = phi i32 [ %0, %start ], [ %_5.0, %bb1 ]\n  %_7 = icmp sge i32 %x.0, 0\n  %_6 = xor i1 %_7, true\n  br i1 %_6, label %bb4, label %bb5\n", llvm_type: "label" }))
Operand 2 is Some(Right(BasicBlock { address: 0x55add297da40, is_const: false, llvm_value: "\npanic:                                            ; preds = %bb1\n  call void @_ZN4core9panicking5panic17h4241c5ccea17facaE([0 x i8]* noundef nonnull align 1 bitcast ([33 x i8]* @str.0 to [0 x i8]*), i64 33, %\"core::panic::location::Location\"* noundef align 8 dereferenceable(24) bitcast (<{ i8*, [16 x i8] }>* @alloc60 to %\"core::panic::location::Location\"*)) #7\n  unreachable\n", llvm_type: "label" }))
[2mJan 15 20:18:35.112[0m [34mDEBUG[0m wombat_symx: 	Successor to start node: "bb3"
[2mJan 15 20:18:35.112[0m [34mDEBUG[0m wombat_symx: 	Successor to start node: "bb1"
IF STATEMENT
terminator is InstructionValue { instruction_value: Value { name: "", address: 0x55add297de10, is_const: false, is_null: false, is_undef: false, llvm_value: "  br i1 %_2, label %bb1, label %bb3", llvm_type: "void" } }
Operand 0 is Some(Left(IntValue(IntValue { int_value: Value { name: "_2", address: 0x55add297dd60, is_const: false, is_null: false, is_undef: false, llvm_value: "  %_2 = icmp slt i32 %0, 0", llvm_type: "i1" } })))
Operand 1 is Some(Right(BasicBlock { address: 0x55add297d950, is_const: false, llvm_value: "\nbb3:                                              ; preds = %bb1, %start\n  %x.0 = phi i32 [ %0, %start ], [ %_5.0, %bb1 ]\n  %_7 = icmp sge i32 %x.0, 0\n  %_6 = xor i1 %_7, true\n  br i1 %_6, label %bb4, label %bb5\n", llvm_type: "label" }))
Operand 2 is Some(Right(BasicBlock { address: 0x55add297d9a0, is_const: false, llvm_value: "\nbb1:                                              ; preds = %start\n  %1 = call { i32, i1 } @llvm.smul.with.overflow.i32(i32 -1, i32 %0)\n  %_5.0 = extractvalue { i32, i1 } %1, 0\n  %_5.1 = extractvalue { i32, i1 } %1, 1\n  br i1 %_5.1, label %panic, label %bb3, !prof !3\n", llvm_type: "label" }))
IF STATEMENT
terminator is InstructionValue { instruction_value: Value { name: "", address: 0x55add297e050, is_const: false, is_null: false, is_undef: false, llvm_value: "  br i1 %_6, label %bb4, label %bb5", llvm_type: "void" } }
Operand 0 is Some(Left(IntValue(IntValue { int_value: Value { name: "_6", address: 0x55add297dfa0, is_const: false, is_null: false, is_undef: false, llvm_value: "  %_6 = xor i1 %_7, true", llvm_type: "i1" } })))
Operand 1 is Some(Right(BasicBlock { address: 0x55add297da90, is_const: false, llvm_value: "\nbb5:                                              ; preds = %bb3\n  ret i32 %x.0\n", llvm_type: "label" }))
Operand 2 is Some(Right(BasicBlock { address: 0x55add297dae0, is_const: false, llvm_value: "\nbb4:                                              ; preds = %bb3\n  call void @_ZN4core9panicking5panic17h4241c5ccea17facaE([0 x i8]* noundef nonnull align 1 bitcast (<{ [24 x i8] }>* @alloc61 to [0 x i8]*), i64 24, %\"core::panic::location::Location\"* noundef align 8 dereferenceable(24) bitcast (<{ i8*, [16 x i8] }>* @alloc63 to %\"core::panic::location::Location\"*)) #7\n  unreachable\n", llvm_type: "label" }))
IF STATEMENT
terminator is InstructionValue { instruction_value: Value { name: "", address: 0x55add297e410, is_const: false, is_null: false, is_undef: false, llvm_value: "  br i1 %_5.1, label %panic, label %bb3, !prof !3", llvm_type: "void" } }
Operand 0 is Some(Left(IntValue(IntValue { int_value: Value { name: "_5.1", address: 0x55add297e280, is_const: false, is_null: false, is_undef: false, llvm_value: "  %_5.1 = extractvalue { i32, i1 } %1, 1", llvm_type: "i1" } })))
Operand 1 is Some(Right(BasicBlock { address: 0x55add297d950, is_const: false, llvm_value: "\nbb3:                                              ; preds = %bb1, %start\n  %x.0 = phi i32 [ %0, %start ], [ %_5.0, %bb1 ]\n  %_7 = icmp sge i32 %x.0, 0\n  %_6 = xor i1 %_7, true\n  br i1 %_6, label %bb4, label %bb5\n", llvm_type: "label" }))
Operand 2 is Some(Right(BasicBlock { address: 0x55add297da40, is_const: false, llvm_value: "\npanic:                                            ; preds = %bb1\n  call void @_ZN4core9panicking5panic17h4241c5ccea17facaE([0 x i8]* noundef nonnull align 1 bitcast ([33 x i8]* @str.0 to [0 x i8]*), i64 33, %\"core::panic::location::Location\"* noundef align 8 dereferenceable(24) bitcast (<{ i8*, [16 x i8] }>* @alloc60 to %\"core::panic::location::Location\"*)) #7\n  unreachable\n", llvm_type: "label" }))
[2mJan 15 20:18:35.112[0m [34mDEBUG[0m wombat_symx: Forward edges:	{"bb3": {"bb4", "bb5"}, "bb5": {"common_end"}, "bb4": {"common_end"}, "bb1": {"bb3", "panic"}, "start": {"bb1", "bb3"}, "panic": {"common_end"}}
IF STATEMENT
terminator is InstructionValue { instruction_value: Value { name: "", address: 0x55add297de10, is_const: false, is_null: false, is_undef: false, llvm_value: "  br i1 %_2, label %bb1, label %bb3", llvm_type: "void" } }
Operand 0 is Some(Left(IntValue(IntValue { int_value: Value { name: "_2", address: 0x55add297dd60, is_const: false, is_null: false, is_undef: false, llvm_value: "  %_2 = icmp slt i32 %0, 0", llvm_type: "i1" } })))
Operand 1 is Some(Right(BasicBlock { address: 0x55add297d950, is_const: false, llvm_value: "\nbb3:                                              ; preds = %bb1, %start\n  %x.0 = phi i32 [ %0, %start ], [ %_5.0, %bb1 ]\n  %_7 = icmp sge i32 %x.0, 0\n  %_6 = xor i1 %_7, true\n  br i1 %_6, label %bb4, label %bb5\n", llvm_type: "label" }))
Operand 2 is Some(Right(BasicBlock { address: 0x55add297d9a0, is_const: false, llvm_value: "\nbb1:                                              ; preds = %start\n  %1 = call { i32, i1 } @llvm.smul.with.overflow.i32(i32 -1, i32 %0)\n  %_5.0 = extractvalue { i32, i1 } %1, 0\n  %_5.1 = extractvalue { i32, i1 } %1, 1\n  br i1 %_5.1, label %panic, label %bb3, !prof !3\n", llvm_type: "label" }))
IF STATEMENT
terminator is InstructionValue { instruction_value: Value { name: "", address: 0x55add297e050, is_const: false, is_null: false, is_undef: false, llvm_value: "  br i1 %_6, label %bb4, label %bb5", llvm_type: "void" } }
Operand 0 is Some(Left(IntValue(IntValue { int_value: Value { name: "_6", address: 0x55add297dfa0, is_const: false, is_null: false, is_undef: false, llvm_value: "  %_6 = xor i1 %_7, true", llvm_type: "i1" } })))
Operand 1 is Some(Right(BasicBlock { address: 0x55add297da90, is_const: false, llvm_value: "\nbb5:                                              ; preds = %bb3\n  ret i32 %x.0\n", llvm_type: "label" }))
Operand 2 is Some(Right(BasicBlock { address: 0x55add297dae0, is_const: false, llvm_value: "\nbb4:                                              ; preds = %bb3\n  call void @_ZN4core9panicking5panic17h4241c5ccea17facaE([0 x i8]* noundef nonnull align 1 bitcast (<{ [24 x i8] }>* @alloc61 to [0 x i8]*), i64 24, %\"core::panic::location::Location\"* noundef align 8 dereferenceable(24) bitcast (<{ i8*, [16 x i8] }>* @alloc63 to %\"core::panic::location::Location\"*)) #7\n  unreachable\n", llvm_type: "label" }))
IF STATEMENT
terminator is InstructionValue { instruction_value: Value { name: "", address: 0x55add297e410, is_const: false, is_null: false, is_undef: false, llvm_value: "  br i1 %_5.1, label %panic, label %bb3, !prof !3", llvm_type: "void" } }
Operand 0 is Some(Left(IntValue(IntValue { int_value: Value { name: "_5.1", address: 0x55add297e280, is_const: false, is_null: false, is_undef: false, llvm_value: "  %_5.1 = extractvalue { i32, i1 } %1, 1", llvm_type: "i1" } })))
Operand 1 is Some(Right(BasicBlock { address: 0x55add297d950, is_const: false, llvm_value: "\nbb3:                                              ; preds = %bb1, %start\n  %x.0 = phi i32 [ %0, %start ], [ %_5.0, %bb1 ]\n  %_7 = icmp sge i32 %x.0, 0\n  %_6 = xor i1 %_7, true\n  br i1 %_6, label %bb4, label %bb5\n", llvm_type: "label" }))
Operand 2 is Some(Right(BasicBlock { address: 0x55add297da40, is_const: false, llvm_value: "\npanic:                                            ; preds = %bb1\n  call void @_ZN4core9panicking5panic17h4241c5ccea17facaE([0 x i8]* noundef nonnull align 1 bitcast ([33 x i8]* @str.0 to [0 x i8]*), i64 33, %\"core::panic::location::Location\"* noundef align 8 dereferenceable(24) bitcast (<{ i8*, [16 x i8] }>* @alloc60 to %\"core::panic::location::Location\"*)) #7\n  unreachable\n", llvm_type: "label" }))
[2mJan 15 20:18:35.113[0m [34mDEBUG[0m wombat_symx: Backward edges:	{"bb4": {"bb3"}, "common_end": {"panic", "bb4", "bb5"}, "panic": {"bb1"}, "bb3": {"bb1", "start"}, "start": {}, "bb5": {"bb3"}, "bb1": {"start"}}
IF STATEMENT
terminator is InstructionValue { instruction_value: Value { name: "", address: 0x55add297de10, is_const: false, is_null: false, is_undef: false, llvm_value: "  br i1 %_2, label %bb1, label %bb3", llvm_type: "void" } }
Operand 0 is Some(Left(IntValue(IntValue { int_value: Value { name: "_2", address: 0x55add297dd60, is_const: false, is_null: false, is_undef: false, llvm_value: "  %_2 = icmp slt i32 %0, 0", llvm_type: "i1" } })))
Operand 1 is Some(Right(BasicBlock { address: 0x55add297d950, is_const: false, llvm_value: "\nbb3:                                              ; preds = %bb1, %start\n  %x.0 = phi i32 [ %0, %start ], [ %_5.0, %bb1 ]\n  %_7 = icmp sge i32 %x.0, 0\n  %_6 = xor i1 %_7, true\n  br i1 %_6, label %bb4, label %bb5\n", llvm_type: "label" }))
Operand 2 is Some(Right(BasicBlock { address: 0x55add297d9a0, is_const: false, llvm_value: "\nbb1:                                              ; preds = %start\n  %1 = call { i32, i1 } @llvm.smul.with.overflow.i32(i32 -1, i32 %0)\n  %_5.0 = extractvalue { i32, i1 } %1, 0\n  %_5.1 = extractvalue { i32, i1 } %1, 1\n  br i1 %_5.1, label %panic, label %bb3, !prof !3\n", llvm_type: "label" }))
IF STATEMENT
terminator is InstructionValue { instruction_value: Value { name: "", address: 0x55add297e050, is_const: false, is_null: false, is_undef: false, llvm_value: "  br i1 %_6, label %bb4, label %bb5", llvm_type: "void" } }
Operand 0 is Some(Left(IntValue(IntValue { int_value: Value { name: "_6", address: 0x55add297dfa0, is_const: false, is_null: false, is_undef: false, llvm_value: "  %_6 = xor i1 %_7, true", llvm_type: "i1" } })))
Operand 1 is Some(Right(BasicBlock { address: 0x55add297da90, is_const: false, llvm_value: "\nbb5:                                              ; preds = %bb3\n  ret i32 %x.0\n", llvm_type: "label" }))
Operand 2 is Some(Right(BasicBlock { address: 0x55add297dae0, is_const: false, llvm_value: "\nbb4:                                              ; preds = %bb3\n  call void @_ZN4core9panicking5panic17h4241c5ccea17facaE([0 x i8]* noundef nonnull align 1 bitcast (<{ [24 x i8] }>* @alloc61 to [0 x i8]*), i64 24, %\"core::panic::location::Location\"* noundef align 8 dereferenceable(24) bitcast (<{ i8*, [16 x i8] }>* @alloc63 to %\"core::panic::location::Location\"*)) #7\n  unreachable\n", llvm_type: "label" }))
IF STATEMENT
terminator is InstructionValue { instruction_value: Value { name: "", address: 0x55add297e410, is_const: false, is_null: false, is_undef: false, llvm_value: "  br i1 %_5.1, label %panic, label %bb3, !prof !3", llvm_type: "void" } }
Operand 0 is Some(Left(IntValue(IntValue { int_value: Value { name: "_5.1", address: 0x55add297e280, is_const: false, is_null: false, is_undef: false, llvm_value: "  %_5.1 = extractvalue { i32, i1 } %1, 1", llvm_type: "i1" } })))
Operand 1 is Some(Right(BasicBlock { address: 0x55add297d950, is_const: false, llvm_value: "\nbb3:                                              ; preds = %bb1, %start\n  %x.0 = phi i32 [ %0, %start ], [ %_5.0, %bb1 ]\n  %_7 = icmp sge i32 %x.0, 0\n  %_6 = xor i1 %_7, true\n  br i1 %_6, label %bb4, label %bb5\n", llvm_type: "label" }))
Operand 2 is Some(Right(BasicBlock { address: 0x55add297da40, is_const: false, llvm_value: "\npanic:                                            ; preds = %bb1\n  call void @_ZN4core9panicking5panic17h4241c5ccea17facaE([0 x i8]* noundef nonnull align 1 bitcast ([33 x i8]* @str.0 to [0 x i8]*), i64 33, %\"core::panic::location::Location\"* noundef align 8 dereferenceable(24) bitcast (<{ i8*, [16 x i8] }>* @alloc60 to %\"core::panic::location::Location\"*)) #7\n  unreachable\n", llvm_type: "label" }))
IF STATEMENT
terminator is InstructionValue { instruction_value: Value { name: "", address: 0x55add297de10, is_const: false, is_null: false, is_undef: false, llvm_value: "  br i1 %_2, label %bb1, label %bb3", llvm_type: "void" } }
Operand 0 is Some(Left(IntValue(IntValue { int_value: Value { name: "_2", address: 0x55add297dd60, is_const: false, is_null: false, is_undef: false, llvm_value: "  %_2 = icmp slt i32 %0, 0", llvm_type: "i1" } })))
Operand 1 is Some(Right(BasicBlock { address: 0x55add297d950, is_const: false, llvm_value: "\nbb3:                                              ; preds = %bb1, %start\n  %x.0 = phi i32 [ %0, %start ], [ %_5.0, %bb1 ]\n  %_7 = icmp sge i32 %x.0, 0\n  %_6 = xor i1 %_7, true\n  br i1 %_6, label %bb4, label %bb5\n", llvm_type: "label" }))
Operand 2 is Some(Right(BasicBlock { address: 0x55add297d9a0, is_const: false, llvm_value: "\nbb1:                                              ; preds = %start\n  %1 = call { i32, i1 } @llvm.smul.with.overflow.i32(i32 -1, i32 %0)\n  %_5.0 = extractvalue { i32, i1 } %1, 0\n  %_5.1 = extractvalue { i32, i1 } %1, 1\n  br i1 %_5.1, label %panic, label %bb3, !prof !3\n", llvm_type: "label" }))
IF STATEMENT
terminator is InstructionValue { instruction_value: Value { name: "", address: 0x55add297e050, is_const: false, is_null: false, is_undef: false, llvm_value: "  br i1 %_6, label %bb4, label %bb5", llvm_type: "void" } }
Operand 0 is Some(Left(IntValue(IntValue { int_value: Value { name: "_6", address: 0x55add297dfa0, is_const: false, is_null: false, is_undef: false, llvm_value: "  %_6 = xor i1 %_7, true", llvm_type: "i1" } })))
Operand 1 is Some(Right(BasicBlock { address: 0x55add297da90, is_const: false, llvm_value: "\nbb5:                                              ; preds = %bb3\n  ret i32 %x.0\n", llvm_type: "label" }))
Operand 2 is Some(Right(BasicBlock { address: 0x55add297dae0, is_const: false, llvm_value: "\nbb4:                                              ; preds = %bb3\n  call void @_ZN4core9panicking5panic17h4241c5ccea17facaE([0 x i8]* noundef nonnull align 1 bitcast (<{ [24 x i8] }>* @alloc61 to [0 x i8]*), i64 24, %\"core::panic::location::Location\"* noundef align 8 dereferenceable(24) bitcast (<{ i8*, [16 x i8] }>* @alloc63 to %\"core::panic::location::Location\"*)) #7\n  unreachable\n", llvm_type: "label" }))
IF STATEMENT
terminator is InstructionValue { instruction_value: Value { name: "", address: 0x55add297e410, is_const: false, is_null: false, is_undef: false, llvm_value: "  br i1 %_5.1, label %panic, label %bb3, !prof !3", llvm_type: "void" } }
Operand 0 is Some(Left(IntValue(IntValue { int_value: Value { name: "_5.1", address: 0x55add297e280, is_const: false, is_null: false, is_undef: false, llvm_value: "  %_5.1 = extractvalue { i32, i1 } %1, 1", llvm_type: "i1" } })))
Operand 1 is Some(Right(BasicBlock { address: 0x55add297d950, is_const: false, llvm_value: "\nbb3:                                              ; preds = %bb1, %start\n  %x.0 = phi i32 [ %0, %start ], [ %_5.0, %bb1 ]\n  %_7 = icmp sge i32 %x.0, 0\n  %_6 = xor i1 %_7, true\n  br i1 %_6, label %bb4, label %bb5\n", llvm_type: "label" }))
Operand 2 is Some(Right(BasicBlock { address: 0x55add297da40, is_const: false, llvm_value: "\npanic:                                            ; preds = %bb1\n  call void @_ZN4core9panicking5panic17h4241c5ccea17facaE([0 x i8]* noundef nonnull align 1 bitcast ([33 x i8]* @str.0 to [0 x i8]*), i64 33, %\"core::panic::location::Location\"* noundef align 8 dereferenceable(24) bitcast (<{ i8*, [16 x i8] }>* @alloc60 to %\"core::panic::location::Location\"*)) #7\n  unreachable\n", llvm_type: "label" }))
[2mJan 15 20:18:35.113[0m [34mDEBUG[0m wombat_symx: Forward sorted nodes:	["start", "bb1", "panic", "bb3", "bb5", "bb4", "common_end"]
IF STATEMENT
terminator is InstructionValue { instruction_value: Value { name: "", address: 0x55add297de10, is_const: false, is_null: false, is_undef: false, llvm_value: "  br i1 %_2, label %bb1, label %bb3", llvm_type: "void" } }
Operand 0 is Some(Left(IntValue(IntValue { int_value: Value { name: "_2", address: 0x55add297dd60, is_const: false, is_null: false, is_undef: false, llvm_value: "  %_2 = icmp slt i32 %0, 0", llvm_type: "i1" } })))
Operand 1 is Some(Right(BasicBlock { address: 0x55add297d950, is_const: false, llvm_value: "\nbb3:                                              ; preds = %bb1, %start\n  %x.0 = phi i32 [ %0, %start ], [ %_5.0, %bb1 ]\n  %_7 = icmp sge i32 %x.0, 0\n  %_6 = xor i1 %_7, true\n  br i1 %_6, label %bb4, label %bb5\n", llvm_type: "label" }))
Operand 2 is Some(Right(BasicBlock { address: 0x55add297d9a0, is_const: false, llvm_value: "\nbb1:                                              ; preds = %start\n  %1 = call { i32, i1 } @llvm.smul.with.overflow.i32(i32 -1, i32 %0)\n  %_5.0 = extractvalue { i32, i1 } %1, 0\n  %_5.1 = extractvalue { i32, i1 } %1, 1\n  br i1 %_5.1, label %panic, label %bb3, !prof !3\n", llvm_type: "label" }))
IF STATEMENT
terminator is InstructionValue { instruction_value: Value { name: "", address: 0x55add297e050, is_const: false, is_null: false, is_undef: false, llvm_value: "  br i1 %_6, label %bb4, label %bb5", llvm_type: "void" } }
Operand 0 is Some(Left(IntValue(IntValue { int_value: Value { name: "_6", address: 0x55add297dfa0, is_const: false, is_null: false, is_undef: false, llvm_value: "  %_6 = xor i1 %_7, true", llvm_type: "i1" } })))
Operand 1 is Some(Right(BasicBlock { address: 0x55add297da90, is_const: false, llvm_value: "\nbb5:                                              ; preds = %bb3\n  ret i32 %x.0\n", llvm_type: "label" }))
Operand 2 is Some(Right(BasicBlock { address: 0x55add297dae0, is_const: false, llvm_value: "\nbb4:                                              ; preds = %bb3\n  call void @_ZN4core9panicking5panic17h4241c5ccea17facaE([0 x i8]* noundef nonnull align 1 bitcast (<{ [24 x i8] }>* @alloc61 to [0 x i8]*), i64 24, %\"core::panic::location::Location\"* noundef align 8 dereferenceable(24) bitcast (<{ i8*, [16 x i8] }>* @alloc63 to %\"core::panic::location::Location\"*)) #7\n  unreachable\n", llvm_type: "label" }))
IF STATEMENT
terminator is InstructionValue { instruction_value: Value { name: "", address: 0x55add297e410, is_const: false, is_null: false, is_undef: false, llvm_value: "  br i1 %_5.1, label %panic, label %bb3, !prof !3", llvm_type: "void" } }
Operand 0 is Some(Left(IntValue(IntValue { int_value: Value { name: "_5.1", address: 0x55add297e280, is_const: false, is_null: false, is_undef: false, llvm_value: "  %_5.1 = extractvalue { i32, i1 } %1, 1", llvm_type: "i1" } })))
Operand 1 is Some(Right(BasicBlock { address: 0x55add297d950, is_const: false, llvm_value: "\nbb3:                                              ; preds = %bb1, %start\n  %x.0 = phi i32 [ %0, %start ], [ %_5.0, %bb1 ]\n  %_7 = icmp sge i32 %x.0, 0\n  %_6 = xor i1 %_7, true\n  br i1 %_6, label %bb4, label %bb5\n", llvm_type: "label" }))
Operand 2 is Some(Right(BasicBlock { address: 0x55add297da40, is_const: false, llvm_value: "\npanic:                                            ; preds = %bb1\n  call void @_ZN4core9panicking5panic17h4241c5ccea17facaE([0 x i8]* noundef nonnull align 1 bitcast ([33 x i8]* @str.0 to [0 x i8]*), i64 33, %\"core::panic::location::Location\"* noundef align 8 dereferenceable(24) bitcast (<{ i8*, [16 x i8] }>* @alloc60 to %\"core::panic::location::Location\"*)) #7\n  unreachable\n", llvm_type: "label" }))
IF STATEMENT
terminator is InstructionValue { instruction_value: Value { name: "", address: 0x55add297de10, is_const: false, is_null: false, is_undef: false, llvm_value: "  br i1 %_2, label %bb1, label %bb3", llvm_type: "void" } }
Operand 0 is Some(Left(IntValue(IntValue { int_value: Value { name: "_2", address: 0x55add297dd60, is_const: false, is_null: false, is_undef: false, llvm_value: "  %_2 = icmp slt i32 %0, 0", llvm_type: "i1" } })))
Operand 1 is Some(Right(BasicBlock { address: 0x55add297d950, is_const: false, llvm_value: "\nbb3:                                              ; preds = %bb1, %start\n  %x.0 = phi i32 [ %0, %start ], [ %_5.0, %bb1 ]\n  %_7 = icmp sge i32 %x.0, 0\n  %_6 = xor i1 %_7, true\n  br i1 %_6, label %bb4, label %bb5\n", llvm_type: "label" }))
Operand 2 is Some(Right(BasicBlock { address: 0x55add297d9a0, is_const: false, llvm_value: "\nbb1:                                              ; preds = %start\n  %1 = call { i32, i1 } @llvm.smul.with.overflow.i32(i32 -1, i32 %0)\n  %_5.0 = extractvalue { i32, i1 } %1, 0\n  %_5.1 = extractvalue { i32, i1 } %1, 1\n  br i1 %_5.1, label %panic, label %bb3, !prof !3\n", llvm_type: "label" }))
IF STATEMENT
terminator is InstructionValue { instruction_value: Value { name: "", address: 0x55add297e050, is_const: false, is_null: false, is_undef: false, llvm_value: "  br i1 %_6, label %bb4, label %bb5", llvm_type: "void" } }
Operand 0 is Some(Left(IntValue(IntValue { int_value: Value { name: "_6", address: 0x55add297dfa0, is_const: false, is_null: false, is_undef: false, llvm_value: "  %_6 = xor i1 %_7, true", llvm_type: "i1" } })))
Operand 1 is Some(Right(BasicBlock { address: 0x55add297da90, is_const: false, llvm_value: "\nbb5:                                              ; preds = %bb3\n  ret i32 %x.0\n", llvm_type: "label" }))
Operand 2 is Some(Right(BasicBlock { address: 0x55add297dae0, is_const: false, llvm_value: "\nbb4:                                              ; preds = %bb3\n  call void @_ZN4core9panicking5panic17h4241c5ccea17facaE([0 x i8]* noundef nonnull align 1 bitcast (<{ [24 x i8] }>* @alloc61 to [0 x i8]*), i64 24, %\"core::panic::location::Location\"* noundef align 8 dereferenceable(24) bitcast (<{ i8*, [16 x i8] }>* @alloc63 to %\"core::panic::location::Location\"*)) #7\n  unreachable\n", llvm_type: "label" }))
IF STATEMENT
terminator is InstructionValue { instruction_value: Value { name: "", address: 0x55add297e410, is_const: false, is_null: false, is_undef: false, llvm_value: "  br i1 %_5.1, label %panic, label %bb3, !prof !3", llvm_type: "void" } }
Operand 0 is Some(Left(IntValue(IntValue { int_value: Value { name: "_5.1", address: 0x55add297e280, is_const: false, is_null: false, is_undef: false, llvm_value: "  %_5.1 = extractvalue { i32, i1 } %1, 1", llvm_type: "i1" } })))
Operand 1 is Some(Right(BasicBlock { address: 0x55add297d950, is_const: false, llvm_value: "\nbb3:                                              ; preds = %bb1, %start\n  %x.0 = phi i32 [ %0, %start ], [ %_5.0, %bb1 ]\n  %_7 = icmp sge i32 %x.0, 0\n  %_6 = xor i1 %_7, true\n  br i1 %_6, label %bb4, label %bb5\n", llvm_type: "label" }))
Operand 2 is Some(Right(BasicBlock { address: 0x55add297da40, is_const: false, llvm_value: "\npanic:                                            ; preds = %bb1\n  call void @_ZN4core9panicking5panic17h4241c5ccea17facaE([0 x i8]* noundef nonnull align 1 bitcast ([33 x i8]* @str.0 to [0 x i8]*), i64 33, %\"core::panic::location::Location\"* noundef align 8 dereferenceable(24) bitcast (<{ i8*, [16 x i8] }>* @alloc60 to %\"core::panic::location::Location\"*)) #7\n  unreachable\n", llvm_type: "label" }))
[2mJan 15 20:18:35.114[0m [34mDEBUG[0m wombat_symx: Backward sorted nodes:	["common_end", "bb4", "bb5", "bb3", "panic", "bb1", "start"]
IF STATEMENT
terminator is InstructionValue { instruction_value: Value { name: "", address: 0x55add297de10, is_const: false, is_null: false, is_undef: false, llvm_value: "  br i1 %_2, label %bb1, label %bb3", llvm_type: "void" } }
Operand 0 is Some(Left(IntValue(IntValue { int_value: Value { name: "_2", address: 0x55add297dd60, is_const: false, is_null: false, is_undef: false, llvm_value: "  %_2 = icmp slt i32 %0, 0", llvm_type: "i1" } })))
Operand 1 is Some(Right(BasicBlock { address: 0x55add297d950, is_const: false, llvm_value: "\nbb3:                                              ; preds = %bb1, %start\n  %x.0 = phi i32 [ %0, %start ], [ %_5.0, %bb1 ]\n  %_7 = icmp sge i32 %x.0, 0\n  %_6 = xor i1 %_7, true\n  br i1 %_6, label %bb4, label %bb5\n", llvm_type: "label" }))
Operand 2 is Some(Right(BasicBlock { address: 0x55add297d9a0, is_const: false, llvm_value: "\nbb1:                                              ; preds = %start\n  %1 = call { i32, i1 } @llvm.smul.with.overflow.i32(i32 -1, i32 %0)\n  %_5.0 = extractvalue { i32, i1 } %1, 0\n  %_5.1 = extractvalue { i32, i1 } %1, 1\n  br i1 %_5.1, label %panic, label %bb3, !prof !3\n", llvm_type: "label" }))
IF STATEMENT
terminator is InstructionValue { instruction_value: Value { name: "", address: 0x55add297e050, is_const: false, is_null: false, is_undef: false, llvm_value: "  br i1 %_6, label %bb4, label %bb5", llvm_type: "void" } }
Operand 0 is Some(Left(IntValue(IntValue { int_value: Value { name: "_6", address: 0x55add297dfa0, is_const: false, is_null: false, is_undef: false, llvm_value: "  %_6 = xor i1 %_7, true", llvm_type: "i1" } })))
Operand 1 is Some(Right(BasicBlock { address: 0x55add297da90, is_const: false, llvm_value: "\nbb5:                                              ; preds = %bb3\n  ret i32 %x.0\n", llvm_type: "label" }))
Operand 2 is Some(Right(BasicBlock { address: 0x55add297dae0, is_const: false, llvm_value: "\nbb4:                                              ; preds = %bb3\n  call void @_ZN4core9panicking5panic17h4241c5ccea17facaE([0 x i8]* noundef nonnull align 1 bitcast (<{ [24 x i8] }>* @alloc61 to [0 x i8]*), i64 24, %\"core::panic::location::Location\"* noundef align 8 dereferenceable(24) bitcast (<{ i8*, [16 x i8] }>* @alloc63 to %\"core::panic::location::Location\"*)) #7\n  unreachable\n", llvm_type: "label" }))
IF STATEMENT
terminator is InstructionValue { instruction_value: Value { name: "", address: 0x55add297e410, is_const: false, is_null: false, is_undef: false, llvm_value: "  br i1 %_5.1, label %panic, label %bb3, !prof !3", llvm_type: "void" } }
Operand 0 is Some(Left(IntValue(IntValue { int_value: Value { name: "_5.1", address: 0x55add297e280, is_const: false, is_null: false, is_undef: false, llvm_value: "  %_5.1 = extractvalue { i32, i1 } %1, 1", llvm_type: "i1" } })))
Operand 1 is Some(Right(BasicBlock { address: 0x55add297d950, is_const: false, llvm_value: "\nbb3:                                              ; preds = %bb1, %start\n  %x.0 = phi i32 [ %0, %start ], [ %_5.0, %bb1 ]\n  %_7 = icmp sge i32 %x.0, 0\n  %_6 = xor i1 %_7, true\n  br i1 %_6, label %bb4, label %bb5\n", llvm_type: "label" }))
Operand 2 is Some(Right(BasicBlock { address: 0x55add297da40, is_const: false, llvm_value: "\npanic:                                            ; preds = %bb1\n  call void @_ZN4core9panicking5panic17h4241c5ccea17facaE([0 x i8]* noundef nonnull align 1 bitcast ([33 x i8]* @str.0 to [0 x i8]*), i64 33, %\"core::panic::location::Location\"* noundef align 8 dereferenceable(24) bitcast (<{ i8*, [16 x i8] }>* @alloc60 to %\"core::panic::location::Location\"*)) #7\n  unreachable\n", llvm_type: "label" }))
IF STATEMENT
terminator is InstructionValue { instruction_value: Value { name: "", address: 0x55add297de10, is_const: false, is_null: false, is_undef: false, llvm_value: "  br i1 %_2, label %bb1, label %bb3", llvm_type: "void" } }
Operand 0 is Some(Left(IntValue(IntValue { int_value: Value { name: "_2", address: 0x55add297dd60, is_const: false, is_null: false, is_undef: false, llvm_value: "  %_2 = icmp slt i32 %0, 0", llvm_type: "i1" } })))
Operand 1 is Some(Right(BasicBlock { address: 0x55add297d950, is_const: false, llvm_value: "\nbb3:                                              ; preds = %bb1, %start\n  %x.0 = phi i32 [ %0, %start ], [ %_5.0, %bb1 ]\n  %_7 = icmp sge i32 %x.0, 0\n  %_6 = xor i1 %_7, true\n  br i1 %_6, label %bb4, label %bb5\n", llvm_type: "label" }))
Operand 2 is Some(Right(BasicBlock { address: 0x55add297d9a0, is_const: false, llvm_value: "\nbb1:                                              ; preds = %start\n  %1 = call { i32, i1 } @llvm.smul.with.overflow.i32(i32 -1, i32 %0)\n  %_5.0 = extractvalue { i32, i1 } %1, 0\n  %_5.1 = extractvalue { i32, i1 } %1, 1\n  br i1 %_5.1, label %panic, label %bb3, !prof !3\n", llvm_type: "label" }))
IF STATEMENT
terminator is InstructionValue { instruction_value: Value { name: "", address: 0x55add297e050, is_const: false, is_null: false, is_undef: false, llvm_value: "  br i1 %_6, label %bb4, label %bb5", llvm_type: "void" } }
Operand 0 is Some(Left(IntValue(IntValue { int_value: Value { name: "_6", address: 0x55add297dfa0, is_const: false, is_null: false, is_undef: false, llvm_value: "  %_6 = xor i1 %_7, true", llvm_type: "i1" } })))
Operand 1 is Some(Right(BasicBlock { address: 0x55add297da90, is_const: false, llvm_value: "\nbb5:                                              ; preds = %bb3\n  ret i32 %x.0\n", llvm_type: "label" }))
Operand 2 is Some(Right(BasicBlock { address: 0x55add297dae0, is_const: false, llvm_value: "\nbb4:                                              ; preds = %bb3\n  call void @_ZN4core9panicking5panic17h4241c5ccea17facaE([0 x i8]* noundef nonnull align 1 bitcast (<{ [24 x i8] }>* @alloc61 to [0 x i8]*), i64 24, %\"core::panic::location::Location\"* noundef align 8 dereferenceable(24) bitcast (<{ i8*, [16 x i8] }>* @alloc63 to %\"core::panic::location::Location\"*)) #7\n  unreachable\n", llvm_type: "label" }))
IF STATEMENT
terminator is InstructionValue { instruction_value: Value { name: "", address: 0x55add297e410, is_const: false, is_null: false, is_undef: false, llvm_value: "  br i1 %_5.1, label %panic, label %bb3, !prof !3", llvm_type: "void" } }
Operand 0 is Some(Left(IntValue(IntValue { int_value: Value { name: "_5.1", address: 0x55add297e280, is_const: false, is_null: false, is_undef: false, llvm_value: "  %_5.1 = extractvalue { i32, i1 } %1, 1", llvm_type: "i1" } })))
Operand 1 is Some(Right(BasicBlock { address: 0x55add297d950, is_const: false, llvm_value: "\nbb3:                                              ; preds = %bb1, %start\n  %x.0 = phi i32 [ %0, %start ], [ %_5.0, %bb1 ]\n  %_7 = icmp sge i32 %x.0, 0\n  %_6 = xor i1 %_7, true\n  br i1 %_6, label %bb4, label %bb5\n", llvm_type: "label" }))
Operand 2 is Some(Right(BasicBlock { address: 0x55add297da40, is_const: false, llvm_value: "\npanic:                                            ; preds = %bb1\n  call void @_ZN4core9panicking5panic17h4241c5ccea17facaE([0 x i8]* noundef nonnull align 1 bitcast ([33 x i8]* @str.0 to [0 x i8]*), i64 33, %\"core::panic::location::Location\"* noundef align 8 dereferenceable(24) bitcast (<{ i8*, [16 x i8] }>* @alloc60 to %\"core::panic::location::Location\"*)) #7\n  unreachable\n", llvm_type: "label" }))
IF STATEMENT
terminator is InstructionValue { instruction_value: Value { name: "", address: 0x55add297de10, is_const: false, is_null: false, is_undef: false, llvm_value: "  br i1 %_2, label %bb1, label %bb3", llvm_type: "void" } }
Operand 0 is Some(Left(IntValue(IntValue { int_value: Value { name: "_2", address: 0x55add297dd60, is_const: false, is_null: false, is_undef: false, llvm_value: "  %_2 = icmp slt i32 %0, 0", llvm_type: "i1" } })))
Operand 1 is Some(Right(BasicBlock { address: 0x55add297d950, is_const: false, llvm_value: "\nbb3:                                              ; preds = %bb1, %start\n  %x.0 = phi i32 [ %0, %start ], [ %_5.0, %bb1 ]\n  %_7 = icmp sge i32 %x.0, 0\n  %_6 = xor i1 %_7, true\n  br i1 %_6, label %bb4, label %bb5\n", llvm_type: "label" }))
Operand 2 is Some(Right(BasicBlock { address: 0x55add297d9a0, is_const: false, llvm_value: "\nbb1:                                              ; preds = %start\n  %1 = call { i32, i1 } @llvm.smul.with.overflow.i32(i32 -1, i32 %0)\n  %_5.0 = extractvalue { i32, i1 } %1, 0\n  %_5.1 = extractvalue { i32, i1 } %1, 1\n  br i1 %_5.1, label %panic, label %bb3, !prof !3\n", llvm_type: "label" }))
IF STATEMENT
terminator is InstructionValue { instruction_value: Value { name: "", address: 0x55add297e050, is_const: false, is_null: false, is_undef: false, llvm_value: "  br i1 %_6, label %bb4, label %bb5", llvm_type: "void" } }
Operand 0 is Some(Left(IntValue(IntValue { int_value: Value { name: "_6", address: 0x55add297dfa0, is_const: false, is_null: false, is_undef: false, llvm_value: "  %_6 = xor i1 %_7, true", llvm_type: "i1" } })))
Operand 1 is Some(Right(BasicBlock { address: 0x55add297da90, is_const: false, llvm_value: "\nbb5:                                              ; preds = %bb3\n  ret i32 %x.0\n", llvm_type: "label" }))
Operand 2 is Some(Right(BasicBlock { address: 0x55add297dae0, is_const: false, llvm_value: "\nbb4:                                              ; preds = %bb3\n  call void @_ZN4core9panicking5panic17h4241c5ccea17facaE([0 x i8]* noundef nonnull align 1 bitcast (<{ [24 x i8] }>* @alloc61 to [0 x i8]*), i64 24, %\"core::panic::location::Location\"* noundef align 8 dereferenceable(24) bitcast (<{ i8*, [16 x i8] }>* @alloc63 to %\"core::panic::location::Location\"*)) #7\n  unreachable\n", llvm_type: "label" }))
IF STATEMENT
terminator is InstructionValue { instruction_value: Value { name: "", address: 0x55add297e410, is_const: false, is_null: false, is_undef: false, llvm_value: "  br i1 %_5.1, label %panic, label %bb3, !prof !3", llvm_type: "void" } }
Operand 0 is Some(Left(IntValue(IntValue { int_value: Value { name: "_5.1", address: 0x55add297e280, is_const: false, is_null: false, is_undef: false, llvm_value: "  %_5.1 = extractvalue { i32, i1 } %1, 1", llvm_type: "i1" } })))
Operand 1 is Some(Right(BasicBlock { address: 0x55add297d950, is_const: false, llvm_value: "\nbb3:                                              ; preds = %bb1, %start\n  %x.0 = phi i32 [ %0, %start ], [ %_5.0, %bb1 ]\n  %_7 = icmp sge i32 %x.0, 0\n  %_6 = xor i1 %_7, true\n  br i1 %_6, label %bb4, label %bb5\n", llvm_type: "label" }))
Operand 2 is Some(Right(BasicBlock { address: 0x55add297da40, is_const: false, llvm_value: "\npanic:                                            ; preds = %bb1\n  call void @_ZN4core9panicking5panic17h4241c5ccea17facaE([0 x i8]* noundef nonnull align 1 bitcast ([33 x i8]* @str.0 to [0 x i8]*), i64 33, %\"core::panic::location::Location\"* noundef align 8 dereferenceable(24) bitcast (<{ i8*, [16 x i8] }>* @alloc60 to %\"core::panic::location::Location\"*)) #7\n  unreachable\n", llvm_type: "label" }))
IF STATEMENT
terminator is InstructionValue { instruction_value: Value { name: "", address: 0x55add297de10, is_const: false, is_null: false, is_undef: false, llvm_value: "  br i1 %_2, label %bb1, label %bb3", llvm_type: "void" } }
Operand 0 is Some(Left(IntValue(IntValue { int_value: Value { name: "_2", address: 0x55add297dd60, is_const: false, is_null: false, is_undef: false, llvm_value: "  %_2 = icmp slt i32 %0, 0", llvm_type: "i1" } })))
Operand 1 is Some(Right(BasicBlock { address: 0x55add297d950, is_const: false, llvm_value: "\nbb3:                                              ; preds = %bb1, %start\n  %x.0 = phi i32 [ %0, %start ], [ %_5.0, %bb1 ]\n  %_7 = icmp sge i32 %x.0, 0\n  %_6 = xor i1 %_7, true\n  br i1 %_6, label %bb4, label %bb5\n", llvm_type: "label" }))
Operand 2 is Some(Right(BasicBlock { address: 0x55add297d9a0, is_const: false, llvm_value: "\nbb1:                                              ; preds = %start\n  %1 = call { i32, i1 } @llvm.smul.with.overflow.i32(i32 -1, i32 %0)\n  %_5.0 = extractvalue { i32, i1 } %1, 0\n  %_5.1 = extractvalue { i32, i1 } %1, 1\n  br i1 %_5.1, label %panic, label %bb3, !prof !3\n", llvm_type: "label" }))
IF STATEMENT
terminator is InstructionValue { instruction_value: Value { name: "", address: 0x55add297e050, is_const: false, is_null: false, is_undef: false, llvm_value: "  br i1 %_6, label %bb4, label %bb5", llvm_type: "void" } }
Operand 0 is Some(Left(IntValue(IntValue { int_value: Value { name: "_6", address: 0x55add297dfa0, is_const: false, is_null: false, is_undef: false, llvm_value: "  %_6 = xor i1 %_7, true", llvm_type: "i1" } })))
Operand 1 is Some(Right(BasicBlock { address: 0x55add297da90, is_const: false, llvm_value: "\nbb5:                                              ; preds = %bb3\n  ret i32 %x.0\n", llvm_type: "label" }))
Operand 2 is Some(Right(BasicBlock { address: 0x55add297dae0, is_const: false, llvm_value: "\nbb4:                                              ; preds = %bb3\n  call void @_ZN4core9panicking5panic17h4241c5ccea17facaE([0 x i8]* noundef nonnull align 1 bitcast (<{ [24 x i8] }>* @alloc61 to [0 x i8]*), i64 24, %\"core::panic::location::Location\"* noundef align 8 dereferenceable(24) bitcast (<{ i8*, [16 x i8] }>* @alloc63 to %\"core::panic::location::Location\"*)) #7\n  unreachable\n", llvm_type: "label" }))
IF STATEMENT
terminator is InstructionValue { instruction_value: Value { name: "", address: 0x55add297e410, is_const: false, is_null: false, is_undef: false, llvm_value: "  br i1 %_5.1, label %panic, label %bb3, !prof !3", llvm_type: "void" } }
Operand 0 is Some(Left(IntValue(IntValue { int_value: Value { name: "_5.1", address: 0x55add297e280, is_const: false, is_null: false, is_undef: false, llvm_value: "  %_5.1 = extractvalue { i32, i1 } %1, 1", llvm_type: "i1" } })))
Operand 1 is Some(Right(BasicBlock { address: 0x55add297d950, is_const: false, llvm_value: "\nbb3:                                              ; preds = %bb1, %start\n  %x.0 = phi i32 [ %0, %start ], [ %_5.0, %bb1 ]\n  %_7 = icmp sge i32 %x.0, 0\n  %_6 = xor i1 %_7, true\n  br i1 %_6, label %bb4, label %bb5\n", llvm_type: "label" }))
Operand 2 is Some(Right(BasicBlock { address: 0x55add297da40, is_const: false, llvm_value: "\npanic:                                            ; preds = %bb1\n  call void @_ZN4core9panicking5panic17h4241c5ccea17facaE([0 x i8]* noundef nonnull align 1 bitcast ([33 x i8]* @str.0 to [0 x i8]*), i64 33, %\"core::panic::location::Location\"* noundef align 8 dereferenceable(24) bitcast (<{ i8*, [16 x i8] }>* @alloc60 to %\"core::panic::location::Location\"*)) #7\n  unreachable\n", llvm_type: "label" }))
[2mJan 15 20:18:35.145[0m [34mDEBUG[0m wombat_symx: Unsupported Call function "_ZN4core9panicking5panic17h4241c5ccea17facaE"
IF HAS NUM OPERANDS 3
IF HAS TERMINATOR InstructionValue { instruction_value: Value { name: "", address: 0x55add297e050, is_const: false, is_null: false, is_undef: false, llvm_value: "  br i1 %_6, label %bb4, label %bb5", llvm_type: "void" } }
IF HAS NODE "bb4"
TEST 123 "  %_6 = xor i1 %_7, true"
IF HAS TARGET VAL true
IF HAS TARGET VAL VAR true
IF HAS SWITCH VAR %_6
IF HAS DISCRIMINANT IntValue(IntValue { int_value: Value { name: "_6", address: 0x55add297dfa0, is_const: false, is_null: false, is_undef: false, llvm_value: "  %_6 = xor i1 %_7, true", llvm_type: "i1" } })
IF HAS ENTRY CONDITION (= %_6 true)
IF HAS NUM OPERANDS 3
IF HAS TERMINATOR InstructionValue { instruction_value: Value { name: "", address: 0x55add297e050, is_const: false, is_null: false, is_undef: false, llvm_value: "  br i1 %_6, label %bb4, label %bb5", llvm_type: "void" } }
IF HAS NODE "bb5"
TEST 123 "  %_6 = xor i1 %_7, true"
IF HAS TARGET VAL false
IF HAS TARGET VAL VAR false
IF HAS SWITCH VAR %_6
IF HAS DISCRIMINANT IntValue(IntValue { int_value: Value { name: "_6", address: 0x55add297dfa0, is_const: false, is_null: false, is_undef: false, llvm_value: "  %_6 = xor i1 %_7, true", llvm_type: "i1" } })
IF HAS ENTRY CONDITION (= %_6 false)
IF HAS NUM OPERANDS 3
IF HAS TERMINATOR InstructionValue { instruction_value: Value { name: "", address: 0x55add297e050, is_const: false, is_null: false, is_undef: false, llvm_value: "  br i1 %_6, label %bb4, label %bb5", llvm_type: "void" } }
IF HAS NODE "bb4"
TEST 123 "  %_6 = xor i1 %_7, true"
IF HAS TARGET VAL true
IF HAS TARGET VAL VAR true
IF HAS SWITCH VAR %_6
IF HAS DISCRIMINANT IntValue(IntValue { int_value: Value { name: "_6", address: 0x55add297dfa0, is_const: false, is_null: false, is_undef: false, llvm_value: "  %_6 = xor i1 %_7, true", llvm_type: "i1" } })
IF HAS ENTRY CONDITION (= %_6 true)
IF HAS NUM OPERANDS 3
IF HAS TERMINATOR InstructionValue { instruction_value: Value { name: "", address: 0x55add297e050, is_const: false, is_null: false, is_undef: false, llvm_value: "  br i1 %_6, label %bb4, label %bb5", llvm_type: "void" } }
IF HAS NODE "bb5"
TEST 123 "  %_6 = xor i1 %_7, true"
IF HAS TARGET VAL false
IF HAS TARGET VAL VAR false
IF HAS SWITCH VAR %_6
IF HAS DISCRIMINANT IntValue(IntValue { int_value: Value { name: "_6", address: 0x55add297dfa0, is_const: false, is_null: false, is_undef: false, llvm_value: "  %_6 = xor i1 %_7, true", llvm_type: "i1" } })
IF HAS ENTRY CONDITION (= %_6 false)
TEST 123 "  %_7 = icmp sge i32 %x.0, 0"
TEST 123 "i1 true"
TEST 123 "  %_6 = xor i1 %_7, true"
TEST 123 "  %_7 = icmp sge i32 %x.0, 0"
TEST 123 "  %x.0 = phi i32 [ %0, %start ], [ %_5.0, %bb1 ]"
TEST 123 "i32 0"
IF HAS NUM OPERANDS 3
IF HAS TERMINATOR InstructionValue { instruction_value: Value { name: "", address: 0x55add297de10, is_const: false, is_null: false, is_undef: false, llvm_value: "  br i1 %_2, label %bb1, label %bb3", llvm_type: "void" } }
IF HAS NODE "bb3"
TEST 123 "  %_2 = icmp slt i32 %0, 0"
IF HAS TARGET VAL false
IF HAS TARGET VAL VAR false
IF HAS SWITCH VAR %_2
IF HAS DISCRIMINANT IntValue(IntValue { int_value: Value { name: "_2", address: 0x55add297dd60, is_const: false, is_null: false, is_undef: false, llvm_value: "  %_2 = icmp slt i32 %0, 0", llvm_type: "i1" } })
IF HAS ENTRY CONDITION (= %_2 false)
IF HAS NUM OPERANDS 3
IF HAS TERMINATOR InstructionValue { instruction_value: Value { name: "", address: 0x55add297e410, is_const: false, is_null: false, is_undef: false, llvm_value: "  br i1 %_5.1, label %panic, label %bb3, !prof !3", llvm_type: "void" } }
IF HAS NODE "bb3"
TEST 123 "  %_5.1 = extractvalue { i32, i1 } %1, 1"
IF HAS TARGET VAL false
IF HAS TARGET VAL VAR false
IF HAS SWITCH VAR %_5.1
IF HAS DISCRIMINANT IntValue(IntValue { int_value: Value { name: "_5.1", address: 0x55add297e280, is_const: false, is_null: false, is_undef: false, llvm_value: "  %_5.1 = extractvalue { i32, i1 } %1, 1", llvm_type: "i1" } })
IF HAS ENTRY CONDITION (= %_5.1 false)
[2mJan 15 20:18:35.148[0m [34mDEBUG[0m wombat_symx: Unsupported Call function "_ZN4core9panicking5panic17h4241c5ccea17facaE"
IF HAS NUM OPERANDS 3
IF HAS TERMINATOR InstructionValue { instruction_value: Value { name: "", address: 0x55add297e410, is_const: false, is_null: false, is_undef: false, llvm_value: "  br i1 %_5.1, label %panic, label %bb3, !prof !3", llvm_type: "void" } }
IF HAS NODE "panic"
TEST 123 "  %_5.1 = extractvalue { i32, i1 } %1, 1"
IF HAS TARGET VAL true
IF HAS TARGET VAL VAR true
IF HAS SWITCH VAR %_5.1
IF HAS DISCRIMINANT IntValue(IntValue { int_value: Value { name: "_5.1", address: 0x55add297e280, is_const: false, is_null: false, is_undef: false, llvm_value: "  %_5.1 = extractvalue { i32, i1 } %1, 1", llvm_type: "i1" } })
IF HAS ENTRY CONDITION (= %_5.1 true)
IF HAS NUM OPERANDS 3
IF HAS TERMINATOR InstructionValue { instruction_value: Value { name: "", address: 0x55add297e410, is_const: false, is_null: false, is_undef: false, llvm_value: "  br i1 %_5.1, label %panic, label %bb3, !prof !3", llvm_type: "void" } }
IF HAS NODE "bb3"
TEST 123 "  %_5.1 = extractvalue { i32, i1 } %1, 1"
IF HAS TARGET VAL false
IF HAS TARGET VAL VAR false
IF HAS SWITCH VAR %_5.1
IF HAS DISCRIMINANT IntValue(IntValue { int_value: Value { name: "_5.1", address: 0x55add297e280, is_const: false, is_null: false, is_undef: false, llvm_value: "  %_5.1 = extractvalue { i32, i1 } %1, 1", llvm_type: "i1" } })
IF HAS ENTRY CONDITION (= %_5.1 false)
TEST 123 "  %x.0 = phi i32 [ %0, %start ], [ %_5.0, %bb1 ]"
TEST 123 "  %_5.0 = extractvalue { i32, i1 } %1, 0"
IF HAS NUM OPERANDS 3
IF HAS TERMINATOR InstructionValue { instruction_value: Value { name: "", address: 0x55add297e410, is_const: false, is_null: false, is_undef: false, llvm_value: "  br i1 %_5.1, label %panic, label %bb3, !prof !3", llvm_type: "void" } }
IF HAS NODE "panic"
TEST 123 "  %_5.1 = extractvalue { i32, i1 } %1, 1"
IF HAS TARGET VAL true
IF HAS TARGET VAL VAR true
IF HAS SWITCH VAR %_5.1
IF HAS DISCRIMINANT IntValue(IntValue { int_value: Value { name: "_5.1", address: 0x55add297e280, is_const: false, is_null: false, is_undef: false, llvm_value: "  %_5.1 = extractvalue { i32, i1 } %1, 1", llvm_type: "i1" } })
IF HAS ENTRY CONDITION (= %_5.1 true)
TEST 123 "  %_5.1 = extractvalue { i32, i1 } %1, 1"
TEST 123 "  %1 = call { i32, i1 } @llvm.smul.with.overflow.i32(i32 -1, i32 %0)"
TEST 123 "  %_5.0 = extractvalue { i32, i1 } %1, 0"
TEST 123 "  %1 = call { i32, i1 } @llvm.smul.with.overflow.i32(i32 -1, i32 %0)"
TEST 123 "i32 -1"
TEST 123 "i32 %0"
TEST 123 "  %1 = call { i32, i1 } @llvm.smul.with.overflow.i32(i32 -1, i32 %0)"
TEST 123 "  %1 = call { i32, i1 } @llvm.smul.with.overflow.i32(i32 -1, i32 %0)"
IF HAS NUM OPERANDS 3
IF HAS TERMINATOR InstructionValue { instruction_value: Value { name: "", address: 0x55add297de10, is_const: false, is_null: false, is_undef: false, llvm_value: "  br i1 %_2, label %bb1, label %bb3", llvm_type: "void" } }
IF HAS NODE "bb1"
TEST 123 "  %_2 = icmp slt i32 %0, 0"
IF HAS TARGET VAL true
IF HAS TARGET VAL VAR true
IF HAS SWITCH VAR %_2
IF HAS DISCRIMINANT IntValue(IntValue { int_value: Value { name: "_2", address: 0x55add297dd60, is_const: false, is_null: false, is_undef: false, llvm_value: "  %_2 = icmp slt i32 %0, 0", llvm_type: "i1" } })
IF HAS ENTRY CONDITION (= %_2 true)
IF HAS NUM OPERANDS 3
IF HAS TERMINATOR InstructionValue { instruction_value: Value { name: "", address: 0x55add297de10, is_const: false, is_null: false, is_undef: false, llvm_value: "  br i1 %_2, label %bb1, label %bb3", llvm_type: "void" } }
IF HAS NODE "bb1"
TEST 123 "  %_2 = icmp slt i32 %0, 0"
IF HAS TARGET VAL true
IF HAS TARGET VAL VAR true
IF HAS SWITCH VAR %_2
IF HAS DISCRIMINANT IntValue(IntValue { int_value: Value { name: "_2", address: 0x55add297dd60, is_const: false, is_null: false, is_undef: false, llvm_value: "  %_2 = icmp slt i32 %0, 0", llvm_type: "i1" } })
IF HAS ENTRY CONDITION (= %_2 true)
IF HAS NUM OPERANDS 3
IF HAS TERMINATOR InstructionValue { instruction_value: Value { name: "", address: 0x55add297de10, is_const: false, is_null: false, is_undef: false, llvm_value: "  br i1 %_2, label %bb1, label %bb3", llvm_type: "void" } }
IF HAS NODE "bb3"
TEST 123 "  %_2 = icmp slt i32 %0, 0"
IF HAS TARGET VAL false
IF HAS TARGET VAL VAR false
IF HAS SWITCH VAR %_2
IF HAS DISCRIMINANT IntValue(IntValue { int_value: Value { name: "_2", address: 0x55add297dd60, is_const: false, is_null: false, is_undef: false, llvm_value: "  %_2 = icmp slt i32 %0, 0", llvm_type: "i1" } })
IF HAS ENTRY CONDITION (= %_2 false)
TEST 123 "  %x.0 = phi i32 [ %0, %start ], [ %_5.0, %bb1 ]"
TEST 123 "i32 %0"
TEST 123 "  %_2 = icmp slt i32 %0, 0"
TEST 123 "i32 %0"
TEST 123 "i32 0"
TEST 123 "i32 %0"
[2mJan 15 20:18:35.152[0m [34mDEBUG[0m wombat_symx: (declare-fun panic_var () Bool)
(declare-fun common_end () Bool)
(declare-fun %_6 () Bool)
(declare-fun bb4 () Bool)
(declare-fun bb5 () Bool)
(declare-fun const_true () Bool)
(declare-fun const_0 () Int)
(declare-fun %_7 () Bool)
(declare-fun %x.0 () Int)
(declare-fun %_5.1 () Bool)
(declare-fun %_2 () Bool)
(declare-fun bb3 () Bool)
(declare-fun panic () Bool)
(declare-fun const_-1 () Int)
(declare-fun %_5.0 () Int)
(declare-fun %1.1 () Bool)
(declare-fun %1.0 () Int)
(declare-fun %0 () Int)
(declare-fun bb1 () Bool)
(declare-fun start () Bool)
(assert (= common_end (=> (and true true true true) (and (not panic_var) true))))
(assert (= bb4
   (=> (and true (= %_6 true)) (=> (= panic_var true) (and true common_end)))))
(assert (= bb5
   (=> (and true (= %_6 false)) (=> (= panic_var false) (and true common_end)))))
(assert (= const_true true))
(assert (= const_0 0))
(assert (let ((a!1 (=> (= %_7 (>= %x.0 const_0))
               (=> (= %_6 (xor %_7 const_true)) (and true bb4 bb5)))))
  (= bb3 (=> (and true (= %_2 false) (= %_5.1 false)) a!1))))
(assert (= panic
   (=> (and true (= %_5.1 true)) (=> (= panic_var true) (and true common_end)))))
(assert (= const_-1 (- 1)))
(assert (let ((a!1 (> (* const_-1 %0)
              (ite (bvslt #x7fffffff #x00000000)
                   (- (bv2int #x7fffffff) 4294967296)
                   (bv2int #x7fffffff))))
      (a!2 (< (* const_-1 %0)
              (ite (bvslt #x80000000 #x00000000)
                   (- (bv2int #x80000000) 4294967296)
                   (bv2int #x80000000))))
      (a!3 (=> (= %_5.1 %1.1)
               (=> (=> (= %_5.1 false) (= %x.0 %_5.0)) (and true bb3 panic)))))
(let ((a!4 (=> (and (= %1.0 (* const_-1 %0)) (= %1.1 (or a!1 a!2)))
               (=> (= %_5.0 %1.0) a!3))))
  (= bb1 (=> (and true (= %_2 true)) a!4)))))
(assert (= const_0 0))
(assert (let ((a!1 (=> (= %_2 (< %0 const_0))
               (=> (=> (= %_2 false) (= %x.0 %0)) (and true bb1 bb3)))))
  (= start (=> true a!1))))
(assert (let ((a!1 (>= %0
               (ite (bvslt #x80000000 #x00000000)
                    (- (bv2int #x80000000) 4294967296)
                    (bv2int #x80000000))))
      (a!2 (<= %0
               (ite (bvslt #x7fffffff #x00000000)
                    (- (bv2int #x7fffffff) 4294967296)
                    (bv2int #x7fffffff)))))
  (and a!1 a!2)))
(assert (not start))


Function safety: unsafe
[2mJan 15 20:18:35.278[0m [34mDEBUG[0m wombat_symx: 
const_true -> true
panic_var -> true
const_0 -> 0
%_5.1 -> true
%_5.0 -> 2147483648
%_6 -> false
common_end -> false
const_-1 -> (- 1)
%1.0 -> 2147483648
bb3 -> true
%1.1 -> true
bb4 -> true
start -> false
bb5 -> true
%_2 -> true
panic -> false
%0 -> (- 2147483648)
%x.0 -> (- 2147483649)
bb1 -> false
%_7 -> false


Argument values:
	"x" = (- 2147483648)

************************************


