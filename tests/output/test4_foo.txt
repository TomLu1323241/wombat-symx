[2mJan 15 20:18:36.866[0m [34mDEBUG[0m wombat_symx: Func param instr: IntValue { int_value: Value { name: "c1", address: 0x55a6cc71dfd0, is_const: false, is_null: false, is_undef: false, llvm_value: "i1 %c1", llvm_type: "i1" } }
[2mJan 15 20:18:36.867[0m [34mDEBUG[0m wombat_symx: Func param instr: IntValue { int_value: Value { name: "c2", address: 0x55a6cc71dff8, is_const: false, is_null: false, is_undef: false, llvm_value: "i1 %c2", llvm_type: "i1" } }
[2mJan 15 20:18:36.867[0m [34mDEBUG[0m wombat_symx: Func param instr: IntValue { int_value: Value { name: "x", address: 0x55a6cc71e020, is_const: false, is_null: false, is_undef: false, llvm_value: "i32 %x", llvm_type: "i32" } }
[2mJan 15 20:18:36.867[0m [34mDEBUG[0m wombat_symx: Function arg names: {"c2": "%c2", "x": "%x", "c1": "%c1"}
Backward Symbolic Execution in test4_foo::unsafe_foo::had11b3c65ace6f20
[2mJan 15 20:18:36.867[0m [34mDEBUG[0m wombat_symx: Number of Nodes: 13
[2mJan 15 20:18:36.867[0m [34mDEBUG[0m wombat_symx: Arg count: 3
[2mJan 15 20:18:36.867[0m [34mDEBUG[0m wombat_symx: Basic Blocks:
[2mJan 15 20:18:36.867[0m [34mDEBUG[0m wombat_symx: 	Basic Block: "start"
[2mJan 15 20:18:36.867[0m [34mDEBUG[0m wombat_symx: 		is_cleanup: NO
[2mJan 15 20:18:36.867[0m [34mDEBUG[0m wombat_symx: 		Statement: "\"  br i1 %c1, label %bb1, label %bb3\""
[2mJan 15 20:18:36.867[0m [34mDEBUG[0m wombat_symx: 		Last statement is a terminator
[2mJan 15 20:18:36.867[0m [34mDEBUG[0m wombat_symx: 	Basic Block: "bb3"
[2mJan 15 20:18:36.867[0m [34mDEBUG[0m wombat_symx: 		is_cleanup: NO
[2mJan 15 20:18:36.867[0m [34mDEBUG[0m wombat_symx: 		Statement: "\"  %0 = call { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %x, i32 4)\""
[2mJan 15 20:18:36.867[0m [34mDEBUG[0m wombat_symx: 		Statement: "\"  %_8.0 = extractvalue { i32, i1 } %0, 0\""
[2mJan 15 20:18:36.867[0m [34mDEBUG[0m wombat_symx: 		Statement: "\"  %_8.1 = extractvalue { i32, i1 } %0, 1\""
[2mJan 15 20:18:36.867[0m [34mDEBUG[0m wombat_symx: 		Statement: "\"  br i1 %_8.1, label %panic1, label %bb5, !prof !3\""
[2mJan 15 20:18:36.867[0m [34mDEBUG[0m wombat_symx: 		Last statement is a terminator
[2mJan 15 20:18:36.867[0m [34mDEBUG[0m wombat_symx: 	Basic Block: "bb1"
[2mJan 15 20:18:36.867[0m [34mDEBUG[0m wombat_symx: 		is_cleanup: NO
[2mJan 15 20:18:36.868[0m [34mDEBUG[0m wombat_symx: 		Statement: "\"  %1 = call { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %x, i32 3)\""
[2mJan 15 20:18:36.868[0m [34mDEBUG[0m wombat_symx: 		Statement: "\"  %_6.0 = extractvalue { i32, i1 } %1, 0\""
[2mJan 15 20:18:36.868[0m [34mDEBUG[0m wombat_symx: 		Statement: "\"  %_6.1 = extractvalue { i32, i1 } %1, 1\""
[2mJan 15 20:18:36.868[0m [34mDEBUG[0m wombat_symx: 		Statement: "\"  br i1 %_6.1, label %panic, label %bb5, !prof !3\""
[2mJan 15 20:18:36.868[0m [34mDEBUG[0m wombat_symx: 		Last statement is a terminator
[2mJan 15 20:18:36.868[0m [34mDEBUG[0m wombat_symx: 	Basic Block: "panic"
[2mJan 15 20:18:36.868[0m [34mDEBUG[0m wombat_symx: 		is_cleanup: YES
[2mJan 15 20:18:36.868[0m [34mDEBUG[0m wombat_symx: 		Statement: "\"  call void @_ZN4core9panicking5panic17h4241c5ccea17facaE([0 x i8]* noundef nonnull align 1 bitcast ([28 x i8]* @str.0 to [0 x i8]*), i64 28, %\\\"core::panic::location::Location\\\"* noundef align 8 dereferenceable(24) bitcast (<{ i8*, [16 x i8] }>* @alloc35 to %\\\"core::panic::location::Location\\\"*)) #7\""
[2mJan 15 20:18:36.868[0m [34mDEBUG[0m wombat_symx: 		Statement: "\"  unreachable\""
[2mJan 15 20:18:36.868[0m [34mDEBUG[0m wombat_symx: 		Last statement is a terminator
[2mJan 15 20:18:36.868[0m [34mDEBUG[0m wombat_symx: 	Basic Block: "bb5"
[2mJan 15 20:18:36.868[0m [34mDEBUG[0m wombat_symx: 		is_cleanup: NO
[2mJan 15 20:18:36.868[0m [34mDEBUG[0m wombat_symx: 		Statement: "\"  %r.0 = phi i32 [ %_6.0, %bb1 ], [ %_8.0, %bb3 ]\""
[2mJan 15 20:18:36.868[0m [34mDEBUG[0m wombat_symx: 		Statement: "\"  br i1 %c2, label %bb6, label %bb8\""
[2mJan 15 20:18:36.868[0m [34mDEBUG[0m wombat_symx: 		Last statement is a terminator
[2mJan 15 20:18:36.868[0m [34mDEBUG[0m wombat_symx: 	Basic Block: "panic1"
[2mJan 15 20:18:36.868[0m [34mDEBUG[0m wombat_symx: 		is_cleanup: YES
[2mJan 15 20:18:36.868[0m [34mDEBUG[0m wombat_symx: 		Statement: "\"  call void @_ZN4core9panicking5panic17h4241c5ccea17facaE([0 x i8]* noundef nonnull align 1 bitcast ([28 x i8]* @str.0 to [0 x i8]*), i64 28, %\\\"core::panic::location::Location\\\"* noundef align 8 dereferenceable(24) bitcast (<{ i8*, [16 x i8] }>* @alloc37 to %\\\"core::panic::location::Location\\\"*)) #7\""
[2mJan 15 20:18:36.868[0m [34mDEBUG[0m wombat_symx: 		Statement: "\"  unreachable\""
[2mJan 15 20:18:36.868[0m [34mDEBUG[0m wombat_symx: 		Last statement is a terminator
[2mJan 15 20:18:36.868[0m [34mDEBUG[0m wombat_symx: 	Basic Block: "bb8"
[2mJan 15 20:18:36.868[0m [34mDEBUG[0m wombat_symx: 		is_cleanup: NO
[2mJan 15 20:18:36.868[0m [34mDEBUG[0m wombat_symx: 		Statement: "\"  %2 = call { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %r.0, i32 2)\""
[2mJan 15 20:18:36.869[0m [34mDEBUG[0m wombat_symx: 		Statement: "\"  %_14.0 = extractvalue { i32, i1 } %2, 0\""
[2mJan 15 20:18:36.869[0m [34mDEBUG[0m wombat_symx: 		Statement: "\"  %_14.1 = extractvalue { i32, i1 } %2, 1\""
[2mJan 15 20:18:36.869[0m [34mDEBUG[0m wombat_symx: 		Statement: "\"  br i1 %_14.1, label %panic3, label %bb10, !prof !3\""
[2mJan 15 20:18:36.869[0m [34mDEBUG[0m wombat_symx: 		Last statement is a terminator
[2mJan 15 20:18:36.869[0m [34mDEBUG[0m wombat_symx: 	Basic Block: "bb6"
[2mJan 15 20:18:36.869[0m [34mDEBUG[0m wombat_symx: 		is_cleanup: NO
[2mJan 15 20:18:36.869[0m [34mDEBUG[0m wombat_symx: 		Statement: "\"  %3 = call { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %r.0, i32 1)\""
[2mJan 15 20:18:36.869[0m [34mDEBUG[0m wombat_symx: 		Statement: "\"  %_12.0 = extractvalue { i32, i1 } %3, 0\""
[2mJan 15 20:18:36.869[0m [34mDEBUG[0m wombat_symx: 		Statement: "\"  %_12.1 = extractvalue { i32, i1 } %3, 1\""
[2mJan 15 20:18:36.869[0m [34mDEBUG[0m wombat_symx: 		Statement: "\"  br i1 %_12.1, label %panic2, label %bb10, !prof !3\""
[2mJan 15 20:18:36.869[0m [34mDEBUG[0m wombat_symx: 		Last statement is a terminator
[2mJan 15 20:18:36.869[0m [34mDEBUG[0m wombat_symx: 	Basic Block: "panic2"
[2mJan 15 20:18:36.869[0m [34mDEBUG[0m wombat_symx: 		is_cleanup: YES
[2mJan 15 20:18:36.869[0m [34mDEBUG[0m wombat_symx: 		Statement: "\"  call void @_ZN4core9panicking5panic17h4241c5ccea17facaE([0 x i8]* noundef nonnull align 1 bitcast ([33 x i8]* @str.1 to [0 x i8]*), i64 33, %\\\"core::panic::location::Location\\\"* noundef align 8 dereferenceable(24) bitcast (<{ i8*, [16 x i8] }>* @alloc39 to %\\\"core::panic::location::Location\\\"*)) #7\""
[2mJan 15 20:18:36.869[0m [34mDEBUG[0m wombat_symx: 		Statement: "\"  unreachable\""
[2mJan 15 20:18:36.869[0m [34mDEBUG[0m wombat_symx: 		Last statement is a terminator
[2mJan 15 20:18:36.869[0m [34mDEBUG[0m wombat_symx: 	Basic Block: "bb10"
[2mJan 15 20:18:36.869[0m [34mDEBUG[0m wombat_symx: 		is_cleanup: NO
[2mJan 15 20:18:36.869[0m [34mDEBUG[0m wombat_symx: 		Statement: "\"  %_9.0 = phi i32 [ %_12.0, %bb6 ], [ %_14.0, %bb8 ]\""
[2mJan 15 20:18:36.869[0m [34mDEBUG[0m wombat_symx: 		Statement: "\"  %_16 = icmp sgt i32 %_9.0, %x\""
[2mJan 15 20:18:36.869[0m [34mDEBUG[0m wombat_symx: 		Statement: "\"  %_15 = xor i1 %_16, true\""
[2mJan 15 20:18:36.869[0m [34mDEBUG[0m wombat_symx: 		Statement: "\"  br i1 %_15, label %bb11, label %bb12\""
[2mJan 15 20:18:36.869[0m [34mDEBUG[0m wombat_symx: 		Last statement is a terminator
[2mJan 15 20:18:36.870[0m [34mDEBUG[0m wombat_symx: 	Basic Block: "panic3"
[2mJan 15 20:18:36.870[0m [34mDEBUG[0m wombat_symx: 		is_cleanup: YES
[2mJan 15 20:18:36.870[0m [34mDEBUG[0m wombat_symx: 		Statement: "\"  call void @_ZN4core9panicking5panic17h4241c5ccea17facaE([0 x i8]* noundef nonnull align 1 bitcast ([33 x i8]* @str.1 to [0 x i8]*), i64 33, %\\\"core::panic::location::Location\\\"* noundef align 8 dereferenceable(24) bitcast (<{ i8*, [16 x i8] }>* @alloc41 to %\\\"core::panic::location::Location\\\"*)) #7\""
[2mJan 15 20:18:36.870[0m [34mDEBUG[0m wombat_symx: 		Statement: "\"  unreachable\""
[2mJan 15 20:18:36.870[0m [34mDEBUG[0m wombat_symx: 		Last statement is a terminator
[2mJan 15 20:18:36.870[0m [34mDEBUG[0m wombat_symx: 	Basic Block: "bb12"
[2mJan 15 20:18:36.870[0m [34mDEBUG[0m wombat_symx: 		is_cleanup: NO
[2mJan 15 20:18:36.870[0m [34mDEBUG[0m wombat_symx: 		Statement: "\"  ret i32 %_9.0\""
[2mJan 15 20:18:36.870[0m [34mDEBUG[0m wombat_symx: 		Last statement is a terminator
[2mJan 15 20:18:36.870[0m [34mDEBUG[0m wombat_symx: 	Basic Block: "bb11"
[2mJan 15 20:18:36.870[0m [34mDEBUG[0m wombat_symx: 		is_cleanup: YES
[2mJan 15 20:18:36.870[0m [34mDEBUG[0m wombat_symx: 		Statement: "\"  call void @_ZN4core9panicking5panic17h4241c5ccea17facaE([0 x i8]* noundef nonnull align 1 bitcast (<{ [23 x i8] }>* @alloc53 to [0 x i8]*), i64 23, %\\\"core::panic::location::Location\\\"* noundef align 8 dereferenceable(24) bitcast (<{ i8*, [16 x i8] }>* @alloc44 to %\\\"core::panic::location::Location\\\"*)) #7\""
[2mJan 15 20:18:36.870[0m [34mDEBUG[0m wombat_symx: 		Statement: "\"  unreachable\""
[2mJan 15 20:18:36.870[0m [34mDEBUG[0m wombat_symx: 		Last statement is a terminator
[2mJan 15 20:18:36.870[0m [34mDEBUG[0m wombat_symx: 
[2mJan 15 20:18:36.870[0m [34mDEBUG[0m wombat_symx: Start node: "start"
IF STATEMENT
terminator is InstructionValue { instruction_value: Value { name: "", address: 0x55a6cc719130, is_const: false, is_null: false, is_undef: false, llvm_value: "  br i1 %c1, label %bb1, label %bb3", llvm_type: "void" } }
Operand 0 is Some(Left(IntValue(IntValue { int_value: Value { name: "c1", address: 0x55a6cc71dfd0, is_const: false, is_null: false, is_undef: false, llvm_value: "i1 %c1", llvm_type: "i1" } })))
Operand 1 is Some(Right(BasicBlock { address: 0x55a6cc721920, is_const: false, llvm_value: "\nbb3:                                              ; preds = %start\n  %0 = call { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %x, i32 4)\n  %_8.0 = extractvalue { i32, i1 } %0, 0\n  %_8.1 = extractvalue { i32, i1 } %0, 1\n  br i1 %_8.1, label %panic1, label %bb5, !prof !3\n", llvm_type: "label" }))
Operand 2 is Some(Right(BasicBlock { address: 0x55a6cc721970, is_const: false, llvm_value: "\nbb1:                                              ; preds = %start\n  %1 = call { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %x, i32 3)\n  %_6.0 = extractvalue { i32, i1 } %1, 0\n  %_6.1 = extractvalue { i32, i1 } %1, 1\n  br i1 %_6.1, label %panic, label %bb5, !prof !3\n", llvm_type: "label" }))
IF STATEMENT
terminator is InstructionValue { instruction_value: Value { name: "", address: 0x55a6cc719480, is_const: false, is_null: false, is_undef: false, llvm_value: "  br i1 %_8.1, label %panic1, label %bb5, !prof !3", llvm_type: "void" } }
Operand 0 is Some(Left(IntValue(IntValue { int_value: Value { name: "_8.1", address: 0x55a6cc7192f0, is_const: false, is_null: false, is_undef: false, llvm_value: "  %_8.1 = extractvalue { i32, i1 } %0, 1", llvm_type: "i1" } })))
Operand 1 is Some(Right(BasicBlock { address: 0x55a6cc721a60, is_const: false, llvm_value: "\nbb5:                                              ; preds = %bb3, %bb1\n  %r.0 = phi i32 [ %_6.0, %bb1 ], [ %_8.0, %bb3 ]\n  br i1 %c2, label %bb6, label %bb8\n", llvm_type: "label" }))
Operand 2 is Some(Right(BasicBlock { address: 0x55a6cc721b00, is_const: false, llvm_value: "\npanic1:                                           ; preds = %bb3\n  call void @_ZN4core9panicking5panic17h4241c5ccea17facaE([0 x i8]* noundef nonnull align 1 bitcast ([28 x i8]* @str.0 to [0 x i8]*), i64 28, %\"core::panic::location::Location\"* noundef align 8 dereferenceable(24) bitcast (<{ i8*, [16 x i8] }>* @alloc37 to %\"core::panic::location::Location\"*)) #7\n  unreachable\n", llvm_type: "label" }))
IF STATEMENT
terminator is InstructionValue { instruction_value: Value { name: "", address: 0x55a6cc7197d0, is_const: false, is_null: false, is_undef: false, llvm_value: "  br i1 %_6.1, label %panic, label %bb5, !prof !3", llvm_type: "void" } }
Operand 0 is Some(Left(IntValue(IntValue { int_value: Value { name: "_6.1", address: 0x55a6cc719640, is_const: false, is_null: false, is_undef: false, llvm_value: "  %_6.1 = extractvalue { i32, i1 } %1, 1", llvm_type: "i1" } })))
Operand 1 is Some(Right(BasicBlock { address: 0x55a6cc721a60, is_const: false, llvm_value: "\nbb5:                                              ; preds = %bb3, %bb1\n  %r.0 = phi i32 [ %_6.0, %bb1 ], [ %_8.0, %bb3 ]\n  br i1 %c2, label %bb6, label %bb8\n", llvm_type: "label" }))
Operand 2 is Some(Right(BasicBlock { address: 0x55a6cc721a10, is_const: false, llvm_value: "\npanic:                                            ; preds = %bb1\n  call void @_ZN4core9panicking5panic17h4241c5ccea17facaE([0 x i8]* noundef nonnull align 1 bitcast ([28 x i8]* @str.0 to [0 x i8]*), i64 28, %\"core::panic::location::Location\"* noundef align 8 dereferenceable(24) bitcast (<{ i8*, [16 x i8] }>* @alloc35 to %\"core::panic::location::Location\"*)) #7\n  unreachable\n", llvm_type: "label" }))
IF STATEMENT
terminator is InstructionValue { instruction_value: Value { name: "", address: 0x55a6cc723310, is_const: false, is_null: false, is_undef: false, llvm_value: "  br i1 %c2, label %bb6, label %bb8", llvm_type: "void" } }
Operand 0 is Some(Left(IntValue(IntValue { int_value: Value { name: "c2", address: 0x55a6cc71dff8, is_const: false, is_null: false, is_undef: false, llvm_value: "i1 %c2", llvm_type: "i1" } })))
Operand 1 is Some(Right(BasicBlock { address: 0x55a6cc721b50, is_const: false, llvm_value: "\nbb8:                                              ; preds = %bb5\n  %2 = call { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %r.0, i32 2)\n  %_14.0 = extractvalue { i32, i1 } %2, 0\n  %_14.1 = extractvalue { i32, i1 } %2, 1\n  br i1 %_14.1, label %panic3, label %bb10, !prof !3\n", llvm_type: "label" }))
Operand 2 is Some(Right(BasicBlock { address: 0x55a6cc721ba0, is_const: false, llvm_value: "\nbb6:                                              ; preds = %bb5\n  %3 = call { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %r.0, i32 1)\n  %_12.0 = extractvalue { i32, i1 } %3, 0\n  %_12.1 = extractvalue { i32, i1 } %3, 1\n  br i1 %_12.1, label %panic2, label %bb10, !prof !3\n", llvm_type: "label" }))
IF STATEMENT
terminator is InstructionValue { instruction_value: Value { name: "", address: 0x55a6cc723820, is_const: false, is_null: false, is_undef: false, llvm_value: "  br i1 %_14.1, label %panic3, label %bb10, !prof !3", llvm_type: "void" } }
Operand 0 is Some(Left(IntValue(IntValue { int_value: Value { name: "_14.1", address: 0x55a6cc723690, is_const: false, is_null: false, is_undef: false, llvm_value: "  %_14.1 = extractvalue { i32, i1 } %2, 1", llvm_type: "i1" } })))
Operand 1 is Some(Right(BasicBlock { address: 0x55a6cc721c90, is_const: false, llvm_value: "\nbb10:                                             ; preds = %bb8, %bb6\n  %_9.0 = phi i32 [ %_12.0, %bb6 ], [ %_14.0, %bb8 ]\n  %_16 = icmp sgt i32 %_9.0, %x\n  %_15 = xor i1 %_16, true\n  br i1 %_15, label %bb11, label %bb12\n", llvm_type: "label" }))
Operand 2 is Some(Right(BasicBlock { address: 0x55a6cc721d30, is_const: false, llvm_value: "\npanic3:                                           ; preds = %bb8\n  call void @_ZN4core9panicking5panic17h4241c5ccea17facaE([0 x i8]* noundef nonnull align 1 bitcast ([33 x i8]* @str.1 to [0 x i8]*), i64 33, %\"core::panic::location::Location\"* noundef align 8 dereferenceable(24) bitcast (<{ i8*, [16 x i8] }>* @alloc41 to %\"core::panic::location::Location\"*)) #7\n  unreachable\n", llvm_type: "label" }))
IF STATEMENT
terminator is InstructionValue { instruction_value: Value { name: "", address: 0x55a6cc723be0, is_const: false, is_null: false, is_undef: false, llvm_value: "  br i1 %_12.1, label %panic2, label %bb10, !prof !3", llvm_type: "void" } }
Operand 0 is Some(Left(IntValue(IntValue { int_value: Value { name: "_12.1", address: 0x55a6cc723a50, is_const: false, is_null: false, is_undef: false, llvm_value: "  %_12.1 = extractvalue { i32, i1 } %3, 1", llvm_type: "i1" } })))
Operand 1 is Some(Right(BasicBlock { address: 0x55a6cc721c90, is_const: false, llvm_value: "\nbb10:                                             ; preds = %bb8, %bb6\n  %_9.0 = phi i32 [ %_12.0, %bb6 ], [ %_14.0, %bb8 ]\n  %_16 = icmp sgt i32 %_9.0, %x\n  %_15 = xor i1 %_16, true\n  br i1 %_15, label %bb11, label %bb12\n", llvm_type: "label" }))
Operand 2 is Some(Right(BasicBlock { address: 0x55a6cc721c40, is_const: false, llvm_value: "\npanic2:                                           ; preds = %bb6\n  call void @_ZN4core9panicking5panic17h4241c5ccea17facaE([0 x i8]* noundef nonnull align 1 bitcast ([33 x i8]* @str.1 to [0 x i8]*), i64 33, %\"core::panic::location::Location\"* noundef align 8 dereferenceable(24) bitcast (<{ i8*, [16 x i8] }>* @alloc39 to %\"core::panic::location::Location\"*)) #7\n  unreachable\n", llvm_type: "label" }))
IF STATEMENT
terminator is InstructionValue { instruction_value: Value { name: "", address: 0x55a6cc724150, is_const: false, is_null: false, is_undef: false, llvm_value: "  br i1 %_15, label %bb11, label %bb12", llvm_type: "void" } }
Operand 0 is Some(Left(IntValue(IntValue { int_value: Value { name: "_15", address: 0x55a6cc7240a0, is_const: false, is_null: false, is_undef: false, llvm_value: "  %_15 = xor i1 %_16, true", llvm_type: "i1" } })))
Operand 1 is Some(Right(BasicBlock { address: 0x55a6cc721d80, is_const: false, llvm_value: "\nbb12:                                             ; preds = %bb10\n  ret i32 %_9.0\n", llvm_type: "label" }))
Operand 2 is Some(Right(BasicBlock { address: 0x55a6cc721dd0, is_const: false, llvm_value: "\nbb11:                                             ; preds = %bb10\n  call void @_ZN4core9panicking5panic17h4241c5ccea17facaE([0 x i8]* noundef nonnull align 1 bitcast (<{ [23 x i8] }>* @alloc53 to [0 x i8]*), i64 23, %\"core::panic::location::Location\"* noundef align 8 dereferenceable(24) bitcast (<{ i8*, [16 x i8] }>* @alloc44 to %\"core::panic::location::Location\"*)) #7\n  unreachable\n", llvm_type: "label" }))
[2mJan 15 20:18:36.871[0m [34mDEBUG[0m wombat_symx: 	Successor to start node: "bb1"
[2mJan 15 20:18:36.871[0m [34mDEBUG[0m wombat_symx: 	Successor to start node: "bb3"
IF STATEMENT
terminator is InstructionValue { instruction_value: Value { name: "", address: 0x55a6cc719130, is_const: false, is_null: false, is_undef: false, llvm_value: "  br i1 %c1, label %bb1, label %bb3", llvm_type: "void" } }
Operand 0 is Some(Left(IntValue(IntValue { int_value: Value { name: "c1", address: 0x55a6cc71dfd0, is_const: false, is_null: false, is_undef: false, llvm_value: "i1 %c1", llvm_type: "i1" } })))
Operand 1 is Some(Right(BasicBlock { address: 0x55a6cc721920, is_const: false, llvm_value: "\nbb3:                                              ; preds = %start\n  %0 = call { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %x, i32 4)\n  %_8.0 = extractvalue { i32, i1 } %0, 0\n  %_8.1 = extractvalue { i32, i1 } %0, 1\n  br i1 %_8.1, label %panic1, label %bb5, !prof !3\n", llvm_type: "label" }))
Operand 2 is Some(Right(BasicBlock { address: 0x55a6cc721970, is_const: false, llvm_value: "\nbb1:                                              ; preds = %start\n  %1 = call { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %x, i32 3)\n  %_6.0 = extractvalue { i32, i1 } %1, 0\n  %_6.1 = extractvalue { i32, i1 } %1, 1\n  br i1 %_6.1, label %panic, label %bb5, !prof !3\n", llvm_type: "label" }))
IF STATEMENT
terminator is InstructionValue { instruction_value: Value { name: "", address: 0x55a6cc719480, is_const: false, is_null: false, is_undef: false, llvm_value: "  br i1 %_8.1, label %panic1, label %bb5, !prof !3", llvm_type: "void" } }
Operand 0 is Some(Left(IntValue(IntValue { int_value: Value { name: "_8.1", address: 0x55a6cc7192f0, is_const: false, is_null: false, is_undef: false, llvm_value: "  %_8.1 = extractvalue { i32, i1 } %0, 1", llvm_type: "i1" } })))
Operand 1 is Some(Right(BasicBlock { address: 0x55a6cc721a60, is_const: false, llvm_value: "\nbb5:                                              ; preds = %bb3, %bb1\n  %r.0 = phi i32 [ %_6.0, %bb1 ], [ %_8.0, %bb3 ]\n  br i1 %c2, label %bb6, label %bb8\n", llvm_type: "label" }))
Operand 2 is Some(Right(BasicBlock { address: 0x55a6cc721b00, is_const: false, llvm_value: "\npanic1:                                           ; preds = %bb3\n  call void @_ZN4core9panicking5panic17h4241c5ccea17facaE([0 x i8]* noundef nonnull align 1 bitcast ([28 x i8]* @str.0 to [0 x i8]*), i64 28, %\"core::panic::location::Location\"* noundef align 8 dereferenceable(24) bitcast (<{ i8*, [16 x i8] }>* @alloc37 to %\"core::panic::location::Location\"*)) #7\n  unreachable\n", llvm_type: "label" }))
IF STATEMENT
terminator is InstructionValue { instruction_value: Value { name: "", address: 0x55a6cc7197d0, is_const: false, is_null: false, is_undef: false, llvm_value: "  br i1 %_6.1, label %panic, label %bb5, !prof !3", llvm_type: "void" } }
Operand 0 is Some(Left(IntValue(IntValue { int_value: Value { name: "_6.1", address: 0x55a6cc719640, is_const: false, is_null: false, is_undef: false, llvm_value: "  %_6.1 = extractvalue { i32, i1 } %1, 1", llvm_type: "i1" } })))
Operand 1 is Some(Right(BasicBlock { address: 0x55a6cc721a60, is_const: false, llvm_value: "\nbb5:                                              ; preds = %bb3, %bb1\n  %r.0 = phi i32 [ %_6.0, %bb1 ], [ %_8.0, %bb3 ]\n  br i1 %c2, label %bb6, label %bb8\n", llvm_type: "label" }))
Operand 2 is Some(Right(BasicBlock { address: 0x55a6cc721a10, is_const: false, llvm_value: "\npanic:                                            ; preds = %bb1\n  call void @_ZN4core9panicking5panic17h4241c5ccea17facaE([0 x i8]* noundef nonnull align 1 bitcast ([28 x i8]* @str.0 to [0 x i8]*), i64 28, %\"core::panic::location::Location\"* noundef align 8 dereferenceable(24) bitcast (<{ i8*, [16 x i8] }>* @alloc35 to %\"core::panic::location::Location\"*)) #7\n  unreachable\n", llvm_type: "label" }))
IF STATEMENT
terminator is InstructionValue { instruction_value: Value { name: "", address: 0x55a6cc723310, is_const: false, is_null: false, is_undef: false, llvm_value: "  br i1 %c2, label %bb6, label %bb8", llvm_type: "void" } }
Operand 0 is Some(Left(IntValue(IntValue { int_value: Value { name: "c2", address: 0x55a6cc71dff8, is_const: false, is_null: false, is_undef: false, llvm_value: "i1 %c2", llvm_type: "i1" } })))
Operand 1 is Some(Right(BasicBlock { address: 0x55a6cc721b50, is_const: false, llvm_value: "\nbb8:                                              ; preds = %bb5\n  %2 = call { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %r.0, i32 2)\n  %_14.0 = extractvalue { i32, i1 } %2, 0\n  %_14.1 = extractvalue { i32, i1 } %2, 1\n  br i1 %_14.1, label %panic3, label %bb10, !prof !3\n", llvm_type: "label" }))
Operand 2 is Some(Right(BasicBlock { address: 0x55a6cc721ba0, is_const: false, llvm_value: "\nbb6:                                              ; preds = %bb5\n  %3 = call { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %r.0, i32 1)\n  %_12.0 = extractvalue { i32, i1 } %3, 0\n  %_12.1 = extractvalue { i32, i1 } %3, 1\n  br i1 %_12.1, label %panic2, label %bb10, !prof !3\n", llvm_type: "label" }))
IF STATEMENT
terminator is InstructionValue { instruction_value: Value { name: "", address: 0x55a6cc723820, is_const: false, is_null: false, is_undef: false, llvm_value: "  br i1 %_14.1, label %panic3, label %bb10, !prof !3", llvm_type: "void" } }
Operand 0 is Some(Left(IntValue(IntValue { int_value: Value { name: "_14.1", address: 0x55a6cc723690, is_const: false, is_null: false, is_undef: false, llvm_value: "  %_14.1 = extractvalue { i32, i1 } %2, 1", llvm_type: "i1" } })))
Operand 1 is Some(Right(BasicBlock { address: 0x55a6cc721c90, is_const: false, llvm_value: "\nbb10:                                             ; preds = %bb8, %bb6\n  %_9.0 = phi i32 [ %_12.0, %bb6 ], [ %_14.0, %bb8 ]\n  %_16 = icmp sgt i32 %_9.0, %x\n  %_15 = xor i1 %_16, true\n  br i1 %_15, label %bb11, label %bb12\n", llvm_type: "label" }))
Operand 2 is Some(Right(BasicBlock { address: 0x55a6cc721d30, is_const: false, llvm_value: "\npanic3:                                           ; preds = %bb8\n  call void @_ZN4core9panicking5panic17h4241c5ccea17facaE([0 x i8]* noundef nonnull align 1 bitcast ([33 x i8]* @str.1 to [0 x i8]*), i64 33, %\"core::panic::location::Location\"* noundef align 8 dereferenceable(24) bitcast (<{ i8*, [16 x i8] }>* @alloc41 to %\"core::panic::location::Location\"*)) #7\n  unreachable\n", llvm_type: "label" }))
IF STATEMENT
terminator is InstructionValue { instruction_value: Value { name: "", address: 0x55a6cc723be0, is_const: false, is_null: false, is_undef: false, llvm_value: "  br i1 %_12.1, label %panic2, label %bb10, !prof !3", llvm_type: "void" } }
Operand 0 is Some(Left(IntValue(IntValue { int_value: Value { name: "_12.1", address: 0x55a6cc723a50, is_const: false, is_null: false, is_undef: false, llvm_value: "  %_12.1 = extractvalue { i32, i1 } %3, 1", llvm_type: "i1" } })))
Operand 1 is Some(Right(BasicBlock { address: 0x55a6cc721c90, is_const: false, llvm_value: "\nbb10:                                             ; preds = %bb8, %bb6\n  %_9.0 = phi i32 [ %_12.0, %bb6 ], [ %_14.0, %bb8 ]\n  %_16 = icmp sgt i32 %_9.0, %x\n  %_15 = xor i1 %_16, true\n  br i1 %_15, label %bb11, label %bb12\n", llvm_type: "label" }))
Operand 2 is Some(Right(BasicBlock { address: 0x55a6cc721c40, is_const: false, llvm_value: "\npanic2:                                           ; preds = %bb6\n  call void @_ZN4core9panicking5panic17h4241c5ccea17facaE([0 x i8]* noundef nonnull align 1 bitcast ([33 x i8]* @str.1 to [0 x i8]*), i64 33, %\"core::panic::location::Location\"* noundef align 8 dereferenceable(24) bitcast (<{ i8*, [16 x i8] }>* @alloc39 to %\"core::panic::location::Location\"*)) #7\n  unreachable\n", llvm_type: "label" }))
IF STATEMENT
terminator is InstructionValue { instruction_value: Value { name: "", address: 0x55a6cc724150, is_const: false, is_null: false, is_undef: false, llvm_value: "  br i1 %_15, label %bb11, label %bb12", llvm_type: "void" } }
Operand 0 is Some(Left(IntValue(IntValue { int_value: Value { name: "_15", address: 0x55a6cc7240a0, is_const: false, is_null: false, is_undef: false, llvm_value: "  %_15 = xor i1 %_16, true", llvm_type: "i1" } })))
Operand 1 is Some(Right(BasicBlock { address: 0x55a6cc721d80, is_const: false, llvm_value: "\nbb12:                                             ; preds = %bb10\n  ret i32 %_9.0\n", llvm_type: "label" }))
Operand 2 is Some(Right(BasicBlock { address: 0x55a6cc721dd0, is_const: false, llvm_value: "\nbb11:                                             ; preds = %bb10\n  call void @_ZN4core9panicking5panic17h4241c5ccea17facaE([0 x i8]* noundef nonnull align 1 bitcast (<{ [23 x i8] }>* @alloc53 to [0 x i8]*), i64 23, %\"core::panic::location::Location\"* noundef align 8 dereferenceable(24) bitcast (<{ i8*, [16 x i8] }>* @alloc44 to %\"core::panic::location::Location\"*)) #7\n  unreachable\n", llvm_type: "label" }))
[2mJan 15 20:18:36.871[0m [34mDEBUG[0m wombat_symx: Forward edges:	{"panic": {"common_end"}, "bb10": {"bb11", "bb12"}, "bb5": {"bb8", "bb6"}, "bb3": {"bb5", "panic1"}, "bb6": {"bb10", "panic2"}, "bb8": {"bb10", "panic3"}, "panic3": {"common_end"}, "bb12": {"common_end"}, "panic1": {"common_end"}, "bb1": {"panic", "bb5"}, "bb11": {"common_end"}, "panic2": {"common_end"}, "start": {"bb1", "bb3"}}
IF STATEMENT
terminator is InstructionValue { instruction_value: Value { name: "", address: 0x55a6cc719130, is_const: false, is_null: false, is_undef: false, llvm_value: "  br i1 %c1, label %bb1, label %bb3", llvm_type: "void" } }
Operand 0 is Some(Left(IntValue(IntValue { int_value: Value { name: "c1", address: 0x55a6cc71dfd0, is_const: false, is_null: false, is_undef: false, llvm_value: "i1 %c1", llvm_type: "i1" } })))
Operand 1 is Some(Right(BasicBlock { address: 0x55a6cc721920, is_const: false, llvm_value: "\nbb3:                                              ; preds = %start\n  %0 = call { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %x, i32 4)\n  %_8.0 = extractvalue { i32, i1 } %0, 0\n  %_8.1 = extractvalue { i32, i1 } %0, 1\n  br i1 %_8.1, label %panic1, label %bb5, !prof !3\n", llvm_type: "label" }))
Operand 2 is Some(Right(BasicBlock { address: 0x55a6cc721970, is_const: false, llvm_value: "\nbb1:                                              ; preds = %start\n  %1 = call { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %x, i32 3)\n  %_6.0 = extractvalue { i32, i1 } %1, 0\n  %_6.1 = extractvalue { i32, i1 } %1, 1\n  br i1 %_6.1, label %panic, label %bb5, !prof !3\n", llvm_type: "label" }))
IF STATEMENT
terminator is InstructionValue { instruction_value: Value { name: "", address: 0x55a6cc719480, is_const: false, is_null: false, is_undef: false, llvm_value: "  br i1 %_8.1, label %panic1, label %bb5, !prof !3", llvm_type: "void" } }
Operand 0 is Some(Left(IntValue(IntValue { int_value: Value { name: "_8.1", address: 0x55a6cc7192f0, is_const: false, is_null: false, is_undef: false, llvm_value: "  %_8.1 = extractvalue { i32, i1 } %0, 1", llvm_type: "i1" } })))
Operand 1 is Some(Right(BasicBlock { address: 0x55a6cc721a60, is_const: false, llvm_value: "\nbb5:                                              ; preds = %bb3, %bb1\n  %r.0 = phi i32 [ %_6.0, %bb1 ], [ %_8.0, %bb3 ]\n  br i1 %c2, label %bb6, label %bb8\n", llvm_type: "label" }))
Operand 2 is Some(Right(BasicBlock { address: 0x55a6cc721b00, is_const: false, llvm_value: "\npanic1:                                           ; preds = %bb3\n  call void @_ZN4core9panicking5panic17h4241c5ccea17facaE([0 x i8]* noundef nonnull align 1 bitcast ([28 x i8]* @str.0 to [0 x i8]*), i64 28, %\"core::panic::location::Location\"* noundef align 8 dereferenceable(24) bitcast (<{ i8*, [16 x i8] }>* @alloc37 to %\"core::panic::location::Location\"*)) #7\n  unreachable\n", llvm_type: "label" }))
IF STATEMENT
terminator is InstructionValue { instruction_value: Value { name: "", address: 0x55a6cc7197d0, is_const: false, is_null: false, is_undef: false, llvm_value: "  br i1 %_6.1, label %panic, label %bb5, !prof !3", llvm_type: "void" } }
Operand 0 is Some(Left(IntValue(IntValue { int_value: Value { name: "_6.1", address: 0x55a6cc719640, is_const: false, is_null: false, is_undef: false, llvm_value: "  %_6.1 = extractvalue { i32, i1 } %1, 1", llvm_type: "i1" } })))
Operand 1 is Some(Right(BasicBlock { address: 0x55a6cc721a60, is_const: false, llvm_value: "\nbb5:                                              ; preds = %bb3, %bb1\n  %r.0 = phi i32 [ %_6.0, %bb1 ], [ %_8.0, %bb3 ]\n  br i1 %c2, label %bb6, label %bb8\n", llvm_type: "label" }))
Operand 2 is Some(Right(BasicBlock { address: 0x55a6cc721a10, is_const: false, llvm_value: "\npanic:                                            ; preds = %bb1\n  call void @_ZN4core9panicking5panic17h4241c5ccea17facaE([0 x i8]* noundef nonnull align 1 bitcast ([28 x i8]* @str.0 to [0 x i8]*), i64 28, %\"core::panic::location::Location\"* noundef align 8 dereferenceable(24) bitcast (<{ i8*, [16 x i8] }>* @alloc35 to %\"core::panic::location::Location\"*)) #7\n  unreachable\n", llvm_type: "label" }))
IF STATEMENT
terminator is InstructionValue { instruction_value: Value { name: "", address: 0x55a6cc723310, is_const: false, is_null: false, is_undef: false, llvm_value: "  br i1 %c2, label %bb6, label %bb8", llvm_type: "void" } }
Operand 0 is Some(Left(IntValue(IntValue { int_value: Value { name: "c2", address: 0x55a6cc71dff8, is_const: false, is_null: false, is_undef: false, llvm_value: "i1 %c2", llvm_type: "i1" } })))
Operand 1 is Some(Right(BasicBlock { address: 0x55a6cc721b50, is_const: false, llvm_value: "\nbb8:                                              ; preds = %bb5\n  %2 = call { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %r.0, i32 2)\n  %_14.0 = extractvalue { i32, i1 } %2, 0\n  %_14.1 = extractvalue { i32, i1 } %2, 1\n  br i1 %_14.1, label %panic3, label %bb10, !prof !3\n", llvm_type: "label" }))
Operand 2 is Some(Right(BasicBlock { address: 0x55a6cc721ba0, is_const: false, llvm_value: "\nbb6:                                              ; preds = %bb5\n  %3 = call { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %r.0, i32 1)\n  %_12.0 = extractvalue { i32, i1 } %3, 0\n  %_12.1 = extractvalue { i32, i1 } %3, 1\n  br i1 %_12.1, label %panic2, label %bb10, !prof !3\n", llvm_type: "label" }))
IF STATEMENT
terminator is InstructionValue { instruction_value: Value { name: "", address: 0x55a6cc723820, is_const: false, is_null: false, is_undef: false, llvm_value: "  br i1 %_14.1, label %panic3, label %bb10, !prof !3", llvm_type: "void" } }
Operand 0 is Some(Left(IntValue(IntValue { int_value: Value { name: "_14.1", address: 0x55a6cc723690, is_const: false, is_null: false, is_undef: false, llvm_value: "  %_14.1 = extractvalue { i32, i1 } %2, 1", llvm_type: "i1" } })))
Operand 1 is Some(Right(BasicBlock { address: 0x55a6cc721c90, is_const: false, llvm_value: "\nbb10:                                             ; preds = %bb8, %bb6\n  %_9.0 = phi i32 [ %_12.0, %bb6 ], [ %_14.0, %bb8 ]\n  %_16 = icmp sgt i32 %_9.0, %x\n  %_15 = xor i1 %_16, true\n  br i1 %_15, label %bb11, label %bb12\n", llvm_type: "label" }))
Operand 2 is Some(Right(BasicBlock { address: 0x55a6cc721d30, is_const: false, llvm_value: "\npanic3:                                           ; preds = %bb8\n  call void @_ZN4core9panicking5panic17h4241c5ccea17facaE([0 x i8]* noundef nonnull align 1 bitcast ([33 x i8]* @str.1 to [0 x i8]*), i64 33, %\"core::panic::location::Location\"* noundef align 8 dereferenceable(24) bitcast (<{ i8*, [16 x i8] }>* @alloc41 to %\"core::panic::location::Location\"*)) #7\n  unreachable\n", llvm_type: "label" }))
IF STATEMENT
terminator is InstructionValue { instruction_value: Value { name: "", address: 0x55a6cc723be0, is_const: false, is_null: false, is_undef: false, llvm_value: "  br i1 %_12.1, label %panic2, label %bb10, !prof !3", llvm_type: "void" } }
Operand 0 is Some(Left(IntValue(IntValue { int_value: Value { name: "_12.1", address: 0x55a6cc723a50, is_const: false, is_null: false, is_undef: false, llvm_value: "  %_12.1 = extractvalue { i32, i1 } %3, 1", llvm_type: "i1" } })))
Operand 1 is Some(Right(BasicBlock { address: 0x55a6cc721c90, is_const: false, llvm_value: "\nbb10:                                             ; preds = %bb8, %bb6\n  %_9.0 = phi i32 [ %_12.0, %bb6 ], [ %_14.0, %bb8 ]\n  %_16 = icmp sgt i32 %_9.0, %x\n  %_15 = xor i1 %_16, true\n  br i1 %_15, label %bb11, label %bb12\n", llvm_type: "label" }))
Operand 2 is Some(Right(BasicBlock { address: 0x55a6cc721c40, is_const: false, llvm_value: "\npanic2:                                           ; preds = %bb6\n  call void @_ZN4core9panicking5panic17h4241c5ccea17facaE([0 x i8]* noundef nonnull align 1 bitcast ([33 x i8]* @str.1 to [0 x i8]*), i64 33, %\"core::panic::location::Location\"* noundef align 8 dereferenceable(24) bitcast (<{ i8*, [16 x i8] }>* @alloc39 to %\"core::panic::location::Location\"*)) #7\n  unreachable\n", llvm_type: "label" }))
IF STATEMENT
terminator is InstructionValue { instruction_value: Value { name: "", address: 0x55a6cc724150, is_const: false, is_null: false, is_undef: false, llvm_value: "  br i1 %_15, label %bb11, label %bb12", llvm_type: "void" } }
Operand 0 is Some(Left(IntValue(IntValue { int_value: Value { name: "_15", address: 0x55a6cc7240a0, is_const: false, is_null: false, is_undef: false, llvm_value: "  %_15 = xor i1 %_16, true", llvm_type: "i1" } })))
Operand 1 is Some(Right(BasicBlock { address: 0x55a6cc721d80, is_const: false, llvm_value: "\nbb12:                                             ; preds = %bb10\n  ret i32 %_9.0\n", llvm_type: "label" }))
Operand 2 is Some(Right(BasicBlock { address: 0x55a6cc721dd0, is_const: false, llvm_value: "\nbb11:                                             ; preds = %bb10\n  call void @_ZN4core9panicking5panic17h4241c5ccea17facaE([0 x i8]* noundef nonnull align 1 bitcast (<{ [23 x i8] }>* @alloc53 to [0 x i8]*), i64 23, %\"core::panic::location::Location\"* noundef align 8 dereferenceable(24) bitcast (<{ i8*, [16 x i8] }>* @alloc44 to %\"core::panic::location::Location\"*)) #7\n  unreachable\n", llvm_type: "label" }))
[2mJan 15 20:18:36.872[0m [34mDEBUG[0m wombat_symx: Backward edges:	{"panic3": {"bb8"}, "bb11": {"bb10"}, "bb1": {"start"}, "bb5": {"bb3", "bb1"}, "panic2": {"bb6"}, "panic1": {"bb3"}, "bb3": {"start"}, "panic": {"bb1"}, "bb6": {"bb5"}, "bb10": {"bb8", "bb6"}, "bb8": {"bb5"}, "bb12": {"bb10"}, "common_end": {"bb11", "panic", "bb12", "panic2", "panic3", "panic1"}, "start": {}}
IF STATEMENT
terminator is InstructionValue { instruction_value: Value { name: "", address: 0x55a6cc719130, is_const: false, is_null: false, is_undef: false, llvm_value: "  br i1 %c1, label %bb1, label %bb3", llvm_type: "void" } }
Operand 0 is Some(Left(IntValue(IntValue { int_value: Value { name: "c1", address: 0x55a6cc71dfd0, is_const: false, is_null: false, is_undef: false, llvm_value: "i1 %c1", llvm_type: "i1" } })))
Operand 1 is Some(Right(BasicBlock { address: 0x55a6cc721920, is_const: false, llvm_value: "\nbb3:                                              ; preds = %start\n  %0 = call { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %x, i32 4)\n  %_8.0 = extractvalue { i32, i1 } %0, 0\n  %_8.1 = extractvalue { i32, i1 } %0, 1\n  br i1 %_8.1, label %panic1, label %bb5, !prof !3\n", llvm_type: "label" }))
Operand 2 is Some(Right(BasicBlock { address: 0x55a6cc721970, is_const: false, llvm_value: "\nbb1:                                              ; preds = %start\n  %1 = call { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %x, i32 3)\n  %_6.0 = extractvalue { i32, i1 } %1, 0\n  %_6.1 = extractvalue { i32, i1 } %1, 1\n  br i1 %_6.1, label %panic, label %bb5, !prof !3\n", llvm_type: "label" }))
IF STATEMENT
terminator is InstructionValue { instruction_value: Value { name: "", address: 0x55a6cc719480, is_const: false, is_null: false, is_undef: false, llvm_value: "  br i1 %_8.1, label %panic1, label %bb5, !prof !3", llvm_type: "void" } }
Operand 0 is Some(Left(IntValue(IntValue { int_value: Value { name: "_8.1", address: 0x55a6cc7192f0, is_const: false, is_null: false, is_undef: false, llvm_value: "  %_8.1 = extractvalue { i32, i1 } %0, 1", llvm_type: "i1" } })))
Operand 1 is Some(Right(BasicBlock { address: 0x55a6cc721a60, is_const: false, llvm_value: "\nbb5:                                              ; preds = %bb3, %bb1\n  %r.0 = phi i32 [ %_6.0, %bb1 ], [ %_8.0, %bb3 ]\n  br i1 %c2, label %bb6, label %bb8\n", llvm_type: "label" }))
Operand 2 is Some(Right(BasicBlock { address: 0x55a6cc721b00, is_const: false, llvm_value: "\npanic1:                                           ; preds = %bb3\n  call void @_ZN4core9panicking5panic17h4241c5ccea17facaE([0 x i8]* noundef nonnull align 1 bitcast ([28 x i8]* @str.0 to [0 x i8]*), i64 28, %\"core::panic::location::Location\"* noundef align 8 dereferenceable(24) bitcast (<{ i8*, [16 x i8] }>* @alloc37 to %\"core::panic::location::Location\"*)) #7\n  unreachable\n", llvm_type: "label" }))
IF STATEMENT
terminator is InstructionValue { instruction_value: Value { name: "", address: 0x55a6cc7197d0, is_const: false, is_null: false, is_undef: false, llvm_value: "  br i1 %_6.1, label %panic, label %bb5, !prof !3", llvm_type: "void" } }
Operand 0 is Some(Left(IntValue(IntValue { int_value: Value { name: "_6.1", address: 0x55a6cc719640, is_const: false, is_null: false, is_undef: false, llvm_value: "  %_6.1 = extractvalue { i32, i1 } %1, 1", llvm_type: "i1" } })))
Operand 1 is Some(Right(BasicBlock { address: 0x55a6cc721a60, is_const: false, llvm_value: "\nbb5:                                              ; preds = %bb3, %bb1\n  %r.0 = phi i32 [ %_6.0, %bb1 ], [ %_8.0, %bb3 ]\n  br i1 %c2, label %bb6, label %bb8\n", llvm_type: "label" }))
Operand 2 is Some(Right(BasicBlock { address: 0x55a6cc721a10, is_const: false, llvm_value: "\npanic:                                            ; preds = %bb1\n  call void @_ZN4core9panicking5panic17h4241c5ccea17facaE([0 x i8]* noundef nonnull align 1 bitcast ([28 x i8]* @str.0 to [0 x i8]*), i64 28, %\"core::panic::location::Location\"* noundef align 8 dereferenceable(24) bitcast (<{ i8*, [16 x i8] }>* @alloc35 to %\"core::panic::location::Location\"*)) #7\n  unreachable\n", llvm_type: "label" }))
IF STATEMENT
terminator is InstructionValue { instruction_value: Value { name: "", address: 0x55a6cc723310, is_const: false, is_null: false, is_undef: false, llvm_value: "  br i1 %c2, label %bb6, label %bb8", llvm_type: "void" } }
Operand 0 is Some(Left(IntValue(IntValue { int_value: Value { name: "c2", address: 0x55a6cc71dff8, is_const: false, is_null: false, is_undef: false, llvm_value: "i1 %c2", llvm_type: "i1" } })))
Operand 1 is Some(Right(BasicBlock { address: 0x55a6cc721b50, is_const: false, llvm_value: "\nbb8:                                              ; preds = %bb5\n  %2 = call { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %r.0, i32 2)\n  %_14.0 = extractvalue { i32, i1 } %2, 0\n  %_14.1 = extractvalue { i32, i1 } %2, 1\n  br i1 %_14.1, label %panic3, label %bb10, !prof !3\n", llvm_type: "label" }))
Operand 2 is Some(Right(BasicBlock { address: 0x55a6cc721ba0, is_const: false, llvm_value: "\nbb6:                                              ; preds = %bb5\n  %3 = call { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %r.0, i32 1)\n  %_12.0 = extractvalue { i32, i1 } %3, 0\n  %_12.1 = extractvalue { i32, i1 } %3, 1\n  br i1 %_12.1, label %panic2, label %bb10, !prof !3\n", llvm_type: "label" }))
IF STATEMENT
terminator is InstructionValue { instruction_value: Value { name: "", address: 0x55a6cc723820, is_const: false, is_null: false, is_undef: false, llvm_value: "  br i1 %_14.1, label %panic3, label %bb10, !prof !3", llvm_type: "void" } }
Operand 0 is Some(Left(IntValue(IntValue { int_value: Value { name: "_14.1", address: 0x55a6cc723690, is_const: false, is_null: false, is_undef: false, llvm_value: "  %_14.1 = extractvalue { i32, i1 } %2, 1", llvm_type: "i1" } })))
Operand 1 is Some(Right(BasicBlock { address: 0x55a6cc721c90, is_const: false, llvm_value: "\nbb10:                                             ; preds = %bb8, %bb6\n  %_9.0 = phi i32 [ %_12.0, %bb6 ], [ %_14.0, %bb8 ]\n  %_16 = icmp sgt i32 %_9.0, %x\n  %_15 = xor i1 %_16, true\n  br i1 %_15, label %bb11, label %bb12\n", llvm_type: "label" }))
Operand 2 is Some(Right(BasicBlock { address: 0x55a6cc721d30, is_const: false, llvm_value: "\npanic3:                                           ; preds = %bb8\n  call void @_ZN4core9panicking5panic17h4241c5ccea17facaE([0 x i8]* noundef nonnull align 1 bitcast ([33 x i8]* @str.1 to [0 x i8]*), i64 33, %\"core::panic::location::Location\"* noundef align 8 dereferenceable(24) bitcast (<{ i8*, [16 x i8] }>* @alloc41 to %\"core::panic::location::Location\"*)) #7\n  unreachable\n", llvm_type: "label" }))
IF STATEMENT
terminator is InstructionValue { instruction_value: Value { name: "", address: 0x55a6cc723be0, is_const: false, is_null: false, is_undef: false, llvm_value: "  br i1 %_12.1, label %panic2, label %bb10, !prof !3", llvm_type: "void" } }
Operand 0 is Some(Left(IntValue(IntValue { int_value: Value { name: "_12.1", address: 0x55a6cc723a50, is_const: false, is_null: false, is_undef: false, llvm_value: "  %_12.1 = extractvalue { i32, i1 } %3, 1", llvm_type: "i1" } })))
Operand 1 is Some(Right(BasicBlock { address: 0x55a6cc721c90, is_const: false, llvm_value: "\nbb10:                                             ; preds = %bb8, %bb6\n  %_9.0 = phi i32 [ %_12.0, %bb6 ], [ %_14.0, %bb8 ]\n  %_16 = icmp sgt i32 %_9.0, %x\n  %_15 = xor i1 %_16, true\n  br i1 %_15, label %bb11, label %bb12\n", llvm_type: "label" }))
Operand 2 is Some(Right(BasicBlock { address: 0x55a6cc721c40, is_const: false, llvm_value: "\npanic2:                                           ; preds = %bb6\n  call void @_ZN4core9panicking5panic17h4241c5ccea17facaE([0 x i8]* noundef nonnull align 1 bitcast ([33 x i8]* @str.1 to [0 x i8]*), i64 33, %\"core::panic::location::Location\"* noundef align 8 dereferenceable(24) bitcast (<{ i8*, [16 x i8] }>* @alloc39 to %\"core::panic::location::Location\"*)) #7\n  unreachable\n", llvm_type: "label" }))
IF STATEMENT
terminator is InstructionValue { instruction_value: Value { name: "", address: 0x55a6cc724150, is_const: false, is_null: false, is_undef: false, llvm_value: "  br i1 %_15, label %bb11, label %bb12", llvm_type: "void" } }
Operand 0 is Some(Left(IntValue(IntValue { int_value: Value { name: "_15", address: 0x55a6cc7240a0, is_const: false, is_null: false, is_undef: false, llvm_value: "  %_15 = xor i1 %_16, true", llvm_type: "i1" } })))
Operand 1 is Some(Right(BasicBlock { address: 0x55a6cc721d80, is_const: false, llvm_value: "\nbb12:                                             ; preds = %bb10\n  ret i32 %_9.0\n", llvm_type: "label" }))
Operand 2 is Some(Right(BasicBlock { address: 0x55a6cc721dd0, is_const: false, llvm_value: "\nbb11:                                             ; preds = %bb10\n  call void @_ZN4core9panicking5panic17h4241c5ccea17facaE([0 x i8]* noundef nonnull align 1 bitcast (<{ [23 x i8] }>* @alloc53 to [0 x i8]*), i64 23, %\"core::panic::location::Location\"* noundef align 8 dereferenceable(24) bitcast (<{ i8*, [16 x i8] }>* @alloc44 to %\"core::panic::location::Location\"*)) #7\n  unreachable\n", llvm_type: "label" }))
IF STATEMENT
terminator is InstructionValue { instruction_value: Value { name: "", address: 0x55a6cc719130, is_const: false, is_null: false, is_undef: false, llvm_value: "  br i1 %c1, label %bb1, label %bb3", llvm_type: "void" } }
Operand 0 is Some(Left(IntValue(IntValue { int_value: Value { name: "c1", address: 0x55a6cc71dfd0, is_const: false, is_null: false, is_undef: false, llvm_value: "i1 %c1", llvm_type: "i1" } })))
Operand 1 is Some(Right(BasicBlock { address: 0x55a6cc721920, is_const: false, llvm_value: "\nbb3:                                              ; preds = %start\n  %0 = call { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %x, i32 4)\n  %_8.0 = extractvalue { i32, i1 } %0, 0\n  %_8.1 = extractvalue { i32, i1 } %0, 1\n  br i1 %_8.1, label %panic1, label %bb5, !prof !3\n", llvm_type: "label" }))
Operand 2 is Some(Right(BasicBlock { address: 0x55a6cc721970, is_const: false, llvm_value: "\nbb1:                                              ; preds = %start\n  %1 = call { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %x, i32 3)\n  %_6.0 = extractvalue { i32, i1 } %1, 0\n  %_6.1 = extractvalue { i32, i1 } %1, 1\n  br i1 %_6.1, label %panic, label %bb5, !prof !3\n", llvm_type: "label" }))
IF STATEMENT
terminator is InstructionValue { instruction_value: Value { name: "", address: 0x55a6cc719480, is_const: false, is_null: false, is_undef: false, llvm_value: "  br i1 %_8.1, label %panic1, label %bb5, !prof !3", llvm_type: "void" } }
Operand 0 is Some(Left(IntValue(IntValue { int_value: Value { name: "_8.1", address: 0x55a6cc7192f0, is_const: false, is_null: false, is_undef: false, llvm_value: "  %_8.1 = extractvalue { i32, i1 } %0, 1", llvm_type: "i1" } })))
Operand 1 is Some(Right(BasicBlock { address: 0x55a6cc721a60, is_const: false, llvm_value: "\nbb5:                                              ; preds = %bb3, %bb1\n  %r.0 = phi i32 [ %_6.0, %bb1 ], [ %_8.0, %bb3 ]\n  br i1 %c2, label %bb6, label %bb8\n", llvm_type: "label" }))
Operand 2 is Some(Right(BasicBlock { address: 0x55a6cc721b00, is_const: false, llvm_value: "\npanic1:                                           ; preds = %bb3\n  call void @_ZN4core9panicking5panic17h4241c5ccea17facaE([0 x i8]* noundef nonnull align 1 bitcast ([28 x i8]* @str.0 to [0 x i8]*), i64 28, %\"core::panic::location::Location\"* noundef align 8 dereferenceable(24) bitcast (<{ i8*, [16 x i8] }>* @alloc37 to %\"core::panic::location::Location\"*)) #7\n  unreachable\n", llvm_type: "label" }))
IF STATEMENT
terminator is InstructionValue { instruction_value: Value { name: "", address: 0x55a6cc7197d0, is_const: false, is_null: false, is_undef: false, llvm_value: "  br i1 %_6.1, label %panic, label %bb5, !prof !3", llvm_type: "void" } }
Operand 0 is Some(Left(IntValue(IntValue { int_value: Value { name: "_6.1", address: 0x55a6cc719640, is_const: false, is_null: false, is_undef: false, llvm_value: "  %_6.1 = extractvalue { i32, i1 } %1, 1", llvm_type: "i1" } })))
Operand 1 is Some(Right(BasicBlock { address: 0x55a6cc721a60, is_const: false, llvm_value: "\nbb5:                                              ; preds = %bb3, %bb1\n  %r.0 = phi i32 [ %_6.0, %bb1 ], [ %_8.0, %bb3 ]\n  br i1 %c2, label %bb6, label %bb8\n", llvm_type: "label" }))
Operand 2 is Some(Right(BasicBlock { address: 0x55a6cc721a10, is_const: false, llvm_value: "\npanic:                                            ; preds = %bb1\n  call void @_ZN4core9panicking5panic17h4241c5ccea17facaE([0 x i8]* noundef nonnull align 1 bitcast ([28 x i8]* @str.0 to [0 x i8]*), i64 28, %\"core::panic::location::Location\"* noundef align 8 dereferenceable(24) bitcast (<{ i8*, [16 x i8] }>* @alloc35 to %\"core::panic::location::Location\"*)) #7\n  unreachable\n", llvm_type: "label" }))
IF STATEMENT
terminator is InstructionValue { instruction_value: Value { name: "", address: 0x55a6cc723310, is_const: false, is_null: false, is_undef: false, llvm_value: "  br i1 %c2, label %bb6, label %bb8", llvm_type: "void" } }
Operand 0 is Some(Left(IntValue(IntValue { int_value: Value { name: "c2", address: 0x55a6cc71dff8, is_const: false, is_null: false, is_undef: false, llvm_value: "i1 %c2", llvm_type: "i1" } })))
Operand 1 is Some(Right(BasicBlock { address: 0x55a6cc721b50, is_const: false, llvm_value: "\nbb8:                                              ; preds = %bb5\n  %2 = call { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %r.0, i32 2)\n  %_14.0 = extractvalue { i32, i1 } %2, 0\n  %_14.1 = extractvalue { i32, i1 } %2, 1\n  br i1 %_14.1, label %panic3, label %bb10, !prof !3\n", llvm_type: "label" }))
Operand 2 is Some(Right(BasicBlock { address: 0x55a6cc721ba0, is_const: false, llvm_value: "\nbb6:                                              ; preds = %bb5\n  %3 = call { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %r.0, i32 1)\n  %_12.0 = extractvalue { i32, i1 } %3, 0\n  %_12.1 = extractvalue { i32, i1 } %3, 1\n  br i1 %_12.1, label %panic2, label %bb10, !prof !3\n", llvm_type: "label" }))
IF STATEMENT
terminator is InstructionValue { instruction_value: Value { name: "", address: 0x55a6cc723820, is_const: false, is_null: false, is_undef: false, llvm_value: "  br i1 %_14.1, label %panic3, label %bb10, !prof !3", llvm_type: "void" } }
Operand 0 is Some(Left(IntValue(IntValue { int_value: Value { name: "_14.1", address: 0x55a6cc723690, is_const: false, is_null: false, is_undef: false, llvm_value: "  %_14.1 = extractvalue { i32, i1 } %2, 1", llvm_type: "i1" } })))
Operand 1 is Some(Right(BasicBlock { address: 0x55a6cc721c90, is_const: false, llvm_value: "\nbb10:                                             ; preds = %bb8, %bb6\n  %_9.0 = phi i32 [ %_12.0, %bb6 ], [ %_14.0, %bb8 ]\n  %_16 = icmp sgt i32 %_9.0, %x\n  %_15 = xor i1 %_16, true\n  br i1 %_15, label %bb11, label %bb12\n", llvm_type: "label" }))
Operand 2 is Some(Right(BasicBlock { address: 0x55a6cc721d30, is_const: false, llvm_value: "\npanic3:                                           ; preds = %bb8\n  call void @_ZN4core9panicking5panic17h4241c5ccea17facaE([0 x i8]* noundef nonnull align 1 bitcast ([33 x i8]* @str.1 to [0 x i8]*), i64 33, %\"core::panic::location::Location\"* noundef align 8 dereferenceable(24) bitcast (<{ i8*, [16 x i8] }>* @alloc41 to %\"core::panic::location::Location\"*)) #7\n  unreachable\n", llvm_type: "label" }))
IF STATEMENT
terminator is InstructionValue { instruction_value: Value { name: "", address: 0x55a6cc723be0, is_const: false, is_null: false, is_undef: false, llvm_value: "  br i1 %_12.1, label %panic2, label %bb10, !prof !3", llvm_type: "void" } }
Operand 0 is Some(Left(IntValue(IntValue { int_value: Value { name: "_12.1", address: 0x55a6cc723a50, is_const: false, is_null: false, is_undef: false, llvm_value: "  %_12.1 = extractvalue { i32, i1 } %3, 1", llvm_type: "i1" } })))
Operand 1 is Some(Right(BasicBlock { address: 0x55a6cc721c90, is_const: false, llvm_value: "\nbb10:                                             ; preds = %bb8, %bb6\n  %_9.0 = phi i32 [ %_12.0, %bb6 ], [ %_14.0, %bb8 ]\n  %_16 = icmp sgt i32 %_9.0, %x\n  %_15 = xor i1 %_16, true\n  br i1 %_15, label %bb11, label %bb12\n", llvm_type: "label" }))
Operand 2 is Some(Right(BasicBlock { address: 0x55a6cc721c40, is_const: false, llvm_value: "\npanic2:                                           ; preds = %bb6\n  call void @_ZN4core9panicking5panic17h4241c5ccea17facaE([0 x i8]* noundef nonnull align 1 bitcast ([33 x i8]* @str.1 to [0 x i8]*), i64 33, %\"core::panic::location::Location\"* noundef align 8 dereferenceable(24) bitcast (<{ i8*, [16 x i8] }>* @alloc39 to %\"core::panic::location::Location\"*)) #7\n  unreachable\n", llvm_type: "label" }))
IF STATEMENT
terminator is InstructionValue { instruction_value: Value { name: "", address: 0x55a6cc724150, is_const: false, is_null: false, is_undef: false, llvm_value: "  br i1 %_15, label %bb11, label %bb12", llvm_type: "void" } }
Operand 0 is Some(Left(IntValue(IntValue { int_value: Value { name: "_15", address: 0x55a6cc7240a0, is_const: false, is_null: false, is_undef: false, llvm_value: "  %_15 = xor i1 %_16, true", llvm_type: "i1" } })))
Operand 1 is Some(Right(BasicBlock { address: 0x55a6cc721d80, is_const: false, llvm_value: "\nbb12:                                             ; preds = %bb10\n  ret i32 %_9.0\n", llvm_type: "label" }))
Operand 2 is Some(Right(BasicBlock { address: 0x55a6cc721dd0, is_const: false, llvm_value: "\nbb11:                                             ; preds = %bb10\n  call void @_ZN4core9panicking5panic17h4241c5ccea17facaE([0 x i8]* noundef nonnull align 1 bitcast (<{ [23 x i8] }>* @alloc53 to [0 x i8]*), i64 23, %\"core::panic::location::Location\"* noundef align 8 dereferenceable(24) bitcast (<{ i8*, [16 x i8] }>* @alloc44 to %\"core::panic::location::Location\"*)) #7\n  unreachable\n", llvm_type: "label" }))
[2mJan 15 20:18:36.873[0m [34mDEBUG[0m wombat_symx: Forward sorted nodes:	["start", "bb3", "bb1", "panic", "bb5", "panic1", "bb8", "bb6", "panic2", "bb10", "panic3", "bb12", "bb11", "common_end"]
IF STATEMENT
terminator is InstructionValue { instruction_value: Value { name: "", address: 0x55a6cc719130, is_const: false, is_null: false, is_undef: false, llvm_value: "  br i1 %c1, label %bb1, label %bb3", llvm_type: "void" } }
Operand 0 is Some(Left(IntValue(IntValue { int_value: Value { name: "c1", address: 0x55a6cc71dfd0, is_const: false, is_null: false, is_undef: false, llvm_value: "i1 %c1", llvm_type: "i1" } })))
Operand 1 is Some(Right(BasicBlock { address: 0x55a6cc721920, is_const: false, llvm_value: "\nbb3:                                              ; preds = %start\n  %0 = call { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %x, i32 4)\n  %_8.0 = extractvalue { i32, i1 } %0, 0\n  %_8.1 = extractvalue { i32, i1 } %0, 1\n  br i1 %_8.1, label %panic1, label %bb5, !prof !3\n", llvm_type: "label" }))
Operand 2 is Some(Right(BasicBlock { address: 0x55a6cc721970, is_const: false, llvm_value: "\nbb1:                                              ; preds = %start\n  %1 = call { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %x, i32 3)\n  %_6.0 = extractvalue { i32, i1 } %1, 0\n  %_6.1 = extractvalue { i32, i1 } %1, 1\n  br i1 %_6.1, label %panic, label %bb5, !prof !3\n", llvm_type: "label" }))
IF STATEMENT
terminator is InstructionValue { instruction_value: Value { name: "", address: 0x55a6cc719480, is_const: false, is_null: false, is_undef: false, llvm_value: "  br i1 %_8.1, label %panic1, label %bb5, !prof !3", llvm_type: "void" } }
Operand 0 is Some(Left(IntValue(IntValue { int_value: Value { name: "_8.1", address: 0x55a6cc7192f0, is_const: false, is_null: false, is_undef: false, llvm_value: "  %_8.1 = extractvalue { i32, i1 } %0, 1", llvm_type: "i1" } })))
Operand 1 is Some(Right(BasicBlock { address: 0x55a6cc721a60, is_const: false, llvm_value: "\nbb5:                                              ; preds = %bb3, %bb1\n  %r.0 = phi i32 [ %_6.0, %bb1 ], [ %_8.0, %bb3 ]\n  br i1 %c2, label %bb6, label %bb8\n", llvm_type: "label" }))
Operand 2 is Some(Right(BasicBlock { address: 0x55a6cc721b00, is_const: false, llvm_value: "\npanic1:                                           ; preds = %bb3\n  call void @_ZN4core9panicking5panic17h4241c5ccea17facaE([0 x i8]* noundef nonnull align 1 bitcast ([28 x i8]* @str.0 to [0 x i8]*), i64 28, %\"core::panic::location::Location\"* noundef align 8 dereferenceable(24) bitcast (<{ i8*, [16 x i8] }>* @alloc37 to %\"core::panic::location::Location\"*)) #7\n  unreachable\n", llvm_type: "label" }))
IF STATEMENT
terminator is InstructionValue { instruction_value: Value { name: "", address: 0x55a6cc7197d0, is_const: false, is_null: false, is_undef: false, llvm_value: "  br i1 %_6.1, label %panic, label %bb5, !prof !3", llvm_type: "void" } }
Operand 0 is Some(Left(IntValue(IntValue { int_value: Value { name: "_6.1", address: 0x55a6cc719640, is_const: false, is_null: false, is_undef: false, llvm_value: "  %_6.1 = extractvalue { i32, i1 } %1, 1", llvm_type: "i1" } })))
Operand 1 is Some(Right(BasicBlock { address: 0x55a6cc721a60, is_const: false, llvm_value: "\nbb5:                                              ; preds = %bb3, %bb1\n  %r.0 = phi i32 [ %_6.0, %bb1 ], [ %_8.0, %bb3 ]\n  br i1 %c2, label %bb6, label %bb8\n", llvm_type: "label" }))
Operand 2 is Some(Right(BasicBlock { address: 0x55a6cc721a10, is_const: false, llvm_value: "\npanic:                                            ; preds = %bb1\n  call void @_ZN4core9panicking5panic17h4241c5ccea17facaE([0 x i8]* noundef nonnull align 1 bitcast ([28 x i8]* @str.0 to [0 x i8]*), i64 28, %\"core::panic::location::Location\"* noundef align 8 dereferenceable(24) bitcast (<{ i8*, [16 x i8] }>* @alloc35 to %\"core::panic::location::Location\"*)) #7\n  unreachable\n", llvm_type: "label" }))
IF STATEMENT
terminator is InstructionValue { instruction_value: Value { name: "", address: 0x55a6cc723310, is_const: false, is_null: false, is_undef: false, llvm_value: "  br i1 %c2, label %bb6, label %bb8", llvm_type: "void" } }
Operand 0 is Some(Left(IntValue(IntValue { int_value: Value { name: "c2", address: 0x55a6cc71dff8, is_const: false, is_null: false, is_undef: false, llvm_value: "i1 %c2", llvm_type: "i1" } })))
Operand 1 is Some(Right(BasicBlock { address: 0x55a6cc721b50, is_const: false, llvm_value: "\nbb8:                                              ; preds = %bb5\n  %2 = call { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %r.0, i32 2)\n  %_14.0 = extractvalue { i32, i1 } %2, 0\n  %_14.1 = extractvalue { i32, i1 } %2, 1\n  br i1 %_14.1, label %panic3, label %bb10, !prof !3\n", llvm_type: "label" }))
Operand 2 is Some(Right(BasicBlock { address: 0x55a6cc721ba0, is_const: false, llvm_value: "\nbb6:                                              ; preds = %bb5\n  %3 = call { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %r.0, i32 1)\n  %_12.0 = extractvalue { i32, i1 } %3, 0\n  %_12.1 = extractvalue { i32, i1 } %3, 1\n  br i1 %_12.1, label %panic2, label %bb10, !prof !3\n", llvm_type: "label" }))
IF STATEMENT
terminator is InstructionValue { instruction_value: Value { name: "", address: 0x55a6cc723820, is_const: false, is_null: false, is_undef: false, llvm_value: "  br i1 %_14.1, label %panic3, label %bb10, !prof !3", llvm_type: "void" } }
Operand 0 is Some(Left(IntValue(IntValue { int_value: Value { name: "_14.1", address: 0x55a6cc723690, is_const: false, is_null: false, is_undef: false, llvm_value: "  %_14.1 = extractvalue { i32, i1 } %2, 1", llvm_type: "i1" } })))
Operand 1 is Some(Right(BasicBlock { address: 0x55a6cc721c90, is_const: false, llvm_value: "\nbb10:                                             ; preds = %bb8, %bb6\n  %_9.0 = phi i32 [ %_12.0, %bb6 ], [ %_14.0, %bb8 ]\n  %_16 = icmp sgt i32 %_9.0, %x\n  %_15 = xor i1 %_16, true\n  br i1 %_15, label %bb11, label %bb12\n", llvm_type: "label" }))
Operand 2 is Some(Right(BasicBlock { address: 0x55a6cc721d30, is_const: false, llvm_value: "\npanic3:                                           ; preds = %bb8\n  call void @_ZN4core9panicking5panic17h4241c5ccea17facaE([0 x i8]* noundef nonnull align 1 bitcast ([33 x i8]* @str.1 to [0 x i8]*), i64 33, %\"core::panic::location::Location\"* noundef align 8 dereferenceable(24) bitcast (<{ i8*, [16 x i8] }>* @alloc41 to %\"core::panic::location::Location\"*)) #7\n  unreachable\n", llvm_type: "label" }))
IF STATEMENT
terminator is InstructionValue { instruction_value: Value { name: "", address: 0x55a6cc723be0, is_const: false, is_null: false, is_undef: false, llvm_value: "  br i1 %_12.1, label %panic2, label %bb10, !prof !3", llvm_type: "void" } }
Operand 0 is Some(Left(IntValue(IntValue { int_value: Value { name: "_12.1", address: 0x55a6cc723a50, is_const: false, is_null: false, is_undef: false, llvm_value: "  %_12.1 = extractvalue { i32, i1 } %3, 1", llvm_type: "i1" } })))
Operand 1 is Some(Right(BasicBlock { address: 0x55a6cc721c90, is_const: false, llvm_value: "\nbb10:                                             ; preds = %bb8, %bb6\n  %_9.0 = phi i32 [ %_12.0, %bb6 ], [ %_14.0, %bb8 ]\n  %_16 = icmp sgt i32 %_9.0, %x\n  %_15 = xor i1 %_16, true\n  br i1 %_15, label %bb11, label %bb12\n", llvm_type: "label" }))
Operand 2 is Some(Right(BasicBlock { address: 0x55a6cc721c40, is_const: false, llvm_value: "\npanic2:                                           ; preds = %bb6\n  call void @_ZN4core9panicking5panic17h4241c5ccea17facaE([0 x i8]* noundef nonnull align 1 bitcast ([33 x i8]* @str.1 to [0 x i8]*), i64 33, %\"core::panic::location::Location\"* noundef align 8 dereferenceable(24) bitcast (<{ i8*, [16 x i8] }>* @alloc39 to %\"core::panic::location::Location\"*)) #7\n  unreachable\n", llvm_type: "label" }))
IF STATEMENT
terminator is InstructionValue { instruction_value: Value { name: "", address: 0x55a6cc724150, is_const: false, is_null: false, is_undef: false, llvm_value: "  br i1 %_15, label %bb11, label %bb12", llvm_type: "void" } }
Operand 0 is Some(Left(IntValue(IntValue { int_value: Value { name: "_15", address: 0x55a6cc7240a0, is_const: false, is_null: false, is_undef: false, llvm_value: "  %_15 = xor i1 %_16, true", llvm_type: "i1" } })))
Operand 1 is Some(Right(BasicBlock { address: 0x55a6cc721d80, is_const: false, llvm_value: "\nbb12:                                             ; preds = %bb10\n  ret i32 %_9.0\n", llvm_type: "label" }))
Operand 2 is Some(Right(BasicBlock { address: 0x55a6cc721dd0, is_const: false, llvm_value: "\nbb11:                                             ; preds = %bb10\n  call void @_ZN4core9panicking5panic17h4241c5ccea17facaE([0 x i8]* noundef nonnull align 1 bitcast (<{ [23 x i8] }>* @alloc53 to [0 x i8]*), i64 23, %\"core::panic::location::Location\"* noundef align 8 dereferenceable(24) bitcast (<{ i8*, [16 x i8] }>* @alloc44 to %\"core::panic::location::Location\"*)) #7\n  unreachable\n", llvm_type: "label" }))
IF STATEMENT
terminator is InstructionValue { instruction_value: Value { name: "", address: 0x55a6cc719130, is_const: false, is_null: false, is_undef: false, llvm_value: "  br i1 %c1, label %bb1, label %bb3", llvm_type: "void" } }
Operand 0 is Some(Left(IntValue(IntValue { int_value: Value { name: "c1", address: 0x55a6cc71dfd0, is_const: false, is_null: false, is_undef: false, llvm_value: "i1 %c1", llvm_type: "i1" } })))
Operand 1 is Some(Right(BasicBlock { address: 0x55a6cc721920, is_const: false, llvm_value: "\nbb3:                                              ; preds = %start\n  %0 = call { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %x, i32 4)\n  %_8.0 = extractvalue { i32, i1 } %0, 0\n  %_8.1 = extractvalue { i32, i1 } %0, 1\n  br i1 %_8.1, label %panic1, label %bb5, !prof !3\n", llvm_type: "label" }))
Operand 2 is Some(Right(BasicBlock { address: 0x55a6cc721970, is_const: false, llvm_value: "\nbb1:                                              ; preds = %start\n  %1 = call { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %x, i32 3)\n  %_6.0 = extractvalue { i32, i1 } %1, 0\n  %_6.1 = extractvalue { i32, i1 } %1, 1\n  br i1 %_6.1, label %panic, label %bb5, !prof !3\n", llvm_type: "label" }))
IF STATEMENT
terminator is InstructionValue { instruction_value: Value { name: "", address: 0x55a6cc719480, is_const: false, is_null: false, is_undef: false, llvm_value: "  br i1 %_8.1, label %panic1, label %bb5, !prof !3", llvm_type: "void" } }
Operand 0 is Some(Left(IntValue(IntValue { int_value: Value { name: "_8.1", address: 0x55a6cc7192f0, is_const: false, is_null: false, is_undef: false, llvm_value: "  %_8.1 = extractvalue { i32, i1 } %0, 1", llvm_type: "i1" } })))
Operand 1 is Some(Right(BasicBlock { address: 0x55a6cc721a60, is_const: false, llvm_value: "\nbb5:                                              ; preds = %bb3, %bb1\n  %r.0 = phi i32 [ %_6.0, %bb1 ], [ %_8.0, %bb3 ]\n  br i1 %c2, label %bb6, label %bb8\n", llvm_type: "label" }))
Operand 2 is Some(Right(BasicBlock { address: 0x55a6cc721b00, is_const: false, llvm_value: "\npanic1:                                           ; preds = %bb3\n  call void @_ZN4core9panicking5panic17h4241c5ccea17facaE([0 x i8]* noundef nonnull align 1 bitcast ([28 x i8]* @str.0 to [0 x i8]*), i64 28, %\"core::panic::location::Location\"* noundef align 8 dereferenceable(24) bitcast (<{ i8*, [16 x i8] }>* @alloc37 to %\"core::panic::location::Location\"*)) #7\n  unreachable\n", llvm_type: "label" }))
IF STATEMENT
terminator is InstructionValue { instruction_value: Value { name: "", address: 0x55a6cc7197d0, is_const: false, is_null: false, is_undef: false, llvm_value: "  br i1 %_6.1, label %panic, label %bb5, !prof !3", llvm_type: "void" } }
Operand 0 is Some(Left(IntValue(IntValue { int_value: Value { name: "_6.1", address: 0x55a6cc719640, is_const: false, is_null: false, is_undef: false, llvm_value: "  %_6.1 = extractvalue { i32, i1 } %1, 1", llvm_type: "i1" } })))
Operand 1 is Some(Right(BasicBlock { address: 0x55a6cc721a60, is_const: false, llvm_value: "\nbb5:                                              ; preds = %bb3, %bb1\n  %r.0 = phi i32 [ %_6.0, %bb1 ], [ %_8.0, %bb3 ]\n  br i1 %c2, label %bb6, label %bb8\n", llvm_type: "label" }))
Operand 2 is Some(Right(BasicBlock { address: 0x55a6cc721a10, is_const: false, llvm_value: "\npanic:                                            ; preds = %bb1\n  call void @_ZN4core9panicking5panic17h4241c5ccea17facaE([0 x i8]* noundef nonnull align 1 bitcast ([28 x i8]* @str.0 to [0 x i8]*), i64 28, %\"core::panic::location::Location\"* noundef align 8 dereferenceable(24) bitcast (<{ i8*, [16 x i8] }>* @alloc35 to %\"core::panic::location::Location\"*)) #7\n  unreachable\n", llvm_type: "label" }))
IF STATEMENT
terminator is InstructionValue { instruction_value: Value { name: "", address: 0x55a6cc723310, is_const: false, is_null: false, is_undef: false, llvm_value: "  br i1 %c2, label %bb6, label %bb8", llvm_type: "void" } }
Operand 0 is Some(Left(IntValue(IntValue { int_value: Value { name: "c2", address: 0x55a6cc71dff8, is_const: false, is_null: false, is_undef: false, llvm_value: "i1 %c2", llvm_type: "i1" } })))
Operand 1 is Some(Right(BasicBlock { address: 0x55a6cc721b50, is_const: false, llvm_value: "\nbb8:                                              ; preds = %bb5\n  %2 = call { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %r.0, i32 2)\n  %_14.0 = extractvalue { i32, i1 } %2, 0\n  %_14.1 = extractvalue { i32, i1 } %2, 1\n  br i1 %_14.1, label %panic3, label %bb10, !prof !3\n", llvm_type: "label" }))
Operand 2 is Some(Right(BasicBlock { address: 0x55a6cc721ba0, is_const: false, llvm_value: "\nbb6:                                              ; preds = %bb5\n  %3 = call { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %r.0, i32 1)\n  %_12.0 = extractvalue { i32, i1 } %3, 0\n  %_12.1 = extractvalue { i32, i1 } %3, 1\n  br i1 %_12.1, label %panic2, label %bb10, !prof !3\n", llvm_type: "label" }))
IF STATEMENT
terminator is InstructionValue { instruction_value: Value { name: "", address: 0x55a6cc723820, is_const: false, is_null: false, is_undef: false, llvm_value: "  br i1 %_14.1, label %panic3, label %bb10, !prof !3", llvm_type: "void" } }
Operand 0 is Some(Left(IntValue(IntValue { int_value: Value { name: "_14.1", address: 0x55a6cc723690, is_const: false, is_null: false, is_undef: false, llvm_value: "  %_14.1 = extractvalue { i32, i1 } %2, 1", llvm_type: "i1" } })))
Operand 1 is Some(Right(BasicBlock { address: 0x55a6cc721c90, is_const: false, llvm_value: "\nbb10:                                             ; preds = %bb8, %bb6\n  %_9.0 = phi i32 [ %_12.0, %bb6 ], [ %_14.0, %bb8 ]\n  %_16 = icmp sgt i32 %_9.0, %x\n  %_15 = xor i1 %_16, true\n  br i1 %_15, label %bb11, label %bb12\n", llvm_type: "label" }))
Operand 2 is Some(Right(BasicBlock { address: 0x55a6cc721d30, is_const: false, llvm_value: "\npanic3:                                           ; preds = %bb8\n  call void @_ZN4core9panicking5panic17h4241c5ccea17facaE([0 x i8]* noundef nonnull align 1 bitcast ([33 x i8]* @str.1 to [0 x i8]*), i64 33, %\"core::panic::location::Location\"* noundef align 8 dereferenceable(24) bitcast (<{ i8*, [16 x i8] }>* @alloc41 to %\"core::panic::location::Location\"*)) #7\n  unreachable\n", llvm_type: "label" }))
IF STATEMENT
terminator is InstructionValue { instruction_value: Value { name: "", address: 0x55a6cc723be0, is_const: false, is_null: false, is_undef: false, llvm_value: "  br i1 %_12.1, label %panic2, label %bb10, !prof !3", llvm_type: "void" } }
Operand 0 is Some(Left(IntValue(IntValue { int_value: Value { name: "_12.1", address: 0x55a6cc723a50, is_const: false, is_null: false, is_undef: false, llvm_value: "  %_12.1 = extractvalue { i32, i1 } %3, 1", llvm_type: "i1" } })))
Operand 1 is Some(Right(BasicBlock { address: 0x55a6cc721c90, is_const: false, llvm_value: "\nbb10:                                             ; preds = %bb8, %bb6\n  %_9.0 = phi i32 [ %_12.0, %bb6 ], [ %_14.0, %bb8 ]\n  %_16 = icmp sgt i32 %_9.0, %x\n  %_15 = xor i1 %_16, true\n  br i1 %_15, label %bb11, label %bb12\n", llvm_type: "label" }))
Operand 2 is Some(Right(BasicBlock { address: 0x55a6cc721c40, is_const: false, llvm_value: "\npanic2:                                           ; preds = %bb6\n  call void @_ZN4core9panicking5panic17h4241c5ccea17facaE([0 x i8]* noundef nonnull align 1 bitcast ([33 x i8]* @str.1 to [0 x i8]*), i64 33, %\"core::panic::location::Location\"* noundef align 8 dereferenceable(24) bitcast (<{ i8*, [16 x i8] }>* @alloc39 to %\"core::panic::location::Location\"*)) #7\n  unreachable\n", llvm_type: "label" }))
IF STATEMENT
terminator is InstructionValue { instruction_value: Value { name: "", address: 0x55a6cc724150, is_const: false, is_null: false, is_undef: false, llvm_value: "  br i1 %_15, label %bb11, label %bb12", llvm_type: "void" } }
Operand 0 is Some(Left(IntValue(IntValue { int_value: Value { name: "_15", address: 0x55a6cc7240a0, is_const: false, is_null: false, is_undef: false, llvm_value: "  %_15 = xor i1 %_16, true", llvm_type: "i1" } })))
Operand 1 is Some(Right(BasicBlock { address: 0x55a6cc721d80, is_const: false, llvm_value: "\nbb12:                                             ; preds = %bb10\n  ret i32 %_9.0\n", llvm_type: "label" }))
Operand 2 is Some(Right(BasicBlock { address: 0x55a6cc721dd0, is_const: false, llvm_value: "\nbb11:                                             ; preds = %bb10\n  call void @_ZN4core9panicking5panic17h4241c5ccea17facaE([0 x i8]* noundef nonnull align 1 bitcast (<{ [23 x i8] }>* @alloc53 to [0 x i8]*), i64 23, %\"core::panic::location::Location\"* noundef align 8 dereferenceable(24) bitcast (<{ i8*, [16 x i8] }>* @alloc44 to %\"core::panic::location::Location\"*)) #7\n  unreachable\n", llvm_type: "label" }))
[2mJan 15 20:18:36.875[0m [34mDEBUG[0m wombat_symx: Backward sorted nodes:	["common_end", "bb11", "bb12", "panic3", "bb10", "panic2", "bb6", "bb8", "panic1", "bb5", "panic", "bb1", "bb3", "start"]
IF STATEMENT
terminator is InstructionValue { instruction_value: Value { name: "", address: 0x55a6cc719130, is_const: false, is_null: false, is_undef: false, llvm_value: "  br i1 %c1, label %bb1, label %bb3", llvm_type: "void" } }
Operand 0 is Some(Left(IntValue(IntValue { int_value: Value { name: "c1", address: 0x55a6cc71dfd0, is_const: false, is_null: false, is_undef: false, llvm_value: "i1 %c1", llvm_type: "i1" } })))
Operand 1 is Some(Right(BasicBlock { address: 0x55a6cc721920, is_const: false, llvm_value: "\nbb3:                                              ; preds = %start\n  %0 = call { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %x, i32 4)\n  %_8.0 = extractvalue { i32, i1 } %0, 0\n  %_8.1 = extractvalue { i32, i1 } %0, 1\n  br i1 %_8.1, label %panic1, label %bb5, !prof !3\n", llvm_type: "label" }))
Operand 2 is Some(Right(BasicBlock { address: 0x55a6cc721970, is_const: false, llvm_value: "\nbb1:                                              ; preds = %start\n  %1 = call { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %x, i32 3)\n  %_6.0 = extractvalue { i32, i1 } %1, 0\n  %_6.1 = extractvalue { i32, i1 } %1, 1\n  br i1 %_6.1, label %panic, label %bb5, !prof !3\n", llvm_type: "label" }))
IF STATEMENT
terminator is InstructionValue { instruction_value: Value { name: "", address: 0x55a6cc719480, is_const: false, is_null: false, is_undef: false, llvm_value: "  br i1 %_8.1, label %panic1, label %bb5, !prof !3", llvm_type: "void" } }
Operand 0 is Some(Left(IntValue(IntValue { int_value: Value { name: "_8.1", address: 0x55a6cc7192f0, is_const: false, is_null: false, is_undef: false, llvm_value: "  %_8.1 = extractvalue { i32, i1 } %0, 1", llvm_type: "i1" } })))
Operand 1 is Some(Right(BasicBlock { address: 0x55a6cc721a60, is_const: false, llvm_value: "\nbb5:                                              ; preds = %bb3, %bb1\n  %r.0 = phi i32 [ %_6.0, %bb1 ], [ %_8.0, %bb3 ]\n  br i1 %c2, label %bb6, label %bb8\n", llvm_type: "label" }))
Operand 2 is Some(Right(BasicBlock { address: 0x55a6cc721b00, is_const: false, llvm_value: "\npanic1:                                           ; preds = %bb3\n  call void @_ZN4core9panicking5panic17h4241c5ccea17facaE([0 x i8]* noundef nonnull align 1 bitcast ([28 x i8]* @str.0 to [0 x i8]*), i64 28, %\"core::panic::location::Location\"* noundef align 8 dereferenceable(24) bitcast (<{ i8*, [16 x i8] }>* @alloc37 to %\"core::panic::location::Location\"*)) #7\n  unreachable\n", llvm_type: "label" }))
IF STATEMENT
terminator is InstructionValue { instruction_value: Value { name: "", address: 0x55a6cc7197d0, is_const: false, is_null: false, is_undef: false, llvm_value: "  br i1 %_6.1, label %panic, label %bb5, !prof !3", llvm_type: "void" } }
Operand 0 is Some(Left(IntValue(IntValue { int_value: Value { name: "_6.1", address: 0x55a6cc719640, is_const: false, is_null: false, is_undef: false, llvm_value: "  %_6.1 = extractvalue { i32, i1 } %1, 1", llvm_type: "i1" } })))
Operand 1 is Some(Right(BasicBlock { address: 0x55a6cc721a60, is_const: false, llvm_value: "\nbb5:                                              ; preds = %bb3, %bb1\n  %r.0 = phi i32 [ %_6.0, %bb1 ], [ %_8.0, %bb3 ]\n  br i1 %c2, label %bb6, label %bb8\n", llvm_type: "label" }))
Operand 2 is Some(Right(BasicBlock { address: 0x55a6cc721a10, is_const: false, llvm_value: "\npanic:                                            ; preds = %bb1\n  call void @_ZN4core9panicking5panic17h4241c5ccea17facaE([0 x i8]* noundef nonnull align 1 bitcast ([28 x i8]* @str.0 to [0 x i8]*), i64 28, %\"core::panic::location::Location\"* noundef align 8 dereferenceable(24) bitcast (<{ i8*, [16 x i8] }>* @alloc35 to %\"core::panic::location::Location\"*)) #7\n  unreachable\n", llvm_type: "label" }))
IF STATEMENT
terminator is InstructionValue { instruction_value: Value { name: "", address: 0x55a6cc723310, is_const: false, is_null: false, is_undef: false, llvm_value: "  br i1 %c2, label %bb6, label %bb8", llvm_type: "void" } }
Operand 0 is Some(Left(IntValue(IntValue { int_value: Value { name: "c2", address: 0x55a6cc71dff8, is_const: false, is_null: false, is_undef: false, llvm_value: "i1 %c2", llvm_type: "i1" } })))
Operand 1 is Some(Right(BasicBlock { address: 0x55a6cc721b50, is_const: false, llvm_value: "\nbb8:                                              ; preds = %bb5\n  %2 = call { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %r.0, i32 2)\n  %_14.0 = extractvalue { i32, i1 } %2, 0\n  %_14.1 = extractvalue { i32, i1 } %2, 1\n  br i1 %_14.1, label %panic3, label %bb10, !prof !3\n", llvm_type: "label" }))
Operand 2 is Some(Right(BasicBlock { address: 0x55a6cc721ba0, is_const: false, llvm_value: "\nbb6:                                              ; preds = %bb5\n  %3 = call { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %r.0, i32 1)\n  %_12.0 = extractvalue { i32, i1 } %3, 0\n  %_12.1 = extractvalue { i32, i1 } %3, 1\n  br i1 %_12.1, label %panic2, label %bb10, !prof !3\n", llvm_type: "label" }))
IF STATEMENT
terminator is InstructionValue { instruction_value: Value { name: "", address: 0x55a6cc723820, is_const: false, is_null: false, is_undef: false, llvm_value: "  br i1 %_14.1, label %panic3, label %bb10, !prof !3", llvm_type: "void" } }
Operand 0 is Some(Left(IntValue(IntValue { int_value: Value { name: "_14.1", address: 0x55a6cc723690, is_const: false, is_null: false, is_undef: false, llvm_value: "  %_14.1 = extractvalue { i32, i1 } %2, 1", llvm_type: "i1" } })))
Operand 1 is Some(Right(BasicBlock { address: 0x55a6cc721c90, is_const: false, llvm_value: "\nbb10:                                             ; preds = %bb8, %bb6\n  %_9.0 = phi i32 [ %_12.0, %bb6 ], [ %_14.0, %bb8 ]\n  %_16 = icmp sgt i32 %_9.0, %x\n  %_15 = xor i1 %_16, true\n  br i1 %_15, label %bb11, label %bb12\n", llvm_type: "label" }))
Operand 2 is Some(Right(BasicBlock { address: 0x55a6cc721d30, is_const: false, llvm_value: "\npanic3:                                           ; preds = %bb8\n  call void @_ZN4core9panicking5panic17h4241c5ccea17facaE([0 x i8]* noundef nonnull align 1 bitcast ([33 x i8]* @str.1 to [0 x i8]*), i64 33, %\"core::panic::location::Location\"* noundef align 8 dereferenceable(24) bitcast (<{ i8*, [16 x i8] }>* @alloc41 to %\"core::panic::location::Location\"*)) #7\n  unreachable\n", llvm_type: "label" }))
IF STATEMENT
terminator is InstructionValue { instruction_value: Value { name: "", address: 0x55a6cc723be0, is_const: false, is_null: false, is_undef: false, llvm_value: "  br i1 %_12.1, label %panic2, label %bb10, !prof !3", llvm_type: "void" } }
Operand 0 is Some(Left(IntValue(IntValue { int_value: Value { name: "_12.1", address: 0x55a6cc723a50, is_const: false, is_null: false, is_undef: false, llvm_value: "  %_12.1 = extractvalue { i32, i1 } %3, 1", llvm_type: "i1" } })))
Operand 1 is Some(Right(BasicBlock { address: 0x55a6cc721c90, is_const: false, llvm_value: "\nbb10:                                             ; preds = %bb8, %bb6\n  %_9.0 = phi i32 [ %_12.0, %bb6 ], [ %_14.0, %bb8 ]\n  %_16 = icmp sgt i32 %_9.0, %x\n  %_15 = xor i1 %_16, true\n  br i1 %_15, label %bb11, label %bb12\n", llvm_type: "label" }))
Operand 2 is Some(Right(BasicBlock { address: 0x55a6cc721c40, is_const: false, llvm_value: "\npanic2:                                           ; preds = %bb6\n  call void @_ZN4core9panicking5panic17h4241c5ccea17facaE([0 x i8]* noundef nonnull align 1 bitcast ([33 x i8]* @str.1 to [0 x i8]*), i64 33, %\"core::panic::location::Location\"* noundef align 8 dereferenceable(24) bitcast (<{ i8*, [16 x i8] }>* @alloc39 to %\"core::panic::location::Location\"*)) #7\n  unreachable\n", llvm_type: "label" }))
IF STATEMENT
terminator is InstructionValue { instruction_value: Value { name: "", address: 0x55a6cc724150, is_const: false, is_null: false, is_undef: false, llvm_value: "  br i1 %_15, label %bb11, label %bb12", llvm_type: "void" } }
Operand 0 is Some(Left(IntValue(IntValue { int_value: Value { name: "_15", address: 0x55a6cc7240a0, is_const: false, is_null: false, is_undef: false, llvm_value: "  %_15 = xor i1 %_16, true", llvm_type: "i1" } })))
Operand 1 is Some(Right(BasicBlock { address: 0x55a6cc721d80, is_const: false, llvm_value: "\nbb12:                                             ; preds = %bb10\n  ret i32 %_9.0\n", llvm_type: "label" }))
Operand 2 is Some(Right(BasicBlock { address: 0x55a6cc721dd0, is_const: false, llvm_value: "\nbb11:                                             ; preds = %bb10\n  call void @_ZN4core9panicking5panic17h4241c5ccea17facaE([0 x i8]* noundef nonnull align 1 bitcast (<{ [23 x i8] }>* @alloc53 to [0 x i8]*), i64 23, %\"core::panic::location::Location\"* noundef align 8 dereferenceable(24) bitcast (<{ i8*, [16 x i8] }>* @alloc44 to %\"core::panic::location::Location\"*)) #7\n  unreachable\n", llvm_type: "label" }))
IF STATEMENT
terminator is InstructionValue { instruction_value: Value { name: "", address: 0x55a6cc719130, is_const: false, is_null: false, is_undef: false, llvm_value: "  br i1 %c1, label %bb1, label %bb3", llvm_type: "void" } }
Operand 0 is Some(Left(IntValue(IntValue { int_value: Value { name: "c1", address: 0x55a6cc71dfd0, is_const: false, is_null: false, is_undef: false, llvm_value: "i1 %c1", llvm_type: "i1" } })))
Operand 1 is Some(Right(BasicBlock { address: 0x55a6cc721920, is_const: false, llvm_value: "\nbb3:                                              ; preds = %start\n  %0 = call { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %x, i32 4)\n  %_8.0 = extractvalue { i32, i1 } %0, 0\n  %_8.1 = extractvalue { i32, i1 } %0, 1\n  br i1 %_8.1, label %panic1, label %bb5, !prof !3\n", llvm_type: "label" }))
Operand 2 is Some(Right(BasicBlock { address: 0x55a6cc721970, is_const: false, llvm_value: "\nbb1:                                              ; preds = %start\n  %1 = call { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %x, i32 3)\n  %_6.0 = extractvalue { i32, i1 } %1, 0\n  %_6.1 = extractvalue { i32, i1 } %1, 1\n  br i1 %_6.1, label %panic, label %bb5, !prof !3\n", llvm_type: "label" }))
IF STATEMENT
terminator is InstructionValue { instruction_value: Value { name: "", address: 0x55a6cc719480, is_const: false, is_null: false, is_undef: false, llvm_value: "  br i1 %_8.1, label %panic1, label %bb5, !prof !3", llvm_type: "void" } }
Operand 0 is Some(Left(IntValue(IntValue { int_value: Value { name: "_8.1", address: 0x55a6cc7192f0, is_const: false, is_null: false, is_undef: false, llvm_value: "  %_8.1 = extractvalue { i32, i1 } %0, 1", llvm_type: "i1" } })))
Operand 1 is Some(Right(BasicBlock { address: 0x55a6cc721a60, is_const: false, llvm_value: "\nbb5:                                              ; preds = %bb3, %bb1\n  %r.0 = phi i32 [ %_6.0, %bb1 ], [ %_8.0, %bb3 ]\n  br i1 %c2, label %bb6, label %bb8\n", llvm_type: "label" }))
Operand 2 is Some(Right(BasicBlock { address: 0x55a6cc721b00, is_const: false, llvm_value: "\npanic1:                                           ; preds = %bb3\n  call void @_ZN4core9panicking5panic17h4241c5ccea17facaE([0 x i8]* noundef nonnull align 1 bitcast ([28 x i8]* @str.0 to [0 x i8]*), i64 28, %\"core::panic::location::Location\"* noundef align 8 dereferenceable(24) bitcast (<{ i8*, [16 x i8] }>* @alloc37 to %\"core::panic::location::Location\"*)) #7\n  unreachable\n", llvm_type: "label" }))
IF STATEMENT
terminator is InstructionValue { instruction_value: Value { name: "", address: 0x55a6cc7197d0, is_const: false, is_null: false, is_undef: false, llvm_value: "  br i1 %_6.1, label %panic, label %bb5, !prof !3", llvm_type: "void" } }
Operand 0 is Some(Left(IntValue(IntValue { int_value: Value { name: "_6.1", address: 0x55a6cc719640, is_const: false, is_null: false, is_undef: false, llvm_value: "  %_6.1 = extractvalue { i32, i1 } %1, 1", llvm_type: "i1" } })))
Operand 1 is Some(Right(BasicBlock { address: 0x55a6cc721a60, is_const: false, llvm_value: "\nbb5:                                              ; preds = %bb3, %bb1\n  %r.0 = phi i32 [ %_6.0, %bb1 ], [ %_8.0, %bb3 ]\n  br i1 %c2, label %bb6, label %bb8\n", llvm_type: "label" }))
Operand 2 is Some(Right(BasicBlock { address: 0x55a6cc721a10, is_const: false, llvm_value: "\npanic:                                            ; preds = %bb1\n  call void @_ZN4core9panicking5panic17h4241c5ccea17facaE([0 x i8]* noundef nonnull align 1 bitcast ([28 x i8]* @str.0 to [0 x i8]*), i64 28, %\"core::panic::location::Location\"* noundef align 8 dereferenceable(24) bitcast (<{ i8*, [16 x i8] }>* @alloc35 to %\"core::panic::location::Location\"*)) #7\n  unreachable\n", llvm_type: "label" }))
IF STATEMENT
terminator is InstructionValue { instruction_value: Value { name: "", address: 0x55a6cc723310, is_const: false, is_null: false, is_undef: false, llvm_value: "  br i1 %c2, label %bb6, label %bb8", llvm_type: "void" } }
Operand 0 is Some(Left(IntValue(IntValue { int_value: Value { name: "c2", address: 0x55a6cc71dff8, is_const: false, is_null: false, is_undef: false, llvm_value: "i1 %c2", llvm_type: "i1" } })))
Operand 1 is Some(Right(BasicBlock { address: 0x55a6cc721b50, is_const: false, llvm_value: "\nbb8:                                              ; preds = %bb5\n  %2 = call { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %r.0, i32 2)\n  %_14.0 = extractvalue { i32, i1 } %2, 0\n  %_14.1 = extractvalue { i32, i1 } %2, 1\n  br i1 %_14.1, label %panic3, label %bb10, !prof !3\n", llvm_type: "label" }))
Operand 2 is Some(Right(BasicBlock { address: 0x55a6cc721ba0, is_const: false, llvm_value: "\nbb6:                                              ; preds = %bb5\n  %3 = call { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %r.0, i32 1)\n  %_12.0 = extractvalue { i32, i1 } %3, 0\n  %_12.1 = extractvalue { i32, i1 } %3, 1\n  br i1 %_12.1, label %panic2, label %bb10, !prof !3\n", llvm_type: "label" }))
IF STATEMENT
terminator is InstructionValue { instruction_value: Value { name: "", address: 0x55a6cc723820, is_const: false, is_null: false, is_undef: false, llvm_value: "  br i1 %_14.1, label %panic3, label %bb10, !prof !3", llvm_type: "void" } }
Operand 0 is Some(Left(IntValue(IntValue { int_value: Value { name: "_14.1", address: 0x55a6cc723690, is_const: false, is_null: false, is_undef: false, llvm_value: "  %_14.1 = extractvalue { i32, i1 } %2, 1", llvm_type: "i1" } })))
Operand 1 is Some(Right(BasicBlock { address: 0x55a6cc721c90, is_const: false, llvm_value: "\nbb10:                                             ; preds = %bb8, %bb6\n  %_9.0 = phi i32 [ %_12.0, %bb6 ], [ %_14.0, %bb8 ]\n  %_16 = icmp sgt i32 %_9.0, %x\n  %_15 = xor i1 %_16, true\n  br i1 %_15, label %bb11, label %bb12\n", llvm_type: "label" }))
Operand 2 is Some(Right(BasicBlock { address: 0x55a6cc721d30, is_const: false, llvm_value: "\npanic3:                                           ; preds = %bb8\n  call void @_ZN4core9panicking5panic17h4241c5ccea17facaE([0 x i8]* noundef nonnull align 1 bitcast ([33 x i8]* @str.1 to [0 x i8]*), i64 33, %\"core::panic::location::Location\"* noundef align 8 dereferenceable(24) bitcast (<{ i8*, [16 x i8] }>* @alloc41 to %\"core::panic::location::Location\"*)) #7\n  unreachable\n", llvm_type: "label" }))
IF STATEMENT
terminator is InstructionValue { instruction_value: Value { name: "", address: 0x55a6cc723be0, is_const: false, is_null: false, is_undef: false, llvm_value: "  br i1 %_12.1, label %panic2, label %bb10, !prof !3", llvm_type: "void" } }
Operand 0 is Some(Left(IntValue(IntValue { int_value: Value { name: "_12.1", address: 0x55a6cc723a50, is_const: false, is_null: false, is_undef: false, llvm_value: "  %_12.1 = extractvalue { i32, i1 } %3, 1", llvm_type: "i1" } })))
Operand 1 is Some(Right(BasicBlock { address: 0x55a6cc721c90, is_const: false, llvm_value: "\nbb10:                                             ; preds = %bb8, %bb6\n  %_9.0 = phi i32 [ %_12.0, %bb6 ], [ %_14.0, %bb8 ]\n  %_16 = icmp sgt i32 %_9.0, %x\n  %_15 = xor i1 %_16, true\n  br i1 %_15, label %bb11, label %bb12\n", llvm_type: "label" }))
Operand 2 is Some(Right(BasicBlock { address: 0x55a6cc721c40, is_const: false, llvm_value: "\npanic2:                                           ; preds = %bb6\n  call void @_ZN4core9panicking5panic17h4241c5ccea17facaE([0 x i8]* noundef nonnull align 1 bitcast ([33 x i8]* @str.1 to [0 x i8]*), i64 33, %\"core::panic::location::Location\"* noundef align 8 dereferenceable(24) bitcast (<{ i8*, [16 x i8] }>* @alloc39 to %\"core::panic::location::Location\"*)) #7\n  unreachable\n", llvm_type: "label" }))
IF STATEMENT
terminator is InstructionValue { instruction_value: Value { name: "", address: 0x55a6cc724150, is_const: false, is_null: false, is_undef: false, llvm_value: "  br i1 %_15, label %bb11, label %bb12", llvm_type: "void" } }
Operand 0 is Some(Left(IntValue(IntValue { int_value: Value { name: "_15", address: 0x55a6cc7240a0, is_const: false, is_null: false, is_undef: false, llvm_value: "  %_15 = xor i1 %_16, true", llvm_type: "i1" } })))
Operand 1 is Some(Right(BasicBlock { address: 0x55a6cc721d80, is_const: false, llvm_value: "\nbb12:                                             ; preds = %bb10\n  ret i32 %_9.0\n", llvm_type: "label" }))
Operand 2 is Some(Right(BasicBlock { address: 0x55a6cc721dd0, is_const: false, llvm_value: "\nbb11:                                             ; preds = %bb10\n  call void @_ZN4core9panicking5panic17h4241c5ccea17facaE([0 x i8]* noundef nonnull align 1 bitcast (<{ [23 x i8] }>* @alloc53 to [0 x i8]*), i64 23, %\"core::panic::location::Location\"* noundef align 8 dereferenceable(24) bitcast (<{ i8*, [16 x i8] }>* @alloc44 to %\"core::panic::location::Location\"*)) #7\n  unreachable\n", llvm_type: "label" }))
IF STATEMENT
terminator is InstructionValue { instruction_value: Value { name: "", address: 0x55a6cc719130, is_const: false, is_null: false, is_undef: false, llvm_value: "  br i1 %c1, label %bb1, label %bb3", llvm_type: "void" } }
Operand 0 is Some(Left(IntValue(IntValue { int_value: Value { name: "c1", address: 0x55a6cc71dfd0, is_const: false, is_null: false, is_undef: false, llvm_value: "i1 %c1", llvm_type: "i1" } })))
Operand 1 is Some(Right(BasicBlock { address: 0x55a6cc721920, is_const: false, llvm_value: "\nbb3:                                              ; preds = %start\n  %0 = call { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %x, i32 4)\n  %_8.0 = extractvalue { i32, i1 } %0, 0\n  %_8.1 = extractvalue { i32, i1 } %0, 1\n  br i1 %_8.1, label %panic1, label %bb5, !prof !3\n", llvm_type: "label" }))
Operand 2 is Some(Right(BasicBlock { address: 0x55a6cc721970, is_const: false, llvm_value: "\nbb1:                                              ; preds = %start\n  %1 = call { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %x, i32 3)\n  %_6.0 = extractvalue { i32, i1 } %1, 0\n  %_6.1 = extractvalue { i32, i1 } %1, 1\n  br i1 %_6.1, label %panic, label %bb5, !prof !3\n", llvm_type: "label" }))
IF STATEMENT
terminator is InstructionValue { instruction_value: Value { name: "", address: 0x55a6cc719480, is_const: false, is_null: false, is_undef: false, llvm_value: "  br i1 %_8.1, label %panic1, label %bb5, !prof !3", llvm_type: "void" } }
Operand 0 is Some(Left(IntValue(IntValue { int_value: Value { name: "_8.1", address: 0x55a6cc7192f0, is_const: false, is_null: false, is_undef: false, llvm_value: "  %_8.1 = extractvalue { i32, i1 } %0, 1", llvm_type: "i1" } })))
Operand 1 is Some(Right(BasicBlock { address: 0x55a6cc721a60, is_const: false, llvm_value: "\nbb5:                                              ; preds = %bb3, %bb1\n  %r.0 = phi i32 [ %_6.0, %bb1 ], [ %_8.0, %bb3 ]\n  br i1 %c2, label %bb6, label %bb8\n", llvm_type: "label" }))
Operand 2 is Some(Right(BasicBlock { address: 0x55a6cc721b00, is_const: false, llvm_value: "\npanic1:                                           ; preds = %bb3\n  call void @_ZN4core9panicking5panic17h4241c5ccea17facaE([0 x i8]* noundef nonnull align 1 bitcast ([28 x i8]* @str.0 to [0 x i8]*), i64 28, %\"core::panic::location::Location\"* noundef align 8 dereferenceable(24) bitcast (<{ i8*, [16 x i8] }>* @alloc37 to %\"core::panic::location::Location\"*)) #7\n  unreachable\n", llvm_type: "label" }))
IF STATEMENT
terminator is InstructionValue { instruction_value: Value { name: "", address: 0x55a6cc7197d0, is_const: false, is_null: false, is_undef: false, llvm_value: "  br i1 %_6.1, label %panic, label %bb5, !prof !3", llvm_type: "void" } }
Operand 0 is Some(Left(IntValue(IntValue { int_value: Value { name: "_6.1", address: 0x55a6cc719640, is_const: false, is_null: false, is_undef: false, llvm_value: "  %_6.1 = extractvalue { i32, i1 } %1, 1", llvm_type: "i1" } })))
Operand 1 is Some(Right(BasicBlock { address: 0x55a6cc721a60, is_const: false, llvm_value: "\nbb5:                                              ; preds = %bb3, %bb1\n  %r.0 = phi i32 [ %_6.0, %bb1 ], [ %_8.0, %bb3 ]\n  br i1 %c2, label %bb6, label %bb8\n", llvm_type: "label" }))
Operand 2 is Some(Right(BasicBlock { address: 0x55a6cc721a10, is_const: false, llvm_value: "\npanic:                                            ; preds = %bb1\n  call void @_ZN4core9panicking5panic17h4241c5ccea17facaE([0 x i8]* noundef nonnull align 1 bitcast ([28 x i8]* @str.0 to [0 x i8]*), i64 28, %\"core::panic::location::Location\"* noundef align 8 dereferenceable(24) bitcast (<{ i8*, [16 x i8] }>* @alloc35 to %\"core::panic::location::Location\"*)) #7\n  unreachable\n", llvm_type: "label" }))
IF STATEMENT
terminator is InstructionValue { instruction_value: Value { name: "", address: 0x55a6cc723310, is_const: false, is_null: false, is_undef: false, llvm_value: "  br i1 %c2, label %bb6, label %bb8", llvm_type: "void" } }
Operand 0 is Some(Left(IntValue(IntValue { int_value: Value { name: "c2", address: 0x55a6cc71dff8, is_const: false, is_null: false, is_undef: false, llvm_value: "i1 %c2", llvm_type: "i1" } })))
Operand 1 is Some(Right(BasicBlock { address: 0x55a6cc721b50, is_const: false, llvm_value: "\nbb8:                                              ; preds = %bb5\n  %2 = call { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %r.0, i32 2)\n  %_14.0 = extractvalue { i32, i1 } %2, 0\n  %_14.1 = extractvalue { i32, i1 } %2, 1\n  br i1 %_14.1, label %panic3, label %bb10, !prof !3\n", llvm_type: "label" }))
Operand 2 is Some(Right(BasicBlock { address: 0x55a6cc721ba0, is_const: false, llvm_value: "\nbb6:                                              ; preds = %bb5\n  %3 = call { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %r.0, i32 1)\n  %_12.0 = extractvalue { i32, i1 } %3, 0\n  %_12.1 = extractvalue { i32, i1 } %3, 1\n  br i1 %_12.1, label %panic2, label %bb10, !prof !3\n", llvm_type: "label" }))
IF STATEMENT
terminator is InstructionValue { instruction_value: Value { name: "", address: 0x55a6cc723820, is_const: false, is_null: false, is_undef: false, llvm_value: "  br i1 %_14.1, label %panic3, label %bb10, !prof !3", llvm_type: "void" } }
Operand 0 is Some(Left(IntValue(IntValue { int_value: Value { name: "_14.1", address: 0x55a6cc723690, is_const: false, is_null: false, is_undef: false, llvm_value: "  %_14.1 = extractvalue { i32, i1 } %2, 1", llvm_type: "i1" } })))
Operand 1 is Some(Right(BasicBlock { address: 0x55a6cc721c90, is_const: false, llvm_value: "\nbb10:                                             ; preds = %bb8, %bb6\n  %_9.0 = phi i32 [ %_12.0, %bb6 ], [ %_14.0, %bb8 ]\n  %_16 = icmp sgt i32 %_9.0, %x\n  %_15 = xor i1 %_16, true\n  br i1 %_15, label %bb11, label %bb12\n", llvm_type: "label" }))
Operand 2 is Some(Right(BasicBlock { address: 0x55a6cc721d30, is_const: false, llvm_value: "\npanic3:                                           ; preds = %bb8\n  call void @_ZN4core9panicking5panic17h4241c5ccea17facaE([0 x i8]* noundef nonnull align 1 bitcast ([33 x i8]* @str.1 to [0 x i8]*), i64 33, %\"core::panic::location::Location\"* noundef align 8 dereferenceable(24) bitcast (<{ i8*, [16 x i8] }>* @alloc41 to %\"core::panic::location::Location\"*)) #7\n  unreachable\n", llvm_type: "label" }))
IF STATEMENT
terminator is InstructionValue { instruction_value: Value { name: "", address: 0x55a6cc723be0, is_const: false, is_null: false, is_undef: false, llvm_value: "  br i1 %_12.1, label %panic2, label %bb10, !prof !3", llvm_type: "void" } }
Operand 0 is Some(Left(IntValue(IntValue { int_value: Value { name: "_12.1", address: 0x55a6cc723a50, is_const: false, is_null: false, is_undef: false, llvm_value: "  %_12.1 = extractvalue { i32, i1 } %3, 1", llvm_type: "i1" } })))
Operand 1 is Some(Right(BasicBlock { address: 0x55a6cc721c90, is_const: false, llvm_value: "\nbb10:                                             ; preds = %bb8, %bb6\n  %_9.0 = phi i32 [ %_12.0, %bb6 ], [ %_14.0, %bb8 ]\n  %_16 = icmp sgt i32 %_9.0, %x\n  %_15 = xor i1 %_16, true\n  br i1 %_15, label %bb11, label %bb12\n", llvm_type: "label" }))
Operand 2 is Some(Right(BasicBlock { address: 0x55a6cc721c40, is_const: false, llvm_value: "\npanic2:                                           ; preds = %bb6\n  call void @_ZN4core9panicking5panic17h4241c5ccea17facaE([0 x i8]* noundef nonnull align 1 bitcast ([33 x i8]* @str.1 to [0 x i8]*), i64 33, %\"core::panic::location::Location\"* noundef align 8 dereferenceable(24) bitcast (<{ i8*, [16 x i8] }>* @alloc39 to %\"core::panic::location::Location\"*)) #7\n  unreachable\n", llvm_type: "label" }))
IF STATEMENT
terminator is InstructionValue { instruction_value: Value { name: "", address: 0x55a6cc724150, is_const: false, is_null: false, is_undef: false, llvm_value: "  br i1 %_15, label %bb11, label %bb12", llvm_type: "void" } }
Operand 0 is Some(Left(IntValue(IntValue { int_value: Value { name: "_15", address: 0x55a6cc7240a0, is_const: false, is_null: false, is_undef: false, llvm_value: "  %_15 = xor i1 %_16, true", llvm_type: "i1" } })))
Operand 1 is Some(Right(BasicBlock { address: 0x55a6cc721d80, is_const: false, llvm_value: "\nbb12:                                             ; preds = %bb10\n  ret i32 %_9.0\n", llvm_type: "label" }))
Operand 2 is Some(Right(BasicBlock { address: 0x55a6cc721dd0, is_const: false, llvm_value: "\nbb11:                                             ; preds = %bb10\n  call void @_ZN4core9panicking5panic17h4241c5ccea17facaE([0 x i8]* noundef nonnull align 1 bitcast (<{ [23 x i8] }>* @alloc53 to [0 x i8]*), i64 23, %\"core::panic::location::Location\"* noundef align 8 dereferenceable(24) bitcast (<{ i8*, [16 x i8] }>* @alloc44 to %\"core::panic::location::Location\"*)) #7\n  unreachable\n", llvm_type: "label" }))
IF STATEMENT
terminator is InstructionValue { instruction_value: Value { name: "", address: 0x55a6cc719130, is_const: false, is_null: false, is_undef: false, llvm_value: "  br i1 %c1, label %bb1, label %bb3", llvm_type: "void" } }
Operand 0 is Some(Left(IntValue(IntValue { int_value: Value { name: "c1", address: 0x55a6cc71dfd0, is_const: false, is_null: false, is_undef: false, llvm_value: "i1 %c1", llvm_type: "i1" } })))
Operand 1 is Some(Right(BasicBlock { address: 0x55a6cc721920, is_const: false, llvm_value: "\nbb3:                                              ; preds = %start\n  %0 = call { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %x, i32 4)\n  %_8.0 = extractvalue { i32, i1 } %0, 0\n  %_8.1 = extractvalue { i32, i1 } %0, 1\n  br i1 %_8.1, label %panic1, label %bb5, !prof !3\n", llvm_type: "label" }))
Operand 2 is Some(Right(BasicBlock { address: 0x55a6cc721970, is_const: false, llvm_value: "\nbb1:                                              ; preds = %start\n  %1 = call { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %x, i32 3)\n  %_6.0 = extractvalue { i32, i1 } %1, 0\n  %_6.1 = extractvalue { i32, i1 } %1, 1\n  br i1 %_6.1, label %panic, label %bb5, !prof !3\n", llvm_type: "label" }))
IF STATEMENT
terminator is InstructionValue { instruction_value: Value { name: "", address: 0x55a6cc719480, is_const: false, is_null: false, is_undef: false, llvm_value: "  br i1 %_8.1, label %panic1, label %bb5, !prof !3", llvm_type: "void" } }
Operand 0 is Some(Left(IntValue(IntValue { int_value: Value { name: "_8.1", address: 0x55a6cc7192f0, is_const: false, is_null: false, is_undef: false, llvm_value: "  %_8.1 = extractvalue { i32, i1 } %0, 1", llvm_type: "i1" } })))
Operand 1 is Some(Right(BasicBlock { address: 0x55a6cc721a60, is_const: false, llvm_value: "\nbb5:                                              ; preds = %bb3, %bb1\n  %r.0 = phi i32 [ %_6.0, %bb1 ], [ %_8.0, %bb3 ]\n  br i1 %c2, label %bb6, label %bb8\n", llvm_type: "label" }))
Operand 2 is Some(Right(BasicBlock { address: 0x55a6cc721b00, is_const: false, llvm_value: "\npanic1:                                           ; preds = %bb3\n  call void @_ZN4core9panicking5panic17h4241c5ccea17facaE([0 x i8]* noundef nonnull align 1 bitcast ([28 x i8]* @str.0 to [0 x i8]*), i64 28, %\"core::panic::location::Location\"* noundef align 8 dereferenceable(24) bitcast (<{ i8*, [16 x i8] }>* @alloc37 to %\"core::panic::location::Location\"*)) #7\n  unreachable\n", llvm_type: "label" }))
IF STATEMENT
terminator is InstructionValue { instruction_value: Value { name: "", address: 0x55a6cc7197d0, is_const: false, is_null: false, is_undef: false, llvm_value: "  br i1 %_6.1, label %panic, label %bb5, !prof !3", llvm_type: "void" } }
Operand 0 is Some(Left(IntValue(IntValue { int_value: Value { name: "_6.1", address: 0x55a6cc719640, is_const: false, is_null: false, is_undef: false, llvm_value: "  %_6.1 = extractvalue { i32, i1 } %1, 1", llvm_type: "i1" } })))
Operand 1 is Some(Right(BasicBlock { address: 0x55a6cc721a60, is_const: false, llvm_value: "\nbb5:                                              ; preds = %bb3, %bb1\n  %r.0 = phi i32 [ %_6.0, %bb1 ], [ %_8.0, %bb3 ]\n  br i1 %c2, label %bb6, label %bb8\n", llvm_type: "label" }))
Operand 2 is Some(Right(BasicBlock { address: 0x55a6cc721a10, is_const: false, llvm_value: "\npanic:                                            ; preds = %bb1\n  call void @_ZN4core9panicking5panic17h4241c5ccea17facaE([0 x i8]* noundef nonnull align 1 bitcast ([28 x i8]* @str.0 to [0 x i8]*), i64 28, %\"core::panic::location::Location\"* noundef align 8 dereferenceable(24) bitcast (<{ i8*, [16 x i8] }>* @alloc35 to %\"core::panic::location::Location\"*)) #7\n  unreachable\n", llvm_type: "label" }))
IF STATEMENT
terminator is InstructionValue { instruction_value: Value { name: "", address: 0x55a6cc723310, is_const: false, is_null: false, is_undef: false, llvm_value: "  br i1 %c2, label %bb6, label %bb8", llvm_type: "void" } }
Operand 0 is Some(Left(IntValue(IntValue { int_value: Value { name: "c2", address: 0x55a6cc71dff8, is_const: false, is_null: false, is_undef: false, llvm_value: "i1 %c2", llvm_type: "i1" } })))
Operand 1 is Some(Right(BasicBlock { address: 0x55a6cc721b50, is_const: false, llvm_value: "\nbb8:                                              ; preds = %bb5\n  %2 = call { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %r.0, i32 2)\n  %_14.0 = extractvalue { i32, i1 } %2, 0\n  %_14.1 = extractvalue { i32, i1 } %2, 1\n  br i1 %_14.1, label %panic3, label %bb10, !prof !3\n", llvm_type: "label" }))
Operand 2 is Some(Right(BasicBlock { address: 0x55a6cc721ba0, is_const: false, llvm_value: "\nbb6:                                              ; preds = %bb5\n  %3 = call { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %r.0, i32 1)\n  %_12.0 = extractvalue { i32, i1 } %3, 0\n  %_12.1 = extractvalue { i32, i1 } %3, 1\n  br i1 %_12.1, label %panic2, label %bb10, !prof !3\n", llvm_type: "label" }))
IF STATEMENT
terminator is InstructionValue { instruction_value: Value { name: "", address: 0x55a6cc723820, is_const: false, is_null: false, is_undef: false, llvm_value: "  br i1 %_14.1, label %panic3, label %bb10, !prof !3", llvm_type: "void" } }
Operand 0 is Some(Left(IntValue(IntValue { int_value: Value { name: "_14.1", address: 0x55a6cc723690, is_const: false, is_null: false, is_undef: false, llvm_value: "  %_14.1 = extractvalue { i32, i1 } %2, 1", llvm_type: "i1" } })))
Operand 1 is Some(Right(BasicBlock { address: 0x55a6cc721c90, is_const: false, llvm_value: "\nbb10:                                             ; preds = %bb8, %bb6\n  %_9.0 = phi i32 [ %_12.0, %bb6 ], [ %_14.0, %bb8 ]\n  %_16 = icmp sgt i32 %_9.0, %x\n  %_15 = xor i1 %_16, true\n  br i1 %_15, label %bb11, label %bb12\n", llvm_type: "label" }))
Operand 2 is Some(Right(BasicBlock { address: 0x55a6cc721d30, is_const: false, llvm_value: "\npanic3:                                           ; preds = %bb8\n  call void @_ZN4core9panicking5panic17h4241c5ccea17facaE([0 x i8]* noundef nonnull align 1 bitcast ([33 x i8]* @str.1 to [0 x i8]*), i64 33, %\"core::panic::location::Location\"* noundef align 8 dereferenceable(24) bitcast (<{ i8*, [16 x i8] }>* @alloc41 to %\"core::panic::location::Location\"*)) #7\n  unreachable\n", llvm_type: "label" }))
IF STATEMENT
terminator is InstructionValue { instruction_value: Value { name: "", address: 0x55a6cc723be0, is_const: false, is_null: false, is_undef: false, llvm_value: "  br i1 %_12.1, label %panic2, label %bb10, !prof !3", llvm_type: "void" } }
Operand 0 is Some(Left(IntValue(IntValue { int_value: Value { name: "_12.1", address: 0x55a6cc723a50, is_const: false, is_null: false, is_undef: false, llvm_value: "  %_12.1 = extractvalue { i32, i1 } %3, 1", llvm_type: "i1" } })))
Operand 1 is Some(Right(BasicBlock { address: 0x55a6cc721c90, is_const: false, llvm_value: "\nbb10:                                             ; preds = %bb8, %bb6\n  %_9.0 = phi i32 [ %_12.0, %bb6 ], [ %_14.0, %bb8 ]\n  %_16 = icmp sgt i32 %_9.0, %x\n  %_15 = xor i1 %_16, true\n  br i1 %_15, label %bb11, label %bb12\n", llvm_type: "label" }))
Operand 2 is Some(Right(BasicBlock { address: 0x55a6cc721c40, is_const: false, llvm_value: "\npanic2:                                           ; preds = %bb6\n  call void @_ZN4core9panicking5panic17h4241c5ccea17facaE([0 x i8]* noundef nonnull align 1 bitcast ([33 x i8]* @str.1 to [0 x i8]*), i64 33, %\"core::panic::location::Location\"* noundef align 8 dereferenceable(24) bitcast (<{ i8*, [16 x i8] }>* @alloc39 to %\"core::panic::location::Location\"*)) #7\n  unreachable\n", llvm_type: "label" }))
IF STATEMENT
terminator is InstructionValue { instruction_value: Value { name: "", address: 0x55a6cc724150, is_const: false, is_null: false, is_undef: false, llvm_value: "  br i1 %_15, label %bb11, label %bb12", llvm_type: "void" } }
Operand 0 is Some(Left(IntValue(IntValue { int_value: Value { name: "_15", address: 0x55a6cc7240a0, is_const: false, is_null: false, is_undef: false, llvm_value: "  %_15 = xor i1 %_16, true", llvm_type: "i1" } })))
Operand 1 is Some(Right(BasicBlock { address: 0x55a6cc721d80, is_const: false, llvm_value: "\nbb12:                                             ; preds = %bb10\n  ret i32 %_9.0\n", llvm_type: "label" }))
Operand 2 is Some(Right(BasicBlock { address: 0x55a6cc721dd0, is_const: false, llvm_value: "\nbb11:                                             ; preds = %bb10\n  call void @_ZN4core9panicking5panic17h4241c5ccea17facaE([0 x i8]* noundef nonnull align 1 bitcast (<{ [23 x i8] }>* @alloc53 to [0 x i8]*), i64 23, %\"core::panic::location::Location\"* noundef align 8 dereferenceable(24) bitcast (<{ i8*, [16 x i8] }>* @alloc44 to %\"core::panic::location::Location\"*)) #7\n  unreachable\n", llvm_type: "label" }))
[2mJan 15 20:18:36.914[0m [34mDEBUG[0m wombat_symx: Unsupported Call function "_ZN4core9panicking5panic17h4241c5ccea17facaE"
IF HAS NUM OPERANDS 3
IF HAS TERMINATOR InstructionValue { instruction_value: Value { name: "", address: 0x55a6cc724150, is_const: false, is_null: false, is_undef: false, llvm_value: "  br i1 %_15, label %bb11, label %bb12", llvm_type: "void" } }
IF HAS NODE "bb11"
TEST 123 "  %_15 = xor i1 %_16, true"
IF HAS TARGET VAL true
IF HAS TARGET VAL VAR true
IF HAS SWITCH VAR %_15
IF HAS DISCRIMINANT IntValue(IntValue { int_value: Value { name: "_15", address: 0x55a6cc7240a0, is_const: false, is_null: false, is_undef: false, llvm_value: "  %_15 = xor i1 %_16, true", llvm_type: "i1" } })
IF HAS ENTRY CONDITION (= %_15 true)
IF HAS NUM OPERANDS 3
IF HAS TERMINATOR InstructionValue { instruction_value: Value { name: "", address: 0x55a6cc724150, is_const: false, is_null: false, is_undef: false, llvm_value: "  br i1 %_15, label %bb11, label %bb12", llvm_type: "void" } }
IF HAS NODE "bb12"
TEST 123 "  %_15 = xor i1 %_16, true"
IF HAS TARGET VAL false
IF HAS TARGET VAL VAR false
IF HAS SWITCH VAR %_15
IF HAS DISCRIMINANT IntValue(IntValue { int_value: Value { name: "_15", address: 0x55a6cc7240a0, is_const: false, is_null: false, is_undef: false, llvm_value: "  %_15 = xor i1 %_16, true", llvm_type: "i1" } })
IF HAS ENTRY CONDITION (= %_15 false)
[2mJan 15 20:18:36.916[0m [34mDEBUG[0m wombat_symx: Unsupported Call function "_ZN4core9panicking5panic17h4241c5ccea17facaE"
IF HAS NUM OPERANDS 3
IF HAS TERMINATOR InstructionValue { instruction_value: Value { name: "", address: 0x55a6cc723820, is_const: false, is_null: false, is_undef: false, llvm_value: "  br i1 %_14.1, label %panic3, label %bb10, !prof !3", llvm_type: "void" } }
IF HAS NODE "panic3"
TEST 123 "  %_14.1 = extractvalue { i32, i1 } %2, 1"
IF HAS TARGET VAL true
IF HAS TARGET VAL VAR true
IF HAS SWITCH VAR %_14.1
IF HAS DISCRIMINANT IntValue(IntValue { int_value: Value { name: "_14.1", address: 0x55a6cc723690, is_const: false, is_null: false, is_undef: false, llvm_value: "  %_14.1 = extractvalue { i32, i1 } %2, 1", llvm_type: "i1" } })
IF HAS ENTRY CONDITION (= %_14.1 true)
IF HAS NUM OPERANDS 3
IF HAS TERMINATOR InstructionValue { instruction_value: Value { name: "", address: 0x55a6cc724150, is_const: false, is_null: false, is_undef: false, llvm_value: "  br i1 %_15, label %bb11, label %bb12", llvm_type: "void" } }
IF HAS NODE "bb12"
TEST 123 "  %_15 = xor i1 %_16, true"
IF HAS TARGET VAL false
IF HAS TARGET VAL VAR false
IF HAS SWITCH VAR %_15
IF HAS DISCRIMINANT IntValue(IntValue { int_value: Value { name: "_15", address: 0x55a6cc7240a0, is_const: false, is_null: false, is_undef: false, llvm_value: "  %_15 = xor i1 %_16, true", llvm_type: "i1" } })
IF HAS ENTRY CONDITION (= %_15 false)
IF HAS NUM OPERANDS 3
IF HAS TERMINATOR InstructionValue { instruction_value: Value { name: "", address: 0x55a6cc724150, is_const: false, is_null: false, is_undef: false, llvm_value: "  br i1 %_15, label %bb11, label %bb12", llvm_type: "void" } }
IF HAS NODE "bb11"
TEST 123 "  %_15 = xor i1 %_16, true"
IF HAS TARGET VAL true
IF HAS TARGET VAL VAR true
IF HAS SWITCH VAR %_15
IF HAS DISCRIMINANT IntValue(IntValue { int_value: Value { name: "_15", address: 0x55a6cc7240a0, is_const: false, is_null: false, is_undef: false, llvm_value: "  %_15 = xor i1 %_16, true", llvm_type: "i1" } })
IF HAS ENTRY CONDITION (= %_15 true)
TEST 123 "  %_16 = icmp sgt i32 %_9.0, %x"
TEST 123 "i1 true"
TEST 123 "  %_15 = xor i1 %_16, true"
TEST 123 "  %_16 = icmp sgt i32 %_9.0, %x"
TEST 123 "  %_9.0 = phi i32 [ %_12.0, %bb6 ], [ %_14.0, %bb8 ]"
TEST 123 "i32 %x"
IF HAS NUM OPERANDS 3
IF HAS TERMINATOR InstructionValue { instruction_value: Value { name: "", address: 0x55a6cc723820, is_const: false, is_null: false, is_undef: false, llvm_value: "  br i1 %_14.1, label %panic3, label %bb10, !prof !3", llvm_type: "void" } }
IF HAS NODE "bb10"
TEST 123 "  %_14.1 = extractvalue { i32, i1 } %2, 1"
IF HAS TARGET VAL false
IF HAS TARGET VAL VAR false
IF HAS SWITCH VAR %_14.1
IF HAS DISCRIMINANT IntValue(IntValue { int_value: Value { name: "_14.1", address: 0x55a6cc723690, is_const: false, is_null: false, is_undef: false, llvm_value: "  %_14.1 = extractvalue { i32, i1 } %2, 1", llvm_type: "i1" } })
IF HAS ENTRY CONDITION (= %_14.1 false)
IF HAS NUM OPERANDS 3
IF HAS TERMINATOR InstructionValue { instruction_value: Value { name: "", address: 0x55a6cc723be0, is_const: false, is_null: false, is_undef: false, llvm_value: "  br i1 %_12.1, label %panic2, label %bb10, !prof !3", llvm_type: "void" } }
IF HAS NODE "bb10"
TEST 123 "  %_12.1 = extractvalue { i32, i1 } %3, 1"
IF HAS TARGET VAL false
IF HAS TARGET VAL VAR false
IF HAS SWITCH VAR %_12.1
IF HAS DISCRIMINANT IntValue(IntValue { int_value: Value { name: "_12.1", address: 0x55a6cc723a50, is_const: false, is_null: false, is_undef: false, llvm_value: "  %_12.1 = extractvalue { i32, i1 } %3, 1", llvm_type: "i1" } })
IF HAS ENTRY CONDITION (= %_12.1 false)
[2mJan 15 20:18:36.918[0m [34mDEBUG[0m wombat_symx: Unsupported Call function "_ZN4core9panicking5panic17h4241c5ccea17facaE"
IF HAS NUM OPERANDS 3
IF HAS TERMINATOR InstructionValue { instruction_value: Value { name: "", address: 0x55a6cc723be0, is_const: false, is_null: false, is_undef: false, llvm_value: "  br i1 %_12.1, label %panic2, label %bb10, !prof !3", llvm_type: "void" } }
IF HAS NODE "panic2"
TEST 123 "  %_12.1 = extractvalue { i32, i1 } %3, 1"
IF HAS TARGET VAL true
IF HAS TARGET VAL VAR true
IF HAS SWITCH VAR %_12.1
IF HAS DISCRIMINANT IntValue(IntValue { int_value: Value { name: "_12.1", address: 0x55a6cc723a50, is_const: false, is_null: false, is_undef: false, llvm_value: "  %_12.1 = extractvalue { i32, i1 } %3, 1", llvm_type: "i1" } })
IF HAS ENTRY CONDITION (= %_12.1 true)
IF HAS NUM OPERANDS 3
IF HAS TERMINATOR InstructionValue { instruction_value: Value { name: "", address: 0x55a6cc723be0, is_const: false, is_null: false, is_undef: false, llvm_value: "  br i1 %_12.1, label %panic2, label %bb10, !prof !3", llvm_type: "void" } }
IF HAS NODE "bb10"
TEST 123 "  %_12.1 = extractvalue { i32, i1 } %3, 1"
IF HAS TARGET VAL false
IF HAS TARGET VAL VAR false
IF HAS SWITCH VAR %_12.1
IF HAS DISCRIMINANT IntValue(IntValue { int_value: Value { name: "_12.1", address: 0x55a6cc723a50, is_const: false, is_null: false, is_undef: false, llvm_value: "  %_12.1 = extractvalue { i32, i1 } %3, 1", llvm_type: "i1" } })
IF HAS ENTRY CONDITION (= %_12.1 false)
TEST 123 "  %_9.0 = phi i32 [ %_12.0, %bb6 ], [ %_14.0, %bb8 ]"
TEST 123 "  %_12.0 = extractvalue { i32, i1 } %3, 0"
IF HAS NUM OPERANDS 3
IF HAS TERMINATOR InstructionValue { instruction_value: Value { name: "", address: 0x55a6cc723be0, is_const: false, is_null: false, is_undef: false, llvm_value: "  br i1 %_12.1, label %panic2, label %bb10, !prof !3", llvm_type: "void" } }
IF HAS NODE "panic2"
TEST 123 "  %_12.1 = extractvalue { i32, i1 } %3, 1"
IF HAS TARGET VAL true
IF HAS TARGET VAL VAR true
IF HAS SWITCH VAR %_12.1
IF HAS DISCRIMINANT IntValue(IntValue { int_value: Value { name: "_12.1", address: 0x55a6cc723a50, is_const: false, is_null: false, is_undef: false, llvm_value: "  %_12.1 = extractvalue { i32, i1 } %3, 1", llvm_type: "i1" } })
IF HAS ENTRY CONDITION (= %_12.1 true)
TEST 123 "  %_12.1 = extractvalue { i32, i1 } %3, 1"
TEST 123 "  %3 = call { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %r.0, i32 1)"
TEST 123 "  %_12.0 = extractvalue { i32, i1 } %3, 0"
TEST 123 "  %3 = call { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %r.0, i32 1)"
TEST 123 "  %r.0 = phi i32 [ %_6.0, %bb1 ], [ %_8.0, %bb3 ]"
TEST 123 "i32 1"
TEST 123 "  %3 = call { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %r.0, i32 1)"
TEST 123 "  %3 = call { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %r.0, i32 1)"
IF HAS NUM OPERANDS 3
IF HAS TERMINATOR InstructionValue { instruction_value: Value { name: "", address: 0x55a6cc723310, is_const: false, is_null: false, is_undef: false, llvm_value: "  br i1 %c2, label %bb6, label %bb8", llvm_type: "void" } }
IF HAS NODE "bb6"
TEST 123 "i1 %c2"
IF HAS TARGET VAL true
IF HAS TARGET VAL VAR true
IF HAS SWITCH VAR %c2
IF HAS DISCRIMINANT IntValue(IntValue { int_value: Value { name: "c2", address: 0x55a6cc71dff8, is_const: false, is_null: false, is_undef: false, llvm_value: "i1 %c2", llvm_type: "i1" } })
IF HAS ENTRY CONDITION (= %c2 true)
IF HAS NUM OPERANDS 3
IF HAS TERMINATOR InstructionValue { instruction_value: Value { name: "", address: 0x55a6cc723820, is_const: false, is_null: false, is_undef: false, llvm_value: "  br i1 %_14.1, label %panic3, label %bb10, !prof !3", llvm_type: "void" } }
IF HAS NODE "panic3"
TEST 123 "  %_14.1 = extractvalue { i32, i1 } %2, 1"
IF HAS TARGET VAL true
IF HAS TARGET VAL VAR true
IF HAS SWITCH VAR %_14.1
IF HAS DISCRIMINANT IntValue(IntValue { int_value: Value { name: "_14.1", address: 0x55a6cc723690, is_const: false, is_null: false, is_undef: false, llvm_value: "  %_14.1 = extractvalue { i32, i1 } %2, 1", llvm_type: "i1" } })
IF HAS ENTRY CONDITION (= %_14.1 true)
IF HAS NUM OPERANDS 3
IF HAS TERMINATOR InstructionValue { instruction_value: Value { name: "", address: 0x55a6cc723820, is_const: false, is_null: false, is_undef: false, llvm_value: "  br i1 %_14.1, label %panic3, label %bb10, !prof !3", llvm_type: "void" } }
IF HAS NODE "bb10"
TEST 123 "  %_14.1 = extractvalue { i32, i1 } %2, 1"
IF HAS TARGET VAL false
IF HAS TARGET VAL VAR false
IF HAS SWITCH VAR %_14.1
IF HAS DISCRIMINANT IntValue(IntValue { int_value: Value { name: "_14.1", address: 0x55a6cc723690, is_const: false, is_null: false, is_undef: false, llvm_value: "  %_14.1 = extractvalue { i32, i1 } %2, 1", llvm_type: "i1" } })
IF HAS ENTRY CONDITION (= %_14.1 false)
TEST 123 "  %_9.0 = phi i32 [ %_12.0, %bb6 ], [ %_14.0, %bb8 ]"
TEST 123 "  %_14.0 = extractvalue { i32, i1 } %2, 0"
TEST 123 "  %_14.1 = extractvalue { i32, i1 } %2, 1"
TEST 123 "  %2 = call { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %r.0, i32 2)"
TEST 123 "  %_14.0 = extractvalue { i32, i1 } %2, 0"
TEST 123 "  %2 = call { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %r.0, i32 2)"
TEST 123 "  %r.0 = phi i32 [ %_6.0, %bb1 ], [ %_8.0, %bb3 ]"
TEST 123 "i32 2"
TEST 123 "  %2 = call { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %r.0, i32 2)"
TEST 123 "  %2 = call { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %r.0, i32 2)"
IF HAS NUM OPERANDS 3
IF HAS TERMINATOR InstructionValue { instruction_value: Value { name: "", address: 0x55a6cc723310, is_const: false, is_null: false, is_undef: false, llvm_value: "  br i1 %c2, label %bb6, label %bb8", llvm_type: "void" } }
IF HAS NODE "bb8"
TEST 123 "i1 %c2"
IF HAS TARGET VAL false
IF HAS TARGET VAL VAR false
IF HAS SWITCH VAR %c2
IF HAS DISCRIMINANT IntValue(IntValue { int_value: Value { name: "c2", address: 0x55a6cc71dff8, is_const: false, is_null: false, is_undef: false, llvm_value: "i1 %c2", llvm_type: "i1" } })
IF HAS ENTRY CONDITION (= %c2 false)
[2mJan 15 20:18:36.923[0m [34mDEBUG[0m wombat_symx: Unsupported Call function "_ZN4core9panicking5panic17h4241c5ccea17facaE"
IF HAS NUM OPERANDS 3
IF HAS TERMINATOR InstructionValue { instruction_value: Value { name: "", address: 0x55a6cc719480, is_const: false, is_null: false, is_undef: false, llvm_value: "  br i1 %_8.1, label %panic1, label %bb5, !prof !3", llvm_type: "void" } }
IF HAS NODE "panic1"
TEST 123 "  %_8.1 = extractvalue { i32, i1 } %0, 1"
IF HAS TARGET VAL true
IF HAS TARGET VAL VAR true
IF HAS SWITCH VAR %_8.1
IF HAS DISCRIMINANT IntValue(IntValue { int_value: Value { name: "_8.1", address: 0x55a6cc7192f0, is_const: false, is_null: false, is_undef: false, llvm_value: "  %_8.1 = extractvalue { i32, i1 } %0, 1", llvm_type: "i1" } })
IF HAS ENTRY CONDITION (= %_8.1 true)
IF HAS NUM OPERANDS 3
IF HAS TERMINATOR InstructionValue { instruction_value: Value { name: "", address: 0x55a6cc723310, is_const: false, is_null: false, is_undef: false, llvm_value: "  br i1 %c2, label %bb6, label %bb8", llvm_type: "void" } }
IF HAS NODE "bb8"
TEST 123 "i1 %c2"
IF HAS TARGET VAL false
IF HAS TARGET VAL VAR false
IF HAS SWITCH VAR %c2
IF HAS DISCRIMINANT IntValue(IntValue { int_value: Value { name: "c2", address: 0x55a6cc71dff8, is_const: false, is_null: false, is_undef: false, llvm_value: "i1 %c2", llvm_type: "i1" } })
IF HAS ENTRY CONDITION (= %c2 false)
IF HAS NUM OPERANDS 3
IF HAS TERMINATOR InstructionValue { instruction_value: Value { name: "", address: 0x55a6cc723310, is_const: false, is_null: false, is_undef: false, llvm_value: "  br i1 %c2, label %bb6, label %bb8", llvm_type: "void" } }
IF HAS NODE "bb6"
TEST 123 "i1 %c2"
IF HAS TARGET VAL true
IF HAS TARGET VAL VAR true
IF HAS SWITCH VAR %c2
IF HAS DISCRIMINANT IntValue(IntValue { int_value: Value { name: "c2", address: 0x55a6cc71dff8, is_const: false, is_null: false, is_undef: false, llvm_value: "i1 %c2", llvm_type: "i1" } })
IF HAS ENTRY CONDITION (= %c2 true)
IF HAS NUM OPERANDS 3
IF HAS TERMINATOR InstructionValue { instruction_value: Value { name: "", address: 0x55a6cc719480, is_const: false, is_null: false, is_undef: false, llvm_value: "  br i1 %_8.1, label %panic1, label %bb5, !prof !3", llvm_type: "void" } }
IF HAS NODE "bb5"
TEST 123 "  %_8.1 = extractvalue { i32, i1 } %0, 1"
IF HAS TARGET VAL false
IF HAS TARGET VAL VAR false
IF HAS SWITCH VAR %_8.1
IF HAS DISCRIMINANT IntValue(IntValue { int_value: Value { name: "_8.1", address: 0x55a6cc7192f0, is_const: false, is_null: false, is_undef: false, llvm_value: "  %_8.1 = extractvalue { i32, i1 } %0, 1", llvm_type: "i1" } })
IF HAS ENTRY CONDITION (= %_8.1 false)
IF HAS NUM OPERANDS 3
IF HAS TERMINATOR InstructionValue { instruction_value: Value { name: "", address: 0x55a6cc7197d0, is_const: false, is_null: false, is_undef: false, llvm_value: "  br i1 %_6.1, label %panic, label %bb5, !prof !3", llvm_type: "void" } }
IF HAS NODE "bb5"
TEST 123 "  %_6.1 = extractvalue { i32, i1 } %1, 1"
IF HAS TARGET VAL false
IF HAS TARGET VAL VAR false
IF HAS SWITCH VAR %_6.1
IF HAS DISCRIMINANT IntValue(IntValue { int_value: Value { name: "_6.1", address: 0x55a6cc719640, is_const: false, is_null: false, is_undef: false, llvm_value: "  %_6.1 = extractvalue { i32, i1 } %1, 1", llvm_type: "i1" } })
IF HAS ENTRY CONDITION (= %_6.1 false)
[2mJan 15 20:18:36.926[0m [34mDEBUG[0m wombat_symx: Unsupported Call function "_ZN4core9panicking5panic17h4241c5ccea17facaE"
IF HAS NUM OPERANDS 3
IF HAS TERMINATOR InstructionValue { instruction_value: Value { name: "", address: 0x55a6cc7197d0, is_const: false, is_null: false, is_undef: false, llvm_value: "  br i1 %_6.1, label %panic, label %bb5, !prof !3", llvm_type: "void" } }
IF HAS NODE "panic"
TEST 123 "  %_6.1 = extractvalue { i32, i1 } %1, 1"
IF HAS TARGET VAL true
IF HAS TARGET VAL VAR true
IF HAS SWITCH VAR %_6.1
IF HAS DISCRIMINANT IntValue(IntValue { int_value: Value { name: "_6.1", address: 0x55a6cc719640, is_const: false, is_null: false, is_undef: false, llvm_value: "  %_6.1 = extractvalue { i32, i1 } %1, 1", llvm_type: "i1" } })
IF HAS ENTRY CONDITION (= %_6.1 true)
IF HAS NUM OPERANDS 3
IF HAS TERMINATOR InstructionValue { instruction_value: Value { name: "", address: 0x55a6cc7197d0, is_const: false, is_null: false, is_undef: false, llvm_value: "  br i1 %_6.1, label %panic, label %bb5, !prof !3", llvm_type: "void" } }
IF HAS NODE "bb5"
TEST 123 "  %_6.1 = extractvalue { i32, i1 } %1, 1"
IF HAS TARGET VAL false
IF HAS TARGET VAL VAR false
IF HAS SWITCH VAR %_6.1
IF HAS DISCRIMINANT IntValue(IntValue { int_value: Value { name: "_6.1", address: 0x55a6cc719640, is_const: false, is_null: false, is_undef: false, llvm_value: "  %_6.1 = extractvalue { i32, i1 } %1, 1", llvm_type: "i1" } })
IF HAS ENTRY CONDITION (= %_6.1 false)
TEST 123 "  %r.0 = phi i32 [ %_6.0, %bb1 ], [ %_8.0, %bb3 ]"
TEST 123 "  %_6.0 = extractvalue { i32, i1 } %1, 0"
IF HAS NUM OPERANDS 3
IF HAS TERMINATOR InstructionValue { instruction_value: Value { name: "", address: 0x55a6cc7197d0, is_const: false, is_null: false, is_undef: false, llvm_value: "  br i1 %_6.1, label %panic, label %bb5, !prof !3", llvm_type: "void" } }
IF HAS NODE "panic"
TEST 123 "  %_6.1 = extractvalue { i32, i1 } %1, 1"
IF HAS TARGET VAL true
IF HAS TARGET VAL VAR true
IF HAS SWITCH VAR %_6.1
IF HAS DISCRIMINANT IntValue(IntValue { int_value: Value { name: "_6.1", address: 0x55a6cc719640, is_const: false, is_null: false, is_undef: false, llvm_value: "  %_6.1 = extractvalue { i32, i1 } %1, 1", llvm_type: "i1" } })
IF HAS ENTRY CONDITION (= %_6.1 true)
TEST 123 "  %_6.1 = extractvalue { i32, i1 } %1, 1"
TEST 123 "  %1 = call { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %x, i32 3)"
TEST 123 "  %_6.0 = extractvalue { i32, i1 } %1, 0"
TEST 123 "  %1 = call { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %x, i32 3)"
TEST 123 "i32 %x"
TEST 123 "i32 3"
TEST 123 "  %1 = call { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %x, i32 3)"
TEST 123 "  %1 = call { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %x, i32 3)"
IF HAS NUM OPERANDS 3
IF HAS TERMINATOR InstructionValue { instruction_value: Value { name: "", address: 0x55a6cc719130, is_const: false, is_null: false, is_undef: false, llvm_value: "  br i1 %c1, label %bb1, label %bb3", llvm_type: "void" } }
IF HAS NODE "bb1"
TEST 123 "i1 %c1"
IF HAS TARGET VAL true
IF HAS TARGET VAL VAR true
IF HAS SWITCH VAR %c1
IF HAS DISCRIMINANT IntValue(IntValue { int_value: Value { name: "c1", address: 0x55a6cc71dfd0, is_const: false, is_null: false, is_undef: false, llvm_value: "i1 %c1", llvm_type: "i1" } })
IF HAS ENTRY CONDITION (= %c1 true)
IF HAS NUM OPERANDS 3
IF HAS TERMINATOR InstructionValue { instruction_value: Value { name: "", address: 0x55a6cc719480, is_const: false, is_null: false, is_undef: false, llvm_value: "  br i1 %_8.1, label %panic1, label %bb5, !prof !3", llvm_type: "void" } }
IF HAS NODE "panic1"
TEST 123 "  %_8.1 = extractvalue { i32, i1 } %0, 1"
IF HAS TARGET VAL true
IF HAS TARGET VAL VAR true
IF HAS SWITCH VAR %_8.1
IF HAS DISCRIMINANT IntValue(IntValue { int_value: Value { name: "_8.1", address: 0x55a6cc7192f0, is_const: false, is_null: false, is_undef: false, llvm_value: "  %_8.1 = extractvalue { i32, i1 } %0, 1", llvm_type: "i1" } })
IF HAS ENTRY CONDITION (= %_8.1 true)
IF HAS NUM OPERANDS 3
IF HAS TERMINATOR InstructionValue { instruction_value: Value { name: "", address: 0x55a6cc719480, is_const: false, is_null: false, is_undef: false, llvm_value: "  br i1 %_8.1, label %panic1, label %bb5, !prof !3", llvm_type: "void" } }
IF HAS NODE "bb5"
TEST 123 "  %_8.1 = extractvalue { i32, i1 } %0, 1"
IF HAS TARGET VAL false
IF HAS TARGET VAL VAR false
IF HAS SWITCH VAR %_8.1
IF HAS DISCRIMINANT IntValue(IntValue { int_value: Value { name: "_8.1", address: 0x55a6cc7192f0, is_const: false, is_null: false, is_undef: false, llvm_value: "  %_8.1 = extractvalue { i32, i1 } %0, 1", llvm_type: "i1" } })
IF HAS ENTRY CONDITION (= %_8.1 false)
TEST 123 "  %r.0 = phi i32 [ %_6.0, %bb1 ], [ %_8.0, %bb3 ]"
TEST 123 "  %_8.0 = extractvalue { i32, i1 } %0, 0"
TEST 123 "  %_8.1 = extractvalue { i32, i1 } %0, 1"
TEST 123 "  %0 = call { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %x, i32 4)"
TEST 123 "  %_8.0 = extractvalue { i32, i1 } %0, 0"
TEST 123 "  %0 = call { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %x, i32 4)"
TEST 123 "i32 %x"
TEST 123 "i32 4"
TEST 123 "  %0 = call { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %x, i32 4)"
TEST 123 "  %0 = call { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %x, i32 4)"
IF HAS NUM OPERANDS 3
IF HAS TERMINATOR InstructionValue { instruction_value: Value { name: "", address: 0x55a6cc719130, is_const: false, is_null: false, is_undef: false, llvm_value: "  br i1 %c1, label %bb1, label %bb3", llvm_type: "void" } }
IF HAS NODE "bb3"
TEST 123 "i1 %c1"
IF HAS TARGET VAL false
IF HAS TARGET VAL VAR false
IF HAS SWITCH VAR %c1
IF HAS DISCRIMINANT IntValue(IntValue { int_value: Value { name: "c1", address: 0x55a6cc71dfd0, is_const: false, is_null: false, is_undef: false, llvm_value: "i1 %c1", llvm_type: "i1" } })
IF HAS ENTRY CONDITION (= %c1 false)
IF HAS NUM OPERANDS 3
IF HAS TERMINATOR InstructionValue { instruction_value: Value { name: "", address: 0x55a6cc719130, is_const: false, is_null: false, is_undef: false, llvm_value: "  br i1 %c1, label %bb1, label %bb3", llvm_type: "void" } }
IF HAS NODE "bb1"
TEST 123 "i1 %c1"
IF HAS TARGET VAL true
IF HAS TARGET VAL VAR true
IF HAS SWITCH VAR %c1
IF HAS DISCRIMINANT IntValue(IntValue { int_value: Value { name: "c1", address: 0x55a6cc71dfd0, is_const: false, is_null: false, is_undef: false, llvm_value: "i1 %c1", llvm_type: "i1" } })
IF HAS ENTRY CONDITION (= %c1 true)
IF HAS NUM OPERANDS 3
IF HAS TERMINATOR InstructionValue { instruction_value: Value { name: "", address: 0x55a6cc719130, is_const: false, is_null: false, is_undef: false, llvm_value: "  br i1 %c1, label %bb1, label %bb3", llvm_type: "void" } }
IF HAS NODE "bb3"
TEST 123 "i1 %c1"
IF HAS TARGET VAL false
IF HAS TARGET VAL VAR false
IF HAS SWITCH VAR %c1
IF HAS DISCRIMINANT IntValue(IntValue { int_value: Value { name: "c1", address: 0x55a6cc71dfd0, is_const: false, is_null: false, is_undef: false, llvm_value: "i1 %c1", llvm_type: "i1" } })
IF HAS ENTRY CONDITION (= %c1 false)
TEST 123 "i32 %x"
[2mJan 15 20:18:36.931[0m [34mDEBUG[0m wombat_symx: (declare-fun panic_var () Bool)
(declare-fun common_end () Bool)
(declare-fun %_15 () Bool)
(declare-fun bb11 () Bool)
(declare-fun bb12 () Bool)
(declare-fun %_14.1 () Bool)
(declare-fun panic3 () Bool)
(declare-fun const_true () Bool)
(declare-fun %_16 () Bool)
(declare-fun %x () Int)
(declare-fun %_9.0 () Int)
(declare-fun %_12.1 () Bool)
(declare-fun bb10 () Bool)
(declare-fun panic2 () Bool)
(declare-fun const_1 () Int)
(declare-fun %_12.0 () Int)
(declare-fun %3.1 () Bool)
(declare-fun %3.0 () Int)
(declare-fun %r.0 () Int)
(declare-fun %c2 () Bool)
(declare-fun bb6 () Bool)
(declare-fun const_2 () Int)
(declare-fun %_14.0 () Int)
(declare-fun %2.1 () Bool)
(declare-fun %2.0 () Int)
(declare-fun bb8 () Bool)
(declare-fun %_8.1 () Bool)
(declare-fun panic1 () Bool)
(declare-fun %_6.1 () Bool)
(declare-fun bb5 () Bool)
(declare-fun panic () Bool)
(declare-fun const_3 () Int)
(declare-fun %_6.0 () Int)
(declare-fun %1.1 () Bool)
(declare-fun %1.0 () Int)
(declare-fun %c1 () Bool)
(declare-fun bb1 () Bool)
(declare-fun const_4 () Int)
(declare-fun %_8.0 () Int)
(declare-fun %0.1 () Bool)
(declare-fun %0.0 () Int)
(declare-fun bb3 () Bool)
(declare-fun start () Bool)
(assert (= common_end
   (=> (and true true true true true true true) (and (not panic_var) true))))
(assert (= bb11
   (=> (and true (= %_15 true)) (=> (= panic_var true) (and true common_end)))))
(assert (= bb12
   (=> (and true (= %_15 false)) (=> (= panic_var false) (and true common_end)))))
(assert (= panic3
   (=> (and true (= %_14.1 true)) (=> (= panic_var true) (and true common_end)))))
(assert (= const_true true))
(assert (let ((a!1 (=> (= %_16 (> %_9.0 %x))
               (=> (= %_15 (xor %_16 const_true)) (and true bb12 bb11)))))
  (= bb10 (=> (and true (= %_14.1 false) (= %_12.1 false)) a!1))))
(assert (= panic2
   (=> (and true (= %_12.1 true)) (=> (= panic_var true) (and true common_end)))))
(assert (= const_1 1))
(assert (let ((a!1 (> (- %r.0 const_1)
              (ite (bvslt #x7fffffff #x00000000)
                   (- (bv2int #x7fffffff) 4294967296)
                   (bv2int #x7fffffff))))
      (a!2 (< (- %r.0 const_1)
              (ite (bvslt #x80000000 #x00000000)
                   (- (bv2int #x80000000) 4294967296)
                   (bv2int #x80000000))))
      (a!3 (=> (= %_12.1 %3.1)
               (=> (=> (= %_12.1 false) (= %_9.0 %_12.0))
                   (and true bb10 panic2)))))
(let ((a!4 (=> (and (= %3.0 (- %r.0 const_1)) (= %3.1 (or a!1 a!2)))
               (=> (= %_12.0 %3.0) a!3))))
  (= bb6 (=> (and true (= %c2 true)) a!4)))))
(assert (= const_2 2))
(assert (let ((a!1 (> (- %r.0 const_2)
              (ite (bvslt #x7fffffff #x00000000)
                   (- (bv2int #x7fffffff) 4294967296)
                   (bv2int #x7fffffff))))
      (a!2 (< (- %r.0 const_2)
              (ite (bvslt #x80000000 #x00000000)
                   (- (bv2int #x80000000) 4294967296)
                   (bv2int #x80000000))))
      (a!3 (=> (= %_14.1 %2.1)
               (=> (=> (= %_14.1 false) (= %_9.0 %_14.0))
                   (and true panic3 bb10)))))
(let ((a!4 (=> (and (= %2.0 (- %r.0 const_2)) (= %2.1 (or a!1 a!2)))
               (=> (= %_14.0 %2.0) a!3))))
  (= bb8 (=> (and true (= %c2 false)) a!4)))))
(assert (= panic1
   (=> (and true (= %_8.1 true)) (=> (= panic_var true) (and true common_end)))))
(assert (= bb5 (=> (and true (= %_8.1 false) (= %_6.1 false)) (and true bb8 bb6))))
(assert (= panic
   (=> (and true (= %_6.1 true)) (=> (= panic_var true) (and true common_end)))))
(assert (= const_3 3))
(assert (let ((a!1 (> (+ %x const_3)
              (ite (bvslt #x7fffffff #x00000000)
                   (- (bv2int #x7fffffff) 4294967296)
                   (bv2int #x7fffffff))))
      (a!2 (< (+ %x const_3)
              (ite (bvslt #x80000000 #x00000000)
                   (- (bv2int #x80000000) 4294967296)
                   (bv2int #x80000000))))
      (a!3 (=> (= %_6.1 %1.1)
               (=> (=> (= %_6.1 false) (= %r.0 %_6.0)) (and true bb5 panic)))))
(let ((a!4 (=> (and (= %1.0 (+ %x const_3)) (= %1.1 (or a!1 a!2)))
               (=> (= %_6.0 %1.0) a!3))))
  (= bb1 (=> (and true (= %c1 true)) a!4)))))
(assert (= const_4 4))
(assert (let ((a!1 (> (+ %x const_4)
              (ite (bvslt #x7fffffff #x00000000)
                   (- (bv2int #x7fffffff) 4294967296)
                   (bv2int #x7fffffff))))
      (a!2 (< (+ %x const_4)
              (ite (bvslt #x80000000 #x00000000)
                   (- (bv2int #x80000000) 4294967296)
                   (bv2int #x80000000))))
      (a!3 (=> (= %_8.1 %0.1)
               (=> (=> (= %_8.1 false) (= %r.0 %_8.0)) (and true panic1 bb5)))))
(let ((a!4 (=> (and (= %0.0 (+ %x const_4)) (= %0.1 (or a!1 a!2)))
               (=> (= %_8.0 %0.0) a!3))))
  (= bb3 (=> (and true (= %c1 false)) a!4)))))
(assert (= start (=> true (and true bb1 bb3))))
(assert (let ((a!1 (>= %x
               (ite (bvslt #x80000000 #x00000000)
                    (- (bv2int #x80000000) 4294967296)
                    (bv2int #x80000000))))
      (a!2 (<= %x
               (ite (bvslt #x7fffffff #x00000000)
                    (- (bv2int #x7fffffff) 4294967296)
                    (bv2int #x7fffffff)))))
  (and a!1 a!2)))
(assert (not start))


Function safety: unsafe
[2mJan 15 20:18:37.043[0m [34mDEBUG[0m wombat_symx: 
%_9.0 -> (- 2147483652)
%_16 -> true
panic_var -> true
%_15 -> false
%_12.1 -> false
%_14.1 -> false
%c2 -> false
%3.1 -> false
%_6.1 -> false
%2.0 -> (- 2147483650)
%3.0 -> 0
%2.1 -> true
%1.1 -> false
%x -> 2147483644
%c1 -> false
%_14.0 -> (- 2147483651)
%r.0 -> (- 2147483647)
%_8.1 -> true
%_12.0 -> 1
%0.1 -> true
%_8.0 -> 2147483648
%0.0 -> 2147483648
%_6.0 -> 2147483647
%1.0 -> 2147483647
start -> false
bb3 -> false
const_4 -> 4
bb1 -> true
const_3 -> 3
panic -> true
bb5 -> true
panic1 -> false
bb8 -> true
const_2 -> 2
bb6 -> true
const_1 -> 1
panic2 -> true
bb10 -> true
const_true -> true
panic3 -> true
bb12 -> true
bb11 -> true
common_end -> false


Argument values:
	"c2" = 0
	"x" = 2147483644
	"c1" = 0

************************************


[2mJan 15 20:18:37.051[0m [34mDEBUG[0m wombat_symx: Func param instr: IntValue { int_value: Value { name: "c1", address: 0x55a6cc71e050, is_const: false, is_null: false, is_undef: false, llvm_value: "i1 %c1", llvm_type: "i1" } }
[2mJan 15 20:18:37.051[0m [34mDEBUG[0m wombat_symx: Func param instr: IntValue { int_value: Value { name: "c2", address: 0x55a6cc71e078, is_const: false, is_null: false, is_undef: false, llvm_value: "i1 %c2", llvm_type: "i1" } }
[2mJan 15 20:18:37.051[0m [34mDEBUG[0m wombat_symx: Func param instr: IntValue { int_value: Value { name: "", address: 0x55a6cc71e0a0, is_const: false, is_null: false, is_undef: false, llvm_value: "i32 %0", llvm_type: "i32" } }
TEST 123 "i32 %0"
TEST 123 "  store i32 %0, i32* %x, align 4"
TEST 123 "  %x = alloca i32, align 4"
[2mJan 15 20:18:37.096[0m [34mDEBUG[0m wombat_symx: Function arg names: {"x": "%0", "c1": "%c1", "c2": "%c2"}
Backward Symbolic Execution in test4_foo::safe_foo::h475493205a384ec3
[2mJan 15 20:18:37.096[0m [34mDEBUG[0m wombat_symx: Number of Nodes: 13
[2mJan 15 20:18:37.096[0m [34mDEBUG[0m wombat_symx: Arg count: 3
[2mJan 15 20:18:37.096[0m [34mDEBUG[0m wombat_symx: Basic Blocks:
[2mJan 15 20:18:37.096[0m [34mDEBUG[0m wombat_symx: 	Basic Block: "start"
[2mJan 15 20:18:37.096[0m [34mDEBUG[0m wombat_symx: 		is_cleanup: NO
[2mJan 15 20:18:37.096[0m [34mDEBUG[0m wombat_symx: 		Statement: "\"  %_4 = icmp sgt i32 %0, 2147483643\""
[2mJan 15 20:18:37.096[0m [34mDEBUG[0m wombat_symx: 		Statement: "\"  %spec.select = select i1 %_4, i32 2147483643, i32 %0\""
[2mJan 15 20:18:37.096[0m [34mDEBUG[0m wombat_symx: 		Statement: "\"  br i1 %c1, label %bb3, label %bb5\""
[2mJan 15 20:18:37.096[0m [34mDEBUG[0m wombat_symx: 		Last statement is a terminator
[2mJan 15 20:18:37.096[0m [34mDEBUG[0m wombat_symx: 	Basic Block: "bb5"
[2mJan 15 20:18:37.096[0m [34mDEBUG[0m wombat_symx: 		is_cleanup: NO
[2mJan 15 20:18:37.096[0m [34mDEBUG[0m wombat_symx: 		Statement: "\"  %1 = call { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %spec.select, i32 4)\""
[2mJan 15 20:18:37.096[0m [34mDEBUG[0m wombat_symx: 		Statement: "\"  %_11.0 = extractvalue { i32, i1 } %1, 0\""
[2mJan 15 20:18:37.096[0m [34mDEBUG[0m wombat_symx: 		Statement: "\"  %_11.1 = extractvalue { i32, i1 } %1, 1\""
[2mJan 15 20:18:37.097[0m [34mDEBUG[0m wombat_symx: 		Statement: "\"  br i1 %_11.1, label %panic1, label %bb7, !prof !3\""
[2mJan 15 20:18:37.097[0m [34mDEBUG[0m wombat_symx: 		Last statement is a terminator
[2mJan 15 20:18:37.097[0m [34mDEBUG[0m wombat_symx: 	Basic Block: "bb3"
[2mJan 15 20:18:37.097[0m [34mDEBUG[0m wombat_symx: 		is_cleanup: NO
[2mJan 15 20:18:37.097[0m [34mDEBUG[0m wombat_symx: 		Statement: "\"  %2 = call { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %spec.select, i32 3)\""
[2mJan 15 20:18:37.097[0m [34mDEBUG[0m wombat_symx: 		Statement: "\"  %_9.0 = extractvalue { i32, i1 } %2, 0\""
[2mJan 15 20:18:37.097[0m [34mDEBUG[0m wombat_symx: 		Statement: "\"  %_9.1 = extractvalue { i32, i1 } %2, 1\""
[2mJan 15 20:18:37.097[0m [34mDEBUG[0m wombat_symx: 		Statement: "\"  br i1 %_9.1, label %panic, label %bb7, !prof !3\""
[2mJan 15 20:18:37.097[0m [34mDEBUG[0m wombat_symx: 		Last statement is a terminator
[2mJan 15 20:18:37.097[0m [34mDEBUG[0m wombat_symx: 	Basic Block: "panic"
[2mJan 15 20:18:37.097[0m [34mDEBUG[0m wombat_symx: 		is_cleanup: YES
[2mJan 15 20:18:37.097[0m [34mDEBUG[0m wombat_symx: 		Statement: "\"  call void @_ZN4core9panicking5panic17h4241c5ccea17facaE([0 x i8]* noundef nonnull align 1 bitcast ([28 x i8]* @str.0 to [0 x i8]*), i64 28, %\\\"core::panic::location::Location\\\"* noundef align 8 dereferenceable(24) bitcast (<{ i8*, [16 x i8] }>* @alloc46 to %\\\"core::panic::location::Location\\\"*)) #7\""
[2mJan 15 20:18:37.097[0m [34mDEBUG[0m wombat_symx: 		Statement: "\"  unreachable\""
[2mJan 15 20:18:37.097[0m [34mDEBUG[0m wombat_symx: 		Last statement is a terminator
[2mJan 15 20:18:37.097[0m [34mDEBUG[0m wombat_symx: 	Basic Block: "bb7"
[2mJan 15 20:18:37.097[0m [34mDEBUG[0m wombat_symx: 		is_cleanup: NO
[2mJan 15 20:18:37.097[0m [34mDEBUG[0m wombat_symx: 		Statement: "\"  %r.0 = phi i32 [ %_9.0, %bb3 ], [ %_11.0, %bb5 ]\""
[2mJan 15 20:18:37.097[0m [34mDEBUG[0m wombat_symx: 		Statement: "\"  br i1 %c2, label %bb8, label %bb10\""
[2mJan 15 20:18:37.097[0m [34mDEBUG[0m wombat_symx: 		Last statement is a terminator
[2mJan 15 20:18:37.097[0m [34mDEBUG[0m wombat_symx: 	Basic Block: "panic1"
[2mJan 15 20:18:37.097[0m [34mDEBUG[0m wombat_symx: 		is_cleanup: YES
[2mJan 15 20:18:37.097[0m [34mDEBUG[0m wombat_symx: 		Statement: "\"  call void @_ZN4core9panicking5panic17h4241c5ccea17facaE([0 x i8]* noundef nonnull align 1 bitcast ([28 x i8]* @str.0 to [0 x i8]*), i64 28, %\\\"core::panic::location::Location\\\"* noundef align 8 dereferenceable(24) bitcast (<{ i8*, [16 x i8] }>* @alloc48 to %\\\"core::panic::location::Location\\\"*)) #7\""
[2mJan 15 20:18:37.097[0m [34mDEBUG[0m wombat_symx: 		Statement: "\"  unreachable\""
[2mJan 15 20:18:37.097[0m [34mDEBUG[0m wombat_symx: 		Last statement is a terminator
[2mJan 15 20:18:37.097[0m [34mDEBUG[0m wombat_symx: 	Basic Block: "bb10"
[2mJan 15 20:18:37.097[0m [34mDEBUG[0m wombat_symx: 		is_cleanup: NO
[2mJan 15 20:18:37.097[0m [34mDEBUG[0m wombat_symx: 		Statement: "\"  %3 = call { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %r.0, i32 2)\""
[2mJan 15 20:18:37.098[0m [34mDEBUG[0m wombat_symx: 		Statement: "\"  %_17.0 = extractvalue { i32, i1 } %3, 0\""
[2mJan 15 20:18:37.098[0m [34mDEBUG[0m wombat_symx: 		Statement: "\"  %_17.1 = extractvalue { i32, i1 } %3, 1\""
[2mJan 15 20:18:37.098[0m [34mDEBUG[0m wombat_symx: 		Statement: "\"  br i1 %_17.1, label %panic3, label %bb12, !prof !3\""
[2mJan 15 20:18:37.098[0m [34mDEBUG[0m wombat_symx: 		Last statement is a terminator
[2mJan 15 20:18:37.098[0m [34mDEBUG[0m wombat_symx: 	Basic Block: "bb8"
[2mJan 15 20:18:37.098[0m [34mDEBUG[0m wombat_symx: 		is_cleanup: NO
[2mJan 15 20:18:37.098[0m [34mDEBUG[0m wombat_symx: 		Statement: "\"  %4 = call { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %r.0, i32 1)\""
[2mJan 15 20:18:37.098[0m [34mDEBUG[0m wombat_symx: 		Statement: "\"  %_15.0 = extractvalue { i32, i1 } %4, 0\""
[2mJan 15 20:18:37.098[0m [34mDEBUG[0m wombat_symx: 		Statement: "\"  %_15.1 = extractvalue { i32, i1 } %4, 1\""
[2mJan 15 20:18:37.098[0m [34mDEBUG[0m wombat_symx: 		Statement: "\"  br i1 %_15.1, label %panic2, label %bb12, !prof !3\""
[2mJan 15 20:18:37.098[0m [34mDEBUG[0m wombat_symx: 		Last statement is a terminator
[2mJan 15 20:18:37.098[0m [34mDEBUG[0m wombat_symx: 	Basic Block: "panic2"
[2mJan 15 20:18:37.098[0m [34mDEBUG[0m wombat_symx: 		is_cleanup: YES
[2mJan 15 20:18:37.098[0m [34mDEBUG[0m wombat_symx: 		Statement: "\"  call void @_ZN4core9panicking5panic17h4241c5ccea17facaE([0 x i8]* noundef nonnull align 1 bitcast ([33 x i8]* @str.1 to [0 x i8]*), i64 33, %\\\"core::panic::location::Location\\\"* noundef align 8 dereferenceable(24) bitcast (<{ i8*, [16 x i8] }>* @alloc50 to %\\\"core::panic::location::Location\\\"*)) #7\""
[2mJan 15 20:18:37.098[0m [34mDEBUG[0m wombat_symx: 		Statement: "\"  unreachable\""
[2mJan 15 20:18:37.098[0m [34mDEBUG[0m wombat_symx: 		Last statement is a terminator
[2mJan 15 20:18:37.098[0m [34mDEBUG[0m wombat_symx: 	Basic Block: "bb12"
[2mJan 15 20:18:37.098[0m [34mDEBUG[0m wombat_symx: 		is_cleanup: NO
[2mJan 15 20:18:37.098[0m [34mDEBUG[0m wombat_symx: 		Statement: "\"  %_12.0 = phi i32 [ %_15.0, %bb8 ], [ %_17.0, %bb10 ]\""
[2mJan 15 20:18:37.098[0m [34mDEBUG[0m wombat_symx: 		Statement: "\"  %_19 = icmp sgt i32 %_12.0, %spec.select\""
[2mJan 15 20:18:37.098[0m [34mDEBUG[0m wombat_symx: 		Statement: "\"  %_18 = xor i1 %_19, true\""
[2mJan 15 20:18:37.098[0m [34mDEBUG[0m wombat_symx: 		Statement: "\"  br i1 %_18, label %bb13, label %bb14\""
[2mJan 15 20:18:37.098[0m [34mDEBUG[0m wombat_symx: 		Last statement is a terminator
[2mJan 15 20:18:37.098[0m [34mDEBUG[0m wombat_symx: 	Basic Block: "panic3"
[2mJan 15 20:18:37.098[0m [34mDEBUG[0m wombat_symx: 		is_cleanup: YES
[2mJan 15 20:18:37.098[0m [34mDEBUG[0m wombat_symx: 		Statement: "\"  call void @_ZN4core9panicking5panic17h4241c5ccea17facaE([0 x i8]* noundef nonnull align 1 bitcast ([33 x i8]* @str.1 to [0 x i8]*), i64 33, %\\\"core::panic::location::Location\\\"* noundef align 8 dereferenceable(24) bitcast (<{ i8*, [16 x i8] }>* @alloc52 to %\\\"core::panic::location::Location\\\"*)) #7\""
[2mJan 15 20:18:37.098[0m [34mDEBUG[0m wombat_symx: 		Statement: "\"  unreachable\""
[2mJan 15 20:18:37.099[0m [34mDEBUG[0m wombat_symx: 		Last statement is a terminator
[2mJan 15 20:18:37.099[0m [34mDEBUG[0m wombat_symx: 	Basic Block: "bb14"
[2mJan 15 20:18:37.099[0m [34mDEBUG[0m wombat_symx: 		is_cleanup: NO
[2mJan 15 20:18:37.099[0m [34mDEBUG[0m wombat_symx: 		Statement: "\"  ret i32 %_12.0\""
[2mJan 15 20:18:37.099[0m [34mDEBUG[0m wombat_symx: 		Last statement is a terminator
[2mJan 15 20:18:37.099[0m [34mDEBUG[0m wombat_symx: 	Basic Block: "bb13"
[2mJan 15 20:18:37.099[0m [34mDEBUG[0m wombat_symx: 		is_cleanup: YES
[2mJan 15 20:18:37.099[0m [34mDEBUG[0m wombat_symx: 		Statement: "\"  call void @_ZN4core9panicking5panic17h4241c5ccea17facaE([0 x i8]* noundef nonnull align 1 bitcast (<{ [23 x i8] }>* @alloc53 to [0 x i8]*), i64 23, %\\\"core::panic::location::Location\\\"* noundef align 8 dereferenceable(24) bitcast (<{ i8*, [16 x i8] }>* @alloc55 to %\\\"core::panic::location::Location\\\"*)) #7\""
[2mJan 15 20:18:37.099[0m [34mDEBUG[0m wombat_symx: 		Statement: "\"  unreachable\""
[2mJan 15 20:18:37.099[0m [34mDEBUG[0m wombat_symx: 		Last statement is a terminator
[2mJan 15 20:18:37.099[0m [34mDEBUG[0m wombat_symx: 
[2mJan 15 20:18:37.099[0m [34mDEBUG[0m wombat_symx: Start node: "start"
IF STATEMENT
terminator is InstructionValue { instruction_value: Value { name: "", address: 0x55a6cc725aa0, is_const: false, is_null: false, is_undef: false, llvm_value: "  br i1 %c1, label %bb3, label %bb5", llvm_type: "void" } }
Operand 0 is Some(Left(IntValue(IntValue { int_value: Value { name: "c1", address: 0x55a6cc71e050, is_const: false, is_null: false, is_undef: false, llvm_value: "i1 %c1", llvm_type: "i1" } })))
Operand 1 is Some(Right(BasicBlock { address: 0x55a6cc7250b0, is_const: false, llvm_value: "\nbb5:                                              ; preds = %start\n  %1 = call { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %spec.select, i32 4)\n  %_11.0 = extractvalue { i32, i1 } %1, 0\n  %_11.1 = extractvalue { i32, i1 } %1, 1\n  br i1 %_11.1, label %panic1, label %bb7, !prof !3\n", llvm_type: "label" }))
Operand 2 is Some(Right(BasicBlock { address: 0x55a6cc725100, is_const: false, llvm_value: "\nbb3:                                              ; preds = %start\n  %2 = call { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %spec.select, i32 3)\n  %_9.0 = extractvalue { i32, i1 } %2, 0\n  %_9.1 = extractvalue { i32, i1 } %2, 1\n  br i1 %_9.1, label %panic, label %bb7, !prof !3\n", llvm_type: "label" }))
IF STATEMENT
terminator is InstructionValue { instruction_value: Value { name: "", address: 0x55a6cc725f60, is_const: false, is_null: false, is_undef: false, llvm_value: "  br i1 %_11.1, label %panic1, label %bb7, !prof !3", llvm_type: "void" } }
Operand 0 is Some(Left(IntValue(IntValue { int_value: Value { name: "_11.1", address: 0x55a6cc725dd0, is_const: false, is_null: false, is_undef: false, llvm_value: "  %_11.1 = extractvalue { i32, i1 } %1, 1", llvm_type: "i1" } })))
Operand 1 is Some(Right(BasicBlock { address: 0x55a6cc7251f0, is_const: false, llvm_value: "\nbb7:                                              ; preds = %bb5, %bb3\n  %r.0 = phi i32 [ %_9.0, %bb3 ], [ %_11.0, %bb5 ]\n  br i1 %c2, label %bb8, label %bb10\n", llvm_type: "label" }))
Operand 2 is Some(Right(BasicBlock { address: 0x55a6cc725290, is_const: false, llvm_value: "\npanic1:                                           ; preds = %bb5\n  call void @_ZN4core9panicking5panic17h4241c5ccea17facaE([0 x i8]* noundef nonnull align 1 bitcast ([28 x i8]* @str.0 to [0 x i8]*), i64 28, %\"core::panic::location::Location\"* noundef align 8 dereferenceable(24) bitcast (<{ i8*, [16 x i8] }>* @alloc48 to %\"core::panic::location::Location\"*)) #7\n  unreachable\n", llvm_type: "label" }))
IF STATEMENT
terminator is InstructionValue { instruction_value: Value { name: "", address: 0x55a6cc726320, is_const: false, is_null: false, is_undef: false, llvm_value: "  br i1 %_9.1, label %panic, label %bb7, !prof !3", llvm_type: "void" } }
Operand 0 is Some(Left(IntValue(IntValue { int_value: Value { name: "_9.1", address: 0x55a6cc726190, is_const: false, is_null: false, is_undef: false, llvm_value: "  %_9.1 = extractvalue { i32, i1 } %2, 1", llvm_type: "i1" } })))
Operand 1 is Some(Right(BasicBlock { address: 0x55a6cc7251f0, is_const: false, llvm_value: "\nbb7:                                              ; preds = %bb5, %bb3\n  %r.0 = phi i32 [ %_9.0, %bb3 ], [ %_11.0, %bb5 ]\n  br i1 %c2, label %bb8, label %bb10\n", llvm_type: "label" }))
Operand 2 is Some(Right(BasicBlock { address: 0x55a6cc7251a0, is_const: false, llvm_value: "\npanic:                                            ; preds = %bb3\n  call void @_ZN4core9panicking5panic17h4241c5ccea17facaE([0 x i8]* noundef nonnull align 1 bitcast ([28 x i8]* @str.0 to [0 x i8]*), i64 28, %\"core::panic::location::Location\"* noundef align 8 dereferenceable(24) bitcast (<{ i8*, [16 x i8] }>* @alloc46 to %\"core::panic::location::Location\"*)) #7\n  unreachable\n", llvm_type: "label" }))
IF STATEMENT
terminator is InstructionValue { instruction_value: Value { name: "", address: 0x55a6cc7264d0, is_const: false, is_null: false, is_undef: false, llvm_value: "  br i1 %c2, label %bb8, label %bb10", llvm_type: "void" } }
Operand 0 is Some(Left(IntValue(IntValue { int_value: Value { name: "c2", address: 0x55a6cc71e078, is_const: false, is_null: false, is_undef: false, llvm_value: "i1 %c2", llvm_type: "i1" } })))
Operand 1 is Some(Right(BasicBlock { address: 0x55a6cc7252e0, is_const: false, llvm_value: "\nbb10:                                             ; preds = %bb7\n  %3 = call { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %r.0, i32 2)\n  %_17.0 = extractvalue { i32, i1 } %3, 0\n  %_17.1 = extractvalue { i32, i1 } %3, 1\n  br i1 %_17.1, label %panic3, label %bb12, !prof !3\n", llvm_type: "label" }))
Operand 2 is Some(Right(BasicBlock { address: 0x55a6cc725330, is_const: false, llvm_value: "\nbb8:                                              ; preds = %bb7\n  %4 = call { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %r.0, i32 1)\n  %_15.0 = extractvalue { i32, i1 } %4, 0\n  %_15.1 = extractvalue { i32, i1 } %4, 1\n  br i1 %_15.1, label %panic2, label %bb12, !prof !3\n", llvm_type: "label" }))
IF STATEMENT
terminator is InstructionValue { instruction_value: Value { name: "", address: 0x55a6cc726ac0, is_const: false, is_null: false, is_undef: false, llvm_value: "  br i1 %_17.1, label %panic3, label %bb12, !prof !3", llvm_type: "void" } }
Operand 0 is Some(Left(IntValue(IntValue { int_value: Value { name: "_17.1", address: 0x55a6cc726930, is_const: false, is_null: false, is_undef: false, llvm_value: "  %_17.1 = extractvalue { i32, i1 } %3, 1", llvm_type: "i1" } })))
Operand 1 is Some(Right(BasicBlock { address: 0x55a6cc725420, is_const: false, llvm_value: "\nbb12:                                             ; preds = %bb10, %bb8\n  %_12.0 = phi i32 [ %_15.0, %bb8 ], [ %_17.0, %bb10 ]\n  %_19 = icmp sgt i32 %_12.0, %spec.select\n  %_18 = xor i1 %_19, true\n  br i1 %_18, label %bb13, label %bb14\n", llvm_type: "label" }))
Operand 2 is Some(Right(BasicBlock { address: 0x55a6cc7254c0, is_const: false, llvm_value: "\npanic3:                                           ; preds = %bb10\n  call void @_ZN4core9panicking5panic17h4241c5ccea17facaE([0 x i8]* noundef nonnull align 1 bitcast ([33 x i8]* @str.1 to [0 x i8]*), i64 33, %\"core::panic::location::Location\"* noundef align 8 dereferenceable(24) bitcast (<{ i8*, [16 x i8] }>* @alloc52 to %\"core::panic::location::Location\"*)) #7\n  unreachable\n", llvm_type: "label" }))
IF STATEMENT
terminator is InstructionValue { instruction_value: Value { name: "", address: 0x55a6cc726e80, is_const: false, is_null: false, is_undef: false, llvm_value: "  br i1 %_15.1, label %panic2, label %bb12, !prof !3", llvm_type: "void" } }
Operand 0 is Some(Left(IntValue(IntValue { int_value: Value { name: "_15.1", address: 0x55a6cc726cf0, is_const: false, is_null: false, is_undef: false, llvm_value: "  %_15.1 = extractvalue { i32, i1 } %4, 1", llvm_type: "i1" } })))
Operand 1 is Some(Right(BasicBlock { address: 0x55a6cc725420, is_const: false, llvm_value: "\nbb12:                                             ; preds = %bb10, %bb8\n  %_12.0 = phi i32 [ %_15.0, %bb8 ], [ %_17.0, %bb10 ]\n  %_19 = icmp sgt i32 %_12.0, %spec.select\n  %_18 = xor i1 %_19, true\n  br i1 %_18, label %bb13, label %bb14\n", llvm_type: "label" }))
Operand 2 is Some(Right(BasicBlock { address: 0x55a6cc7253d0, is_const: false, llvm_value: "\npanic2:                                           ; preds = %bb8\n  call void @_ZN4core9panicking5panic17h4241c5ccea17facaE([0 x i8]* noundef nonnull align 1 bitcast ([33 x i8]* @str.1 to [0 x i8]*), i64 33, %\"core::panic::location::Location\"* noundef align 8 dereferenceable(24) bitcast (<{ i8*, [16 x i8] }>* @alloc50 to %\"core::panic::location::Location\"*)) #7\n  unreachable\n", llvm_type: "label" }))
IF STATEMENT
terminator is InstructionValue { instruction_value: Value { name: "", address: 0x55a6cc727460, is_const: false, is_null: false, is_undef: false, llvm_value: "  br i1 %_18, label %bb13, label %bb14", llvm_type: "void" } }
Operand 0 is Some(Left(IntValue(IntValue { int_value: Value { name: "_18", address: 0x55a6cc7273b0, is_const: false, is_null: false, is_undef: false, llvm_value: "  %_18 = xor i1 %_19, true", llvm_type: "i1" } })))
Operand 1 is Some(Right(BasicBlock { address: 0x55a6cc725510, is_const: false, llvm_value: "\nbb14:                                             ; preds = %bb12\n  ret i32 %_12.0\n", llvm_type: "label" }))
Operand 2 is Some(Right(BasicBlock { address: 0x55a6cc725560, is_const: false, llvm_value: "\nbb13:                                             ; preds = %bb12\n  call void @_ZN4core9panicking5panic17h4241c5ccea17facaE([0 x i8]* noundef nonnull align 1 bitcast (<{ [23 x i8] }>* @alloc53 to [0 x i8]*), i64 23, %\"core::panic::location::Location\"* noundef align 8 dereferenceable(24) bitcast (<{ i8*, [16 x i8] }>* @alloc55 to %\"core::panic::location::Location\"*)) #7\n  unreachable\n", llvm_type: "label" }))
[2mJan 15 20:18:37.100[0m [34mDEBUG[0m wombat_symx: 	Successor to start node: "bb5"
[2mJan 15 20:18:37.100[0m [34mDEBUG[0m wombat_symx: 	Successor to start node: "bb3"
IF STATEMENT
terminator is InstructionValue { instruction_value: Value { name: "", address: 0x55a6cc725aa0, is_const: false, is_null: false, is_undef: false, llvm_value: "  br i1 %c1, label %bb3, label %bb5", llvm_type: "void" } }
Operand 0 is Some(Left(IntValue(IntValue { int_value: Value { name: "c1", address: 0x55a6cc71e050, is_const: false, is_null: false, is_undef: false, llvm_value: "i1 %c1", llvm_type: "i1" } })))
Operand 1 is Some(Right(BasicBlock { address: 0x55a6cc7250b0, is_const: false, llvm_value: "\nbb5:                                              ; preds = %start\n  %1 = call { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %spec.select, i32 4)\n  %_11.0 = extractvalue { i32, i1 } %1, 0\n  %_11.1 = extractvalue { i32, i1 } %1, 1\n  br i1 %_11.1, label %panic1, label %bb7, !prof !3\n", llvm_type: "label" }))
Operand 2 is Some(Right(BasicBlock { address: 0x55a6cc725100, is_const: false, llvm_value: "\nbb3:                                              ; preds = %start\n  %2 = call { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %spec.select, i32 3)\n  %_9.0 = extractvalue { i32, i1 } %2, 0\n  %_9.1 = extractvalue { i32, i1 } %2, 1\n  br i1 %_9.1, label %panic, label %bb7, !prof !3\n", llvm_type: "label" }))
IF STATEMENT
terminator is InstructionValue { instruction_value: Value { name: "", address: 0x55a6cc725f60, is_const: false, is_null: false, is_undef: false, llvm_value: "  br i1 %_11.1, label %panic1, label %bb7, !prof !3", llvm_type: "void" } }
Operand 0 is Some(Left(IntValue(IntValue { int_value: Value { name: "_11.1", address: 0x55a6cc725dd0, is_const: false, is_null: false, is_undef: false, llvm_value: "  %_11.1 = extractvalue { i32, i1 } %1, 1", llvm_type: "i1" } })))
Operand 1 is Some(Right(BasicBlock { address: 0x55a6cc7251f0, is_const: false, llvm_value: "\nbb7:                                              ; preds = %bb5, %bb3\n  %r.0 = phi i32 [ %_9.0, %bb3 ], [ %_11.0, %bb5 ]\n  br i1 %c2, label %bb8, label %bb10\n", llvm_type: "label" }))
Operand 2 is Some(Right(BasicBlock { address: 0x55a6cc725290, is_const: false, llvm_value: "\npanic1:                                           ; preds = %bb5\n  call void @_ZN4core9panicking5panic17h4241c5ccea17facaE([0 x i8]* noundef nonnull align 1 bitcast ([28 x i8]* @str.0 to [0 x i8]*), i64 28, %\"core::panic::location::Location\"* noundef align 8 dereferenceable(24) bitcast (<{ i8*, [16 x i8] }>* @alloc48 to %\"core::panic::location::Location\"*)) #7\n  unreachable\n", llvm_type: "label" }))
IF STATEMENT
terminator is InstructionValue { instruction_value: Value { name: "", address: 0x55a6cc726320, is_const: false, is_null: false, is_undef: false, llvm_value: "  br i1 %_9.1, label %panic, label %bb7, !prof !3", llvm_type: "void" } }
Operand 0 is Some(Left(IntValue(IntValue { int_value: Value { name: "_9.1", address: 0x55a6cc726190, is_const: false, is_null: false, is_undef: false, llvm_value: "  %_9.1 = extractvalue { i32, i1 } %2, 1", llvm_type: "i1" } })))
Operand 1 is Some(Right(BasicBlock { address: 0x55a6cc7251f0, is_const: false, llvm_value: "\nbb7:                                              ; preds = %bb5, %bb3\n  %r.0 = phi i32 [ %_9.0, %bb3 ], [ %_11.0, %bb5 ]\n  br i1 %c2, label %bb8, label %bb10\n", llvm_type: "label" }))
Operand 2 is Some(Right(BasicBlock { address: 0x55a6cc7251a0, is_const: false, llvm_value: "\npanic:                                            ; preds = %bb3\n  call void @_ZN4core9panicking5panic17h4241c5ccea17facaE([0 x i8]* noundef nonnull align 1 bitcast ([28 x i8]* @str.0 to [0 x i8]*), i64 28, %\"core::panic::location::Location\"* noundef align 8 dereferenceable(24) bitcast (<{ i8*, [16 x i8] }>* @alloc46 to %\"core::panic::location::Location\"*)) #7\n  unreachable\n", llvm_type: "label" }))
IF STATEMENT
terminator is InstructionValue { instruction_value: Value { name: "", address: 0x55a6cc7264d0, is_const: false, is_null: false, is_undef: false, llvm_value: "  br i1 %c2, label %bb8, label %bb10", llvm_type: "void" } }
Operand 0 is Some(Left(IntValue(IntValue { int_value: Value { name: "c2", address: 0x55a6cc71e078, is_const: false, is_null: false, is_undef: false, llvm_value: "i1 %c2", llvm_type: "i1" } })))
Operand 1 is Some(Right(BasicBlock { address: 0x55a6cc7252e0, is_const: false, llvm_value: "\nbb10:                                             ; preds = %bb7\n  %3 = call { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %r.0, i32 2)\n  %_17.0 = extractvalue { i32, i1 } %3, 0\n  %_17.1 = extractvalue { i32, i1 } %3, 1\n  br i1 %_17.1, label %panic3, label %bb12, !prof !3\n", llvm_type: "label" }))
Operand 2 is Some(Right(BasicBlock { address: 0x55a6cc725330, is_const: false, llvm_value: "\nbb8:                                              ; preds = %bb7\n  %4 = call { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %r.0, i32 1)\n  %_15.0 = extractvalue { i32, i1 } %4, 0\n  %_15.1 = extractvalue { i32, i1 } %4, 1\n  br i1 %_15.1, label %panic2, label %bb12, !prof !3\n", llvm_type: "label" }))
IF STATEMENT
terminator is InstructionValue { instruction_value: Value { name: "", address: 0x55a6cc726ac0, is_const: false, is_null: false, is_undef: false, llvm_value: "  br i1 %_17.1, label %panic3, label %bb12, !prof !3", llvm_type: "void" } }
Operand 0 is Some(Left(IntValue(IntValue { int_value: Value { name: "_17.1", address: 0x55a6cc726930, is_const: false, is_null: false, is_undef: false, llvm_value: "  %_17.1 = extractvalue { i32, i1 } %3, 1", llvm_type: "i1" } })))
Operand 1 is Some(Right(BasicBlock { address: 0x55a6cc725420, is_const: false, llvm_value: "\nbb12:                                             ; preds = %bb10, %bb8\n  %_12.0 = phi i32 [ %_15.0, %bb8 ], [ %_17.0, %bb10 ]\n  %_19 = icmp sgt i32 %_12.0, %spec.select\n  %_18 = xor i1 %_19, true\n  br i1 %_18, label %bb13, label %bb14\n", llvm_type: "label" }))
Operand 2 is Some(Right(BasicBlock { address: 0x55a6cc7254c0, is_const: false, llvm_value: "\npanic3:                                           ; preds = %bb10\n  call void @_ZN4core9panicking5panic17h4241c5ccea17facaE([0 x i8]* noundef nonnull align 1 bitcast ([33 x i8]* @str.1 to [0 x i8]*), i64 33, %\"core::panic::location::Location\"* noundef align 8 dereferenceable(24) bitcast (<{ i8*, [16 x i8] }>* @alloc52 to %\"core::panic::location::Location\"*)) #7\n  unreachable\n", llvm_type: "label" }))
IF STATEMENT
terminator is InstructionValue { instruction_value: Value { name: "", address: 0x55a6cc726e80, is_const: false, is_null: false, is_undef: false, llvm_value: "  br i1 %_15.1, label %panic2, label %bb12, !prof !3", llvm_type: "void" } }
Operand 0 is Some(Left(IntValue(IntValue { int_value: Value { name: "_15.1", address: 0x55a6cc726cf0, is_const: false, is_null: false, is_undef: false, llvm_value: "  %_15.1 = extractvalue { i32, i1 } %4, 1", llvm_type: "i1" } })))
Operand 1 is Some(Right(BasicBlock { address: 0x55a6cc725420, is_const: false, llvm_value: "\nbb12:                                             ; preds = %bb10, %bb8\n  %_12.0 = phi i32 [ %_15.0, %bb8 ], [ %_17.0, %bb10 ]\n  %_19 = icmp sgt i32 %_12.0, %spec.select\n  %_18 = xor i1 %_19, true\n  br i1 %_18, label %bb13, label %bb14\n", llvm_type: "label" }))
Operand 2 is Some(Right(BasicBlock { address: 0x55a6cc7253d0, is_const: false, llvm_value: "\npanic2:                                           ; preds = %bb8\n  call void @_ZN4core9panicking5panic17h4241c5ccea17facaE([0 x i8]* noundef nonnull align 1 bitcast ([33 x i8]* @str.1 to [0 x i8]*), i64 33, %\"core::panic::location::Location\"* noundef align 8 dereferenceable(24) bitcast (<{ i8*, [16 x i8] }>* @alloc50 to %\"core::panic::location::Location\"*)) #7\n  unreachable\n", llvm_type: "label" }))
IF STATEMENT
terminator is InstructionValue { instruction_value: Value { name: "", address: 0x55a6cc727460, is_const: false, is_null: false, is_undef: false, llvm_value: "  br i1 %_18, label %bb13, label %bb14", llvm_type: "void" } }
Operand 0 is Some(Left(IntValue(IntValue { int_value: Value { name: "_18", address: 0x55a6cc7273b0, is_const: false, is_null: false, is_undef: false, llvm_value: "  %_18 = xor i1 %_19, true", llvm_type: "i1" } })))
Operand 1 is Some(Right(BasicBlock { address: 0x55a6cc725510, is_const: false, llvm_value: "\nbb14:                                             ; preds = %bb12\n  ret i32 %_12.0\n", llvm_type: "label" }))
Operand 2 is Some(Right(BasicBlock { address: 0x55a6cc725560, is_const: false, llvm_value: "\nbb13:                                             ; preds = %bb12\n  call void @_ZN4core9panicking5panic17h4241c5ccea17facaE([0 x i8]* noundef nonnull align 1 bitcast (<{ [23 x i8] }>* @alloc53 to [0 x i8]*), i64 23, %\"core::panic::location::Location\"* noundef align 8 dereferenceable(24) bitcast (<{ i8*, [16 x i8] }>* @alloc55 to %\"core::panic::location::Location\"*)) #7\n  unreachable\n", llvm_type: "label" }))
[2mJan 15 20:18:37.101[0m [34mDEBUG[0m wombat_symx: Forward edges:	{"bb3": {"bb7", "panic"}, "panic3": {"common_end"}, "bb10": {"bb12", "panic3"}, "bb5": {"panic1", "bb7"}, "start": {"bb5", "bb3"}, "bb7": {"bb10", "bb8"}, "panic1": {"common_end"}, "bb8": {"bb12", "panic2"}, "bb12": {"bb13", "bb14"}, "bb13": {"common_end"}, "panic2": {"common_end"}, "bb14": {"common_end"}, "panic": {"common_end"}}
IF STATEMENT
terminator is InstructionValue { instruction_value: Value { name: "", address: 0x55a6cc725aa0, is_const: false, is_null: false, is_undef: false, llvm_value: "  br i1 %c1, label %bb3, label %bb5", llvm_type: "void" } }
Operand 0 is Some(Left(IntValue(IntValue { int_value: Value { name: "c1", address: 0x55a6cc71e050, is_const: false, is_null: false, is_undef: false, llvm_value: "i1 %c1", llvm_type: "i1" } })))
Operand 1 is Some(Right(BasicBlock { address: 0x55a6cc7250b0, is_const: false, llvm_value: "\nbb5:                                              ; preds = %start\n  %1 = call { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %spec.select, i32 4)\n  %_11.0 = extractvalue { i32, i1 } %1, 0\n  %_11.1 = extractvalue { i32, i1 } %1, 1\n  br i1 %_11.1, label %panic1, label %bb7, !prof !3\n", llvm_type: "label" }))
Operand 2 is Some(Right(BasicBlock { address: 0x55a6cc725100, is_const: false, llvm_value: "\nbb3:                                              ; preds = %start\n  %2 = call { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %spec.select, i32 3)\n  %_9.0 = extractvalue { i32, i1 } %2, 0\n  %_9.1 = extractvalue { i32, i1 } %2, 1\n  br i1 %_9.1, label %panic, label %bb7, !prof !3\n", llvm_type: "label" }))
IF STATEMENT
terminator is InstructionValue { instruction_value: Value { name: "", address: 0x55a6cc725f60, is_const: false, is_null: false, is_undef: false, llvm_value: "  br i1 %_11.1, label %panic1, label %bb7, !prof !3", llvm_type: "void" } }
Operand 0 is Some(Left(IntValue(IntValue { int_value: Value { name: "_11.1", address: 0x55a6cc725dd0, is_const: false, is_null: false, is_undef: false, llvm_value: "  %_11.1 = extractvalue { i32, i1 } %1, 1", llvm_type: "i1" } })))
Operand 1 is Some(Right(BasicBlock { address: 0x55a6cc7251f0, is_const: false, llvm_value: "\nbb7:                                              ; preds = %bb5, %bb3\n  %r.0 = phi i32 [ %_9.0, %bb3 ], [ %_11.0, %bb5 ]\n  br i1 %c2, label %bb8, label %bb10\n", llvm_type: "label" }))
Operand 2 is Some(Right(BasicBlock { address: 0x55a6cc725290, is_const: false, llvm_value: "\npanic1:                                           ; preds = %bb5\n  call void @_ZN4core9panicking5panic17h4241c5ccea17facaE([0 x i8]* noundef nonnull align 1 bitcast ([28 x i8]* @str.0 to [0 x i8]*), i64 28, %\"core::panic::location::Location\"* noundef align 8 dereferenceable(24) bitcast (<{ i8*, [16 x i8] }>* @alloc48 to %\"core::panic::location::Location\"*)) #7\n  unreachable\n", llvm_type: "label" }))
IF STATEMENT
terminator is InstructionValue { instruction_value: Value { name: "", address: 0x55a6cc726320, is_const: false, is_null: false, is_undef: false, llvm_value: "  br i1 %_9.1, label %panic, label %bb7, !prof !3", llvm_type: "void" } }
Operand 0 is Some(Left(IntValue(IntValue { int_value: Value { name: "_9.1", address: 0x55a6cc726190, is_const: false, is_null: false, is_undef: false, llvm_value: "  %_9.1 = extractvalue { i32, i1 } %2, 1", llvm_type: "i1" } })))
Operand 1 is Some(Right(BasicBlock { address: 0x55a6cc7251f0, is_const: false, llvm_value: "\nbb7:                                              ; preds = %bb5, %bb3\n  %r.0 = phi i32 [ %_9.0, %bb3 ], [ %_11.0, %bb5 ]\n  br i1 %c2, label %bb8, label %bb10\n", llvm_type: "label" }))
Operand 2 is Some(Right(BasicBlock { address: 0x55a6cc7251a0, is_const: false, llvm_value: "\npanic:                                            ; preds = %bb3\n  call void @_ZN4core9panicking5panic17h4241c5ccea17facaE([0 x i8]* noundef nonnull align 1 bitcast ([28 x i8]* @str.0 to [0 x i8]*), i64 28, %\"core::panic::location::Location\"* noundef align 8 dereferenceable(24) bitcast (<{ i8*, [16 x i8] }>* @alloc46 to %\"core::panic::location::Location\"*)) #7\n  unreachable\n", llvm_type: "label" }))
IF STATEMENT
terminator is InstructionValue { instruction_value: Value { name: "", address: 0x55a6cc7264d0, is_const: false, is_null: false, is_undef: false, llvm_value: "  br i1 %c2, label %bb8, label %bb10", llvm_type: "void" } }
Operand 0 is Some(Left(IntValue(IntValue { int_value: Value { name: "c2", address: 0x55a6cc71e078, is_const: false, is_null: false, is_undef: false, llvm_value: "i1 %c2", llvm_type: "i1" } })))
Operand 1 is Some(Right(BasicBlock { address: 0x55a6cc7252e0, is_const: false, llvm_value: "\nbb10:                                             ; preds = %bb7\n  %3 = call { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %r.0, i32 2)\n  %_17.0 = extractvalue { i32, i1 } %3, 0\n  %_17.1 = extractvalue { i32, i1 } %3, 1\n  br i1 %_17.1, label %panic3, label %bb12, !prof !3\n", llvm_type: "label" }))
Operand 2 is Some(Right(BasicBlock { address: 0x55a6cc725330, is_const: false, llvm_value: "\nbb8:                                              ; preds = %bb7\n  %4 = call { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %r.0, i32 1)\n  %_15.0 = extractvalue { i32, i1 } %4, 0\n  %_15.1 = extractvalue { i32, i1 } %4, 1\n  br i1 %_15.1, label %panic2, label %bb12, !prof !3\n", llvm_type: "label" }))
IF STATEMENT
terminator is InstructionValue { instruction_value: Value { name: "", address: 0x55a6cc726ac0, is_const: false, is_null: false, is_undef: false, llvm_value: "  br i1 %_17.1, label %panic3, label %bb12, !prof !3", llvm_type: "void" } }
Operand 0 is Some(Left(IntValue(IntValue { int_value: Value { name: "_17.1", address: 0x55a6cc726930, is_const: false, is_null: false, is_undef: false, llvm_value: "  %_17.1 = extractvalue { i32, i1 } %3, 1", llvm_type: "i1" } })))
Operand 1 is Some(Right(BasicBlock { address: 0x55a6cc725420, is_const: false, llvm_value: "\nbb12:                                             ; preds = %bb10, %bb8\n  %_12.0 = phi i32 [ %_15.0, %bb8 ], [ %_17.0, %bb10 ]\n  %_19 = icmp sgt i32 %_12.0, %spec.select\n  %_18 = xor i1 %_19, true\n  br i1 %_18, label %bb13, label %bb14\n", llvm_type: "label" }))
Operand 2 is Some(Right(BasicBlock { address: 0x55a6cc7254c0, is_const: false, llvm_value: "\npanic3:                                           ; preds = %bb10\n  call void @_ZN4core9panicking5panic17h4241c5ccea17facaE([0 x i8]* noundef nonnull align 1 bitcast ([33 x i8]* @str.1 to [0 x i8]*), i64 33, %\"core::panic::location::Location\"* noundef align 8 dereferenceable(24) bitcast (<{ i8*, [16 x i8] }>* @alloc52 to %\"core::panic::location::Location\"*)) #7\n  unreachable\n", llvm_type: "label" }))
IF STATEMENT
terminator is InstructionValue { instruction_value: Value { name: "", address: 0x55a6cc726e80, is_const: false, is_null: false, is_undef: false, llvm_value: "  br i1 %_15.1, label %panic2, label %bb12, !prof !3", llvm_type: "void" } }
Operand 0 is Some(Left(IntValue(IntValue { int_value: Value { name: "_15.1", address: 0x55a6cc726cf0, is_const: false, is_null: false, is_undef: false, llvm_value: "  %_15.1 = extractvalue { i32, i1 } %4, 1", llvm_type: "i1" } })))
Operand 1 is Some(Right(BasicBlock { address: 0x55a6cc725420, is_const: false, llvm_value: "\nbb12:                                             ; preds = %bb10, %bb8\n  %_12.0 = phi i32 [ %_15.0, %bb8 ], [ %_17.0, %bb10 ]\n  %_19 = icmp sgt i32 %_12.0, %spec.select\n  %_18 = xor i1 %_19, true\n  br i1 %_18, label %bb13, label %bb14\n", llvm_type: "label" }))
Operand 2 is Some(Right(BasicBlock { address: 0x55a6cc7253d0, is_const: false, llvm_value: "\npanic2:                                           ; preds = %bb8\n  call void @_ZN4core9panicking5panic17h4241c5ccea17facaE([0 x i8]* noundef nonnull align 1 bitcast ([33 x i8]* @str.1 to [0 x i8]*), i64 33, %\"core::panic::location::Location\"* noundef align 8 dereferenceable(24) bitcast (<{ i8*, [16 x i8] }>* @alloc50 to %\"core::panic::location::Location\"*)) #7\n  unreachable\n", llvm_type: "label" }))
IF STATEMENT
terminator is InstructionValue { instruction_value: Value { name: "", address: 0x55a6cc727460, is_const: false, is_null: false, is_undef: false, llvm_value: "  br i1 %_18, label %bb13, label %bb14", llvm_type: "void" } }
Operand 0 is Some(Left(IntValue(IntValue { int_value: Value { name: "_18", address: 0x55a6cc7273b0, is_const: false, is_null: false, is_undef: false, llvm_value: "  %_18 = xor i1 %_19, true", llvm_type: "i1" } })))
Operand 1 is Some(Right(BasicBlock { address: 0x55a6cc725510, is_const: false, llvm_value: "\nbb14:                                             ; preds = %bb12\n  ret i32 %_12.0\n", llvm_type: "label" }))
Operand 2 is Some(Right(BasicBlock { address: 0x55a6cc725560, is_const: false, llvm_value: "\nbb13:                                             ; preds = %bb12\n  call void @_ZN4core9panicking5panic17h4241c5ccea17facaE([0 x i8]* noundef nonnull align 1 bitcast (<{ [23 x i8] }>* @alloc53 to [0 x i8]*), i64 23, %\"core::panic::location::Location\"* noundef align 8 dereferenceable(24) bitcast (<{ i8*, [16 x i8] }>* @alloc55 to %\"core::panic::location::Location\"*)) #7\n  unreachable\n", llvm_type: "label" }))
[2mJan 15 20:18:37.101[0m [34mDEBUG[0m wombat_symx: Backward edges:	{"bb5": {"start"}, "panic1": {"bb5"}, "start": {}, "bb8": {"bb7"}, "bb13": {"bb12"}, "panic": {"bb3"}, "bb3": {"start"}, "bb7": {"bb5", "bb3"}, "panic3": {"bb10"}, "panic2": {"bb8"}, "bb12": {"bb10", "bb8"}, "bb14": {"bb12"}, "common_end": {"bb14", "panic1", "panic3", "bb13", "panic", "panic2"}, "bb10": {"bb7"}}
IF STATEMENT
terminator is InstructionValue { instruction_value: Value { name: "", address: 0x55a6cc725aa0, is_const: false, is_null: false, is_undef: false, llvm_value: "  br i1 %c1, label %bb3, label %bb5", llvm_type: "void" } }
Operand 0 is Some(Left(IntValue(IntValue { int_value: Value { name: "c1", address: 0x55a6cc71e050, is_const: false, is_null: false, is_undef: false, llvm_value: "i1 %c1", llvm_type: "i1" } })))
Operand 1 is Some(Right(BasicBlock { address: 0x55a6cc7250b0, is_const: false, llvm_value: "\nbb5:                                              ; preds = %start\n  %1 = call { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %spec.select, i32 4)\n  %_11.0 = extractvalue { i32, i1 } %1, 0\n  %_11.1 = extractvalue { i32, i1 } %1, 1\n  br i1 %_11.1, label %panic1, label %bb7, !prof !3\n", llvm_type: "label" }))
Operand 2 is Some(Right(BasicBlock { address: 0x55a6cc725100, is_const: false, llvm_value: "\nbb3:                                              ; preds = %start\n  %2 = call { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %spec.select, i32 3)\n  %_9.0 = extractvalue { i32, i1 } %2, 0\n  %_9.1 = extractvalue { i32, i1 } %2, 1\n  br i1 %_9.1, label %panic, label %bb7, !prof !3\n", llvm_type: "label" }))
IF STATEMENT
terminator is InstructionValue { instruction_value: Value { name: "", address: 0x55a6cc725f60, is_const: false, is_null: false, is_undef: false, llvm_value: "  br i1 %_11.1, label %panic1, label %bb7, !prof !3", llvm_type: "void" } }
Operand 0 is Some(Left(IntValue(IntValue { int_value: Value { name: "_11.1", address: 0x55a6cc725dd0, is_const: false, is_null: false, is_undef: false, llvm_value: "  %_11.1 = extractvalue { i32, i1 } %1, 1", llvm_type: "i1" } })))
Operand 1 is Some(Right(BasicBlock { address: 0x55a6cc7251f0, is_const: false, llvm_value: "\nbb7:                                              ; preds = %bb5, %bb3\n  %r.0 = phi i32 [ %_9.0, %bb3 ], [ %_11.0, %bb5 ]\n  br i1 %c2, label %bb8, label %bb10\n", llvm_type: "label" }))
Operand 2 is Some(Right(BasicBlock { address: 0x55a6cc725290, is_const: false, llvm_value: "\npanic1:                                           ; preds = %bb5\n  call void @_ZN4core9panicking5panic17h4241c5ccea17facaE([0 x i8]* noundef nonnull align 1 bitcast ([28 x i8]* @str.0 to [0 x i8]*), i64 28, %\"core::panic::location::Location\"* noundef align 8 dereferenceable(24) bitcast (<{ i8*, [16 x i8] }>* @alloc48 to %\"core::panic::location::Location\"*)) #7\n  unreachable\n", llvm_type: "label" }))
IF STATEMENT
terminator is InstructionValue { instruction_value: Value { name: "", address: 0x55a6cc726320, is_const: false, is_null: false, is_undef: false, llvm_value: "  br i1 %_9.1, label %panic, label %bb7, !prof !3", llvm_type: "void" } }
Operand 0 is Some(Left(IntValue(IntValue { int_value: Value { name: "_9.1", address: 0x55a6cc726190, is_const: false, is_null: false, is_undef: false, llvm_value: "  %_9.1 = extractvalue { i32, i1 } %2, 1", llvm_type: "i1" } })))
Operand 1 is Some(Right(BasicBlock { address: 0x55a6cc7251f0, is_const: false, llvm_value: "\nbb7:                                              ; preds = %bb5, %bb3\n  %r.0 = phi i32 [ %_9.0, %bb3 ], [ %_11.0, %bb5 ]\n  br i1 %c2, label %bb8, label %bb10\n", llvm_type: "label" }))
Operand 2 is Some(Right(BasicBlock { address: 0x55a6cc7251a0, is_const: false, llvm_value: "\npanic:                                            ; preds = %bb3\n  call void @_ZN4core9panicking5panic17h4241c5ccea17facaE([0 x i8]* noundef nonnull align 1 bitcast ([28 x i8]* @str.0 to [0 x i8]*), i64 28, %\"core::panic::location::Location\"* noundef align 8 dereferenceable(24) bitcast (<{ i8*, [16 x i8] }>* @alloc46 to %\"core::panic::location::Location\"*)) #7\n  unreachable\n", llvm_type: "label" }))
IF STATEMENT
terminator is InstructionValue { instruction_value: Value { name: "", address: 0x55a6cc7264d0, is_const: false, is_null: false, is_undef: false, llvm_value: "  br i1 %c2, label %bb8, label %bb10", llvm_type: "void" } }
Operand 0 is Some(Left(IntValue(IntValue { int_value: Value { name: "c2", address: 0x55a6cc71e078, is_const: false, is_null: false, is_undef: false, llvm_value: "i1 %c2", llvm_type: "i1" } })))
Operand 1 is Some(Right(BasicBlock { address: 0x55a6cc7252e0, is_const: false, llvm_value: "\nbb10:                                             ; preds = %bb7\n  %3 = call { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %r.0, i32 2)\n  %_17.0 = extractvalue { i32, i1 } %3, 0\n  %_17.1 = extractvalue { i32, i1 } %3, 1\n  br i1 %_17.1, label %panic3, label %bb12, !prof !3\n", llvm_type: "label" }))
Operand 2 is Some(Right(BasicBlock { address: 0x55a6cc725330, is_const: false, llvm_value: "\nbb8:                                              ; preds = %bb7\n  %4 = call { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %r.0, i32 1)\n  %_15.0 = extractvalue { i32, i1 } %4, 0\n  %_15.1 = extractvalue { i32, i1 } %4, 1\n  br i1 %_15.1, label %panic2, label %bb12, !prof !3\n", llvm_type: "label" }))
IF STATEMENT
terminator is InstructionValue { instruction_value: Value { name: "", address: 0x55a6cc726ac0, is_const: false, is_null: false, is_undef: false, llvm_value: "  br i1 %_17.1, label %panic3, label %bb12, !prof !3", llvm_type: "void" } }
Operand 0 is Some(Left(IntValue(IntValue { int_value: Value { name: "_17.1", address: 0x55a6cc726930, is_const: false, is_null: false, is_undef: false, llvm_value: "  %_17.1 = extractvalue { i32, i1 } %3, 1", llvm_type: "i1" } })))
Operand 1 is Some(Right(BasicBlock { address: 0x55a6cc725420, is_const: false, llvm_value: "\nbb12:                                             ; preds = %bb10, %bb8\n  %_12.0 = phi i32 [ %_15.0, %bb8 ], [ %_17.0, %bb10 ]\n  %_19 = icmp sgt i32 %_12.0, %spec.select\n  %_18 = xor i1 %_19, true\n  br i1 %_18, label %bb13, label %bb14\n", llvm_type: "label" }))
Operand 2 is Some(Right(BasicBlock { address: 0x55a6cc7254c0, is_const: false, llvm_value: "\npanic3:                                           ; preds = %bb10\n  call void @_ZN4core9panicking5panic17h4241c5ccea17facaE([0 x i8]* noundef nonnull align 1 bitcast ([33 x i8]* @str.1 to [0 x i8]*), i64 33, %\"core::panic::location::Location\"* noundef align 8 dereferenceable(24) bitcast (<{ i8*, [16 x i8] }>* @alloc52 to %\"core::panic::location::Location\"*)) #7\n  unreachable\n", llvm_type: "label" }))
IF STATEMENT
terminator is InstructionValue { instruction_value: Value { name: "", address: 0x55a6cc726e80, is_const: false, is_null: false, is_undef: false, llvm_value: "  br i1 %_15.1, label %panic2, label %bb12, !prof !3", llvm_type: "void" } }
Operand 0 is Some(Left(IntValue(IntValue { int_value: Value { name: "_15.1", address: 0x55a6cc726cf0, is_const: false, is_null: false, is_undef: false, llvm_value: "  %_15.1 = extractvalue { i32, i1 } %4, 1", llvm_type: "i1" } })))
Operand 1 is Some(Right(BasicBlock { address: 0x55a6cc725420, is_const: false, llvm_value: "\nbb12:                                             ; preds = %bb10, %bb8\n  %_12.0 = phi i32 [ %_15.0, %bb8 ], [ %_17.0, %bb10 ]\n  %_19 = icmp sgt i32 %_12.0, %spec.select\n  %_18 = xor i1 %_19, true\n  br i1 %_18, label %bb13, label %bb14\n", llvm_type: "label" }))
Operand 2 is Some(Right(BasicBlock { address: 0x55a6cc7253d0, is_const: false, llvm_value: "\npanic2:                                           ; preds = %bb8\n  call void @_ZN4core9panicking5panic17h4241c5ccea17facaE([0 x i8]* noundef nonnull align 1 bitcast ([33 x i8]* @str.1 to [0 x i8]*), i64 33, %\"core::panic::location::Location\"* noundef align 8 dereferenceable(24) bitcast (<{ i8*, [16 x i8] }>* @alloc50 to %\"core::panic::location::Location\"*)) #7\n  unreachable\n", llvm_type: "label" }))
IF STATEMENT
terminator is InstructionValue { instruction_value: Value { name: "", address: 0x55a6cc727460, is_const: false, is_null: false, is_undef: false, llvm_value: "  br i1 %_18, label %bb13, label %bb14", llvm_type: "void" } }
Operand 0 is Some(Left(IntValue(IntValue { int_value: Value { name: "_18", address: 0x55a6cc7273b0, is_const: false, is_null: false, is_undef: false, llvm_value: "  %_18 = xor i1 %_19, true", llvm_type: "i1" } })))
Operand 1 is Some(Right(BasicBlock { address: 0x55a6cc725510, is_const: false, llvm_value: "\nbb14:                                             ; preds = %bb12\n  ret i32 %_12.0\n", llvm_type: "label" }))
Operand 2 is Some(Right(BasicBlock { address: 0x55a6cc725560, is_const: false, llvm_value: "\nbb13:                                             ; preds = %bb12\n  call void @_ZN4core9panicking5panic17h4241c5ccea17facaE([0 x i8]* noundef nonnull align 1 bitcast (<{ [23 x i8] }>* @alloc53 to [0 x i8]*), i64 23, %\"core::panic::location::Location\"* noundef align 8 dereferenceable(24) bitcast (<{ i8*, [16 x i8] }>* @alloc55 to %\"core::panic::location::Location\"*)) #7\n  unreachable\n", llvm_type: "label" }))
IF STATEMENT
terminator is InstructionValue { instruction_value: Value { name: "", address: 0x55a6cc725aa0, is_const: false, is_null: false, is_undef: false, llvm_value: "  br i1 %c1, label %bb3, label %bb5", llvm_type: "void" } }
Operand 0 is Some(Left(IntValue(IntValue { int_value: Value { name: "c1", address: 0x55a6cc71e050, is_const: false, is_null: false, is_undef: false, llvm_value: "i1 %c1", llvm_type: "i1" } })))
Operand 1 is Some(Right(BasicBlock { address: 0x55a6cc7250b0, is_const: false, llvm_value: "\nbb5:                                              ; preds = %start\n  %1 = call { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %spec.select, i32 4)\n  %_11.0 = extractvalue { i32, i1 } %1, 0\n  %_11.1 = extractvalue { i32, i1 } %1, 1\n  br i1 %_11.1, label %panic1, label %bb7, !prof !3\n", llvm_type: "label" }))
Operand 2 is Some(Right(BasicBlock { address: 0x55a6cc725100, is_const: false, llvm_value: "\nbb3:                                              ; preds = %start\n  %2 = call { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %spec.select, i32 3)\n  %_9.0 = extractvalue { i32, i1 } %2, 0\n  %_9.1 = extractvalue { i32, i1 } %2, 1\n  br i1 %_9.1, label %panic, label %bb7, !prof !3\n", llvm_type: "label" }))
IF STATEMENT
terminator is InstructionValue { instruction_value: Value { name: "", address: 0x55a6cc725f60, is_const: false, is_null: false, is_undef: false, llvm_value: "  br i1 %_11.1, label %panic1, label %bb7, !prof !3", llvm_type: "void" } }
Operand 0 is Some(Left(IntValue(IntValue { int_value: Value { name: "_11.1", address: 0x55a6cc725dd0, is_const: false, is_null: false, is_undef: false, llvm_value: "  %_11.1 = extractvalue { i32, i1 } %1, 1", llvm_type: "i1" } })))
Operand 1 is Some(Right(BasicBlock { address: 0x55a6cc7251f0, is_const: false, llvm_value: "\nbb7:                                              ; preds = %bb5, %bb3\n  %r.0 = phi i32 [ %_9.0, %bb3 ], [ %_11.0, %bb5 ]\n  br i1 %c2, label %bb8, label %bb10\n", llvm_type: "label" }))
Operand 2 is Some(Right(BasicBlock { address: 0x55a6cc725290, is_const: false, llvm_value: "\npanic1:                                           ; preds = %bb5\n  call void @_ZN4core9panicking5panic17h4241c5ccea17facaE([0 x i8]* noundef nonnull align 1 bitcast ([28 x i8]* @str.0 to [0 x i8]*), i64 28, %\"core::panic::location::Location\"* noundef align 8 dereferenceable(24) bitcast (<{ i8*, [16 x i8] }>* @alloc48 to %\"core::panic::location::Location\"*)) #7\n  unreachable\n", llvm_type: "label" }))
IF STATEMENT
terminator is InstructionValue { instruction_value: Value { name: "", address: 0x55a6cc726320, is_const: false, is_null: false, is_undef: false, llvm_value: "  br i1 %_9.1, label %panic, label %bb7, !prof !3", llvm_type: "void" } }
Operand 0 is Some(Left(IntValue(IntValue { int_value: Value { name: "_9.1", address: 0x55a6cc726190, is_const: false, is_null: false, is_undef: false, llvm_value: "  %_9.1 = extractvalue { i32, i1 } %2, 1", llvm_type: "i1" } })))
Operand 1 is Some(Right(BasicBlock { address: 0x55a6cc7251f0, is_const: false, llvm_value: "\nbb7:                                              ; preds = %bb5, %bb3\n  %r.0 = phi i32 [ %_9.0, %bb3 ], [ %_11.0, %bb5 ]\n  br i1 %c2, label %bb8, label %bb10\n", llvm_type: "label" }))
Operand 2 is Some(Right(BasicBlock { address: 0x55a6cc7251a0, is_const: false, llvm_value: "\npanic:                                            ; preds = %bb3\n  call void @_ZN4core9panicking5panic17h4241c5ccea17facaE([0 x i8]* noundef nonnull align 1 bitcast ([28 x i8]* @str.0 to [0 x i8]*), i64 28, %\"core::panic::location::Location\"* noundef align 8 dereferenceable(24) bitcast (<{ i8*, [16 x i8] }>* @alloc46 to %\"core::panic::location::Location\"*)) #7\n  unreachable\n", llvm_type: "label" }))
IF STATEMENT
terminator is InstructionValue { instruction_value: Value { name: "", address: 0x55a6cc7264d0, is_const: false, is_null: false, is_undef: false, llvm_value: "  br i1 %c2, label %bb8, label %bb10", llvm_type: "void" } }
Operand 0 is Some(Left(IntValue(IntValue { int_value: Value { name: "c2", address: 0x55a6cc71e078, is_const: false, is_null: false, is_undef: false, llvm_value: "i1 %c2", llvm_type: "i1" } })))
Operand 1 is Some(Right(BasicBlock { address: 0x55a6cc7252e0, is_const: false, llvm_value: "\nbb10:                                             ; preds = %bb7\n  %3 = call { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %r.0, i32 2)\n  %_17.0 = extractvalue { i32, i1 } %3, 0\n  %_17.1 = extractvalue { i32, i1 } %3, 1\n  br i1 %_17.1, label %panic3, label %bb12, !prof !3\n", llvm_type: "label" }))
Operand 2 is Some(Right(BasicBlock { address: 0x55a6cc725330, is_const: false, llvm_value: "\nbb8:                                              ; preds = %bb7\n  %4 = call { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %r.0, i32 1)\n  %_15.0 = extractvalue { i32, i1 } %4, 0\n  %_15.1 = extractvalue { i32, i1 } %4, 1\n  br i1 %_15.1, label %panic2, label %bb12, !prof !3\n", llvm_type: "label" }))
IF STATEMENT
terminator is InstructionValue { instruction_value: Value { name: "", address: 0x55a6cc726ac0, is_const: false, is_null: false, is_undef: false, llvm_value: "  br i1 %_17.1, label %panic3, label %bb12, !prof !3", llvm_type: "void" } }
Operand 0 is Some(Left(IntValue(IntValue { int_value: Value { name: "_17.1", address: 0x55a6cc726930, is_const: false, is_null: false, is_undef: false, llvm_value: "  %_17.1 = extractvalue { i32, i1 } %3, 1", llvm_type: "i1" } })))
Operand 1 is Some(Right(BasicBlock { address: 0x55a6cc725420, is_const: false, llvm_value: "\nbb12:                                             ; preds = %bb10, %bb8\n  %_12.0 = phi i32 [ %_15.0, %bb8 ], [ %_17.0, %bb10 ]\n  %_19 = icmp sgt i32 %_12.0, %spec.select\n  %_18 = xor i1 %_19, true\n  br i1 %_18, label %bb13, label %bb14\n", llvm_type: "label" }))
Operand 2 is Some(Right(BasicBlock { address: 0x55a6cc7254c0, is_const: false, llvm_value: "\npanic3:                                           ; preds = %bb10\n  call void @_ZN4core9panicking5panic17h4241c5ccea17facaE([0 x i8]* noundef nonnull align 1 bitcast ([33 x i8]* @str.1 to [0 x i8]*), i64 33, %\"core::panic::location::Location\"* noundef align 8 dereferenceable(24) bitcast (<{ i8*, [16 x i8] }>* @alloc52 to %\"core::panic::location::Location\"*)) #7\n  unreachable\n", llvm_type: "label" }))
IF STATEMENT
terminator is InstructionValue { instruction_value: Value { name: "", address: 0x55a6cc726e80, is_const: false, is_null: false, is_undef: false, llvm_value: "  br i1 %_15.1, label %panic2, label %bb12, !prof !3", llvm_type: "void" } }
Operand 0 is Some(Left(IntValue(IntValue { int_value: Value { name: "_15.1", address: 0x55a6cc726cf0, is_const: false, is_null: false, is_undef: false, llvm_value: "  %_15.1 = extractvalue { i32, i1 } %4, 1", llvm_type: "i1" } })))
Operand 1 is Some(Right(BasicBlock { address: 0x55a6cc725420, is_const: false, llvm_value: "\nbb12:                                             ; preds = %bb10, %bb8\n  %_12.0 = phi i32 [ %_15.0, %bb8 ], [ %_17.0, %bb10 ]\n  %_19 = icmp sgt i32 %_12.0, %spec.select\n  %_18 = xor i1 %_19, true\n  br i1 %_18, label %bb13, label %bb14\n", llvm_type: "label" }))
Operand 2 is Some(Right(BasicBlock { address: 0x55a6cc7253d0, is_const: false, llvm_value: "\npanic2:                                           ; preds = %bb8\n  call void @_ZN4core9panicking5panic17h4241c5ccea17facaE([0 x i8]* noundef nonnull align 1 bitcast ([33 x i8]* @str.1 to [0 x i8]*), i64 33, %\"core::panic::location::Location\"* noundef align 8 dereferenceable(24) bitcast (<{ i8*, [16 x i8] }>* @alloc50 to %\"core::panic::location::Location\"*)) #7\n  unreachable\n", llvm_type: "label" }))
IF STATEMENT
terminator is InstructionValue { instruction_value: Value { name: "", address: 0x55a6cc727460, is_const: false, is_null: false, is_undef: false, llvm_value: "  br i1 %_18, label %bb13, label %bb14", llvm_type: "void" } }
Operand 0 is Some(Left(IntValue(IntValue { int_value: Value { name: "_18", address: 0x55a6cc7273b0, is_const: false, is_null: false, is_undef: false, llvm_value: "  %_18 = xor i1 %_19, true", llvm_type: "i1" } })))
Operand 1 is Some(Right(BasicBlock { address: 0x55a6cc725510, is_const: false, llvm_value: "\nbb14:                                             ; preds = %bb12\n  ret i32 %_12.0\n", llvm_type: "label" }))
Operand 2 is Some(Right(BasicBlock { address: 0x55a6cc725560, is_const: false, llvm_value: "\nbb13:                                             ; preds = %bb12\n  call void @_ZN4core9panicking5panic17h4241c5ccea17facaE([0 x i8]* noundef nonnull align 1 bitcast (<{ [23 x i8] }>* @alloc53 to [0 x i8]*), i64 23, %\"core::panic::location::Location\"* noundef align 8 dereferenceable(24) bitcast (<{ i8*, [16 x i8] }>* @alloc55 to %\"core::panic::location::Location\"*)) #7\n  unreachable\n", llvm_type: "label" }))
[2mJan 15 20:18:37.103[0m [34mDEBUG[0m wombat_symx: Forward sorted nodes:	["start", "bb5", "bb3", "panic", "bb7", "panic1", "bb10", "bb8", "panic2", "bb12", "panic3", "bb14", "bb13", "common_end"]
IF STATEMENT
terminator is InstructionValue { instruction_value: Value { name: "", address: 0x55a6cc725aa0, is_const: false, is_null: false, is_undef: false, llvm_value: "  br i1 %c1, label %bb3, label %bb5", llvm_type: "void" } }
Operand 0 is Some(Left(IntValue(IntValue { int_value: Value { name: "c1", address: 0x55a6cc71e050, is_const: false, is_null: false, is_undef: false, llvm_value: "i1 %c1", llvm_type: "i1" } })))
Operand 1 is Some(Right(BasicBlock { address: 0x55a6cc7250b0, is_const: false, llvm_value: "\nbb5:                                              ; preds = %start\n  %1 = call { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %spec.select, i32 4)\n  %_11.0 = extractvalue { i32, i1 } %1, 0\n  %_11.1 = extractvalue { i32, i1 } %1, 1\n  br i1 %_11.1, label %panic1, label %bb7, !prof !3\n", llvm_type: "label" }))
Operand 2 is Some(Right(BasicBlock { address: 0x55a6cc725100, is_const: false, llvm_value: "\nbb3:                                              ; preds = %start\n  %2 = call { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %spec.select, i32 3)\n  %_9.0 = extractvalue { i32, i1 } %2, 0\n  %_9.1 = extractvalue { i32, i1 } %2, 1\n  br i1 %_9.1, label %panic, label %bb7, !prof !3\n", llvm_type: "label" }))
IF STATEMENT
terminator is InstructionValue { instruction_value: Value { name: "", address: 0x55a6cc725f60, is_const: false, is_null: false, is_undef: false, llvm_value: "  br i1 %_11.1, label %panic1, label %bb7, !prof !3", llvm_type: "void" } }
Operand 0 is Some(Left(IntValue(IntValue { int_value: Value { name: "_11.1", address: 0x55a6cc725dd0, is_const: false, is_null: false, is_undef: false, llvm_value: "  %_11.1 = extractvalue { i32, i1 } %1, 1", llvm_type: "i1" } })))
Operand 1 is Some(Right(BasicBlock { address: 0x55a6cc7251f0, is_const: false, llvm_value: "\nbb7:                                              ; preds = %bb5, %bb3\n  %r.0 = phi i32 [ %_9.0, %bb3 ], [ %_11.0, %bb5 ]\n  br i1 %c2, label %bb8, label %bb10\n", llvm_type: "label" }))
Operand 2 is Some(Right(BasicBlock { address: 0x55a6cc725290, is_const: false, llvm_value: "\npanic1:                                           ; preds = %bb5\n  call void @_ZN4core9panicking5panic17h4241c5ccea17facaE([0 x i8]* noundef nonnull align 1 bitcast ([28 x i8]* @str.0 to [0 x i8]*), i64 28, %\"core::panic::location::Location\"* noundef align 8 dereferenceable(24) bitcast (<{ i8*, [16 x i8] }>* @alloc48 to %\"core::panic::location::Location\"*)) #7\n  unreachable\n", llvm_type: "label" }))
IF STATEMENT
terminator is InstructionValue { instruction_value: Value { name: "", address: 0x55a6cc726320, is_const: false, is_null: false, is_undef: false, llvm_value: "  br i1 %_9.1, label %panic, label %bb7, !prof !3", llvm_type: "void" } }
Operand 0 is Some(Left(IntValue(IntValue { int_value: Value { name: "_9.1", address: 0x55a6cc726190, is_const: false, is_null: false, is_undef: false, llvm_value: "  %_9.1 = extractvalue { i32, i1 } %2, 1", llvm_type: "i1" } })))
Operand 1 is Some(Right(BasicBlock { address: 0x55a6cc7251f0, is_const: false, llvm_value: "\nbb7:                                              ; preds = %bb5, %bb3\n  %r.0 = phi i32 [ %_9.0, %bb3 ], [ %_11.0, %bb5 ]\n  br i1 %c2, label %bb8, label %bb10\n", llvm_type: "label" }))
Operand 2 is Some(Right(BasicBlock { address: 0x55a6cc7251a0, is_const: false, llvm_value: "\npanic:                                            ; preds = %bb3\n  call void @_ZN4core9panicking5panic17h4241c5ccea17facaE([0 x i8]* noundef nonnull align 1 bitcast ([28 x i8]* @str.0 to [0 x i8]*), i64 28, %\"core::panic::location::Location\"* noundef align 8 dereferenceable(24) bitcast (<{ i8*, [16 x i8] }>* @alloc46 to %\"core::panic::location::Location\"*)) #7\n  unreachable\n", llvm_type: "label" }))
IF STATEMENT
terminator is InstructionValue { instruction_value: Value { name: "", address: 0x55a6cc7264d0, is_const: false, is_null: false, is_undef: false, llvm_value: "  br i1 %c2, label %bb8, label %bb10", llvm_type: "void" } }
Operand 0 is Some(Left(IntValue(IntValue { int_value: Value { name: "c2", address: 0x55a6cc71e078, is_const: false, is_null: false, is_undef: false, llvm_value: "i1 %c2", llvm_type: "i1" } })))
Operand 1 is Some(Right(BasicBlock { address: 0x55a6cc7252e0, is_const: false, llvm_value: "\nbb10:                                             ; preds = %bb7\n  %3 = call { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %r.0, i32 2)\n  %_17.0 = extractvalue { i32, i1 } %3, 0\n  %_17.1 = extractvalue { i32, i1 } %3, 1\n  br i1 %_17.1, label %panic3, label %bb12, !prof !3\n", llvm_type: "label" }))
Operand 2 is Some(Right(BasicBlock { address: 0x55a6cc725330, is_const: false, llvm_value: "\nbb8:                                              ; preds = %bb7\n  %4 = call { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %r.0, i32 1)\n  %_15.0 = extractvalue { i32, i1 } %4, 0\n  %_15.1 = extractvalue { i32, i1 } %4, 1\n  br i1 %_15.1, label %panic2, label %bb12, !prof !3\n", llvm_type: "label" }))
IF STATEMENT
terminator is InstructionValue { instruction_value: Value { name: "", address: 0x55a6cc726ac0, is_const: false, is_null: false, is_undef: false, llvm_value: "  br i1 %_17.1, label %panic3, label %bb12, !prof !3", llvm_type: "void" } }
Operand 0 is Some(Left(IntValue(IntValue { int_value: Value { name: "_17.1", address: 0x55a6cc726930, is_const: false, is_null: false, is_undef: false, llvm_value: "  %_17.1 = extractvalue { i32, i1 } %3, 1", llvm_type: "i1" } })))
Operand 1 is Some(Right(BasicBlock { address: 0x55a6cc725420, is_const: false, llvm_value: "\nbb12:                                             ; preds = %bb10, %bb8\n  %_12.0 = phi i32 [ %_15.0, %bb8 ], [ %_17.0, %bb10 ]\n  %_19 = icmp sgt i32 %_12.0, %spec.select\n  %_18 = xor i1 %_19, true\n  br i1 %_18, label %bb13, label %bb14\n", llvm_type: "label" }))
Operand 2 is Some(Right(BasicBlock { address: 0x55a6cc7254c0, is_const: false, llvm_value: "\npanic3:                                           ; preds = %bb10\n  call void @_ZN4core9panicking5panic17h4241c5ccea17facaE([0 x i8]* noundef nonnull align 1 bitcast ([33 x i8]* @str.1 to [0 x i8]*), i64 33, %\"core::panic::location::Location\"* noundef align 8 dereferenceable(24) bitcast (<{ i8*, [16 x i8] }>* @alloc52 to %\"core::panic::location::Location\"*)) #7\n  unreachable\n", llvm_type: "label" }))
IF STATEMENT
terminator is InstructionValue { instruction_value: Value { name: "", address: 0x55a6cc726e80, is_const: false, is_null: false, is_undef: false, llvm_value: "  br i1 %_15.1, label %panic2, label %bb12, !prof !3", llvm_type: "void" } }
Operand 0 is Some(Left(IntValue(IntValue { int_value: Value { name: "_15.1", address: 0x55a6cc726cf0, is_const: false, is_null: false, is_undef: false, llvm_value: "  %_15.1 = extractvalue { i32, i1 } %4, 1", llvm_type: "i1" } })))
Operand 1 is Some(Right(BasicBlock { address: 0x55a6cc725420, is_const: false, llvm_value: "\nbb12:                                             ; preds = %bb10, %bb8\n  %_12.0 = phi i32 [ %_15.0, %bb8 ], [ %_17.0, %bb10 ]\n  %_19 = icmp sgt i32 %_12.0, %spec.select\n  %_18 = xor i1 %_19, true\n  br i1 %_18, label %bb13, label %bb14\n", llvm_type: "label" }))
Operand 2 is Some(Right(BasicBlock { address: 0x55a6cc7253d0, is_const: false, llvm_value: "\npanic2:                                           ; preds = %bb8\n  call void @_ZN4core9panicking5panic17h4241c5ccea17facaE([0 x i8]* noundef nonnull align 1 bitcast ([33 x i8]* @str.1 to [0 x i8]*), i64 33, %\"core::panic::location::Location\"* noundef align 8 dereferenceable(24) bitcast (<{ i8*, [16 x i8] }>* @alloc50 to %\"core::panic::location::Location\"*)) #7\n  unreachable\n", llvm_type: "label" }))
IF STATEMENT
terminator is InstructionValue { instruction_value: Value { name: "", address: 0x55a6cc727460, is_const: false, is_null: false, is_undef: false, llvm_value: "  br i1 %_18, label %bb13, label %bb14", llvm_type: "void" } }
Operand 0 is Some(Left(IntValue(IntValue { int_value: Value { name: "_18", address: 0x55a6cc7273b0, is_const: false, is_null: false, is_undef: false, llvm_value: "  %_18 = xor i1 %_19, true", llvm_type: "i1" } })))
Operand 1 is Some(Right(BasicBlock { address: 0x55a6cc725510, is_const: false, llvm_value: "\nbb14:                                             ; preds = %bb12\n  ret i32 %_12.0\n", llvm_type: "label" }))
Operand 2 is Some(Right(BasicBlock { address: 0x55a6cc725560, is_const: false, llvm_value: "\nbb13:                                             ; preds = %bb12\n  call void @_ZN4core9panicking5panic17h4241c5ccea17facaE([0 x i8]* noundef nonnull align 1 bitcast (<{ [23 x i8] }>* @alloc53 to [0 x i8]*), i64 23, %\"core::panic::location::Location\"* noundef align 8 dereferenceable(24) bitcast (<{ i8*, [16 x i8] }>* @alloc55 to %\"core::panic::location::Location\"*)) #7\n  unreachable\n", llvm_type: "label" }))
IF STATEMENT
terminator is InstructionValue { instruction_value: Value { name: "", address: 0x55a6cc725aa0, is_const: false, is_null: false, is_undef: false, llvm_value: "  br i1 %c1, label %bb3, label %bb5", llvm_type: "void" } }
Operand 0 is Some(Left(IntValue(IntValue { int_value: Value { name: "c1", address: 0x55a6cc71e050, is_const: false, is_null: false, is_undef: false, llvm_value: "i1 %c1", llvm_type: "i1" } })))
Operand 1 is Some(Right(BasicBlock { address: 0x55a6cc7250b0, is_const: false, llvm_value: "\nbb5:                                              ; preds = %start\n  %1 = call { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %spec.select, i32 4)\n  %_11.0 = extractvalue { i32, i1 } %1, 0\n  %_11.1 = extractvalue { i32, i1 } %1, 1\n  br i1 %_11.1, label %panic1, label %bb7, !prof !3\n", llvm_type: "label" }))
Operand 2 is Some(Right(BasicBlock { address: 0x55a6cc725100, is_const: false, llvm_value: "\nbb3:                                              ; preds = %start\n  %2 = call { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %spec.select, i32 3)\n  %_9.0 = extractvalue { i32, i1 } %2, 0\n  %_9.1 = extractvalue { i32, i1 } %2, 1\n  br i1 %_9.1, label %panic, label %bb7, !prof !3\n", llvm_type: "label" }))
IF STATEMENT
terminator is InstructionValue { instruction_value: Value { name: "", address: 0x55a6cc725f60, is_const: false, is_null: false, is_undef: false, llvm_value: "  br i1 %_11.1, label %panic1, label %bb7, !prof !3", llvm_type: "void" } }
Operand 0 is Some(Left(IntValue(IntValue { int_value: Value { name: "_11.1", address: 0x55a6cc725dd0, is_const: false, is_null: false, is_undef: false, llvm_value: "  %_11.1 = extractvalue { i32, i1 } %1, 1", llvm_type: "i1" } })))
Operand 1 is Some(Right(BasicBlock { address: 0x55a6cc7251f0, is_const: false, llvm_value: "\nbb7:                                              ; preds = %bb5, %bb3\n  %r.0 = phi i32 [ %_9.0, %bb3 ], [ %_11.0, %bb5 ]\n  br i1 %c2, label %bb8, label %bb10\n", llvm_type: "label" }))
Operand 2 is Some(Right(BasicBlock { address: 0x55a6cc725290, is_const: false, llvm_value: "\npanic1:                                           ; preds = %bb5\n  call void @_ZN4core9panicking5panic17h4241c5ccea17facaE([0 x i8]* noundef nonnull align 1 bitcast ([28 x i8]* @str.0 to [0 x i8]*), i64 28, %\"core::panic::location::Location\"* noundef align 8 dereferenceable(24) bitcast (<{ i8*, [16 x i8] }>* @alloc48 to %\"core::panic::location::Location\"*)) #7\n  unreachable\n", llvm_type: "label" }))
IF STATEMENT
terminator is InstructionValue { instruction_value: Value { name: "", address: 0x55a6cc726320, is_const: false, is_null: false, is_undef: false, llvm_value: "  br i1 %_9.1, label %panic, label %bb7, !prof !3", llvm_type: "void" } }
Operand 0 is Some(Left(IntValue(IntValue { int_value: Value { name: "_9.1", address: 0x55a6cc726190, is_const: false, is_null: false, is_undef: false, llvm_value: "  %_9.1 = extractvalue { i32, i1 } %2, 1", llvm_type: "i1" } })))
Operand 1 is Some(Right(BasicBlock { address: 0x55a6cc7251f0, is_const: false, llvm_value: "\nbb7:                                              ; preds = %bb5, %bb3\n  %r.0 = phi i32 [ %_9.0, %bb3 ], [ %_11.0, %bb5 ]\n  br i1 %c2, label %bb8, label %bb10\n", llvm_type: "label" }))
Operand 2 is Some(Right(BasicBlock { address: 0x55a6cc7251a0, is_const: false, llvm_value: "\npanic:                                            ; preds = %bb3\n  call void @_ZN4core9panicking5panic17h4241c5ccea17facaE([0 x i8]* noundef nonnull align 1 bitcast ([28 x i8]* @str.0 to [0 x i8]*), i64 28, %\"core::panic::location::Location\"* noundef align 8 dereferenceable(24) bitcast (<{ i8*, [16 x i8] }>* @alloc46 to %\"core::panic::location::Location\"*)) #7\n  unreachable\n", llvm_type: "label" }))
IF STATEMENT
terminator is InstructionValue { instruction_value: Value { name: "", address: 0x55a6cc7264d0, is_const: false, is_null: false, is_undef: false, llvm_value: "  br i1 %c2, label %bb8, label %bb10", llvm_type: "void" } }
Operand 0 is Some(Left(IntValue(IntValue { int_value: Value { name: "c2", address: 0x55a6cc71e078, is_const: false, is_null: false, is_undef: false, llvm_value: "i1 %c2", llvm_type: "i1" } })))
Operand 1 is Some(Right(BasicBlock { address: 0x55a6cc7252e0, is_const: false, llvm_value: "\nbb10:                                             ; preds = %bb7\n  %3 = call { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %r.0, i32 2)\n  %_17.0 = extractvalue { i32, i1 } %3, 0\n  %_17.1 = extractvalue { i32, i1 } %3, 1\n  br i1 %_17.1, label %panic3, label %bb12, !prof !3\n", llvm_type: "label" }))
Operand 2 is Some(Right(BasicBlock { address: 0x55a6cc725330, is_const: false, llvm_value: "\nbb8:                                              ; preds = %bb7\n  %4 = call { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %r.0, i32 1)\n  %_15.0 = extractvalue { i32, i1 } %4, 0\n  %_15.1 = extractvalue { i32, i1 } %4, 1\n  br i1 %_15.1, label %panic2, label %bb12, !prof !3\n", llvm_type: "label" }))
IF STATEMENT
terminator is InstructionValue { instruction_value: Value { name: "", address: 0x55a6cc726ac0, is_const: false, is_null: false, is_undef: false, llvm_value: "  br i1 %_17.1, label %panic3, label %bb12, !prof !3", llvm_type: "void" } }
Operand 0 is Some(Left(IntValue(IntValue { int_value: Value { name: "_17.1", address: 0x55a6cc726930, is_const: false, is_null: false, is_undef: false, llvm_value: "  %_17.1 = extractvalue { i32, i1 } %3, 1", llvm_type: "i1" } })))
Operand 1 is Some(Right(BasicBlock { address: 0x55a6cc725420, is_const: false, llvm_value: "\nbb12:                                             ; preds = %bb10, %bb8\n  %_12.0 = phi i32 [ %_15.0, %bb8 ], [ %_17.0, %bb10 ]\n  %_19 = icmp sgt i32 %_12.0, %spec.select\n  %_18 = xor i1 %_19, true\n  br i1 %_18, label %bb13, label %bb14\n", llvm_type: "label" }))
Operand 2 is Some(Right(BasicBlock { address: 0x55a6cc7254c0, is_const: false, llvm_value: "\npanic3:                                           ; preds = %bb10\n  call void @_ZN4core9panicking5panic17h4241c5ccea17facaE([0 x i8]* noundef nonnull align 1 bitcast ([33 x i8]* @str.1 to [0 x i8]*), i64 33, %\"core::panic::location::Location\"* noundef align 8 dereferenceable(24) bitcast (<{ i8*, [16 x i8] }>* @alloc52 to %\"core::panic::location::Location\"*)) #7\n  unreachable\n", llvm_type: "label" }))
IF STATEMENT
terminator is InstructionValue { instruction_value: Value { name: "", address: 0x55a6cc726e80, is_const: false, is_null: false, is_undef: false, llvm_value: "  br i1 %_15.1, label %panic2, label %bb12, !prof !3", llvm_type: "void" } }
Operand 0 is Some(Left(IntValue(IntValue { int_value: Value { name: "_15.1", address: 0x55a6cc726cf0, is_const: false, is_null: false, is_undef: false, llvm_value: "  %_15.1 = extractvalue { i32, i1 } %4, 1", llvm_type: "i1" } })))
Operand 1 is Some(Right(BasicBlock { address: 0x55a6cc725420, is_const: false, llvm_value: "\nbb12:                                             ; preds = %bb10, %bb8\n  %_12.0 = phi i32 [ %_15.0, %bb8 ], [ %_17.0, %bb10 ]\n  %_19 = icmp sgt i32 %_12.0, %spec.select\n  %_18 = xor i1 %_19, true\n  br i1 %_18, label %bb13, label %bb14\n", llvm_type: "label" }))
Operand 2 is Some(Right(BasicBlock { address: 0x55a6cc7253d0, is_const: false, llvm_value: "\npanic2:                                           ; preds = %bb8\n  call void @_ZN4core9panicking5panic17h4241c5ccea17facaE([0 x i8]* noundef nonnull align 1 bitcast ([33 x i8]* @str.1 to [0 x i8]*), i64 33, %\"core::panic::location::Location\"* noundef align 8 dereferenceable(24) bitcast (<{ i8*, [16 x i8] }>* @alloc50 to %\"core::panic::location::Location\"*)) #7\n  unreachable\n", llvm_type: "label" }))
IF STATEMENT
terminator is InstructionValue { instruction_value: Value { name: "", address: 0x55a6cc727460, is_const: false, is_null: false, is_undef: false, llvm_value: "  br i1 %_18, label %bb13, label %bb14", llvm_type: "void" } }
Operand 0 is Some(Left(IntValue(IntValue { int_value: Value { name: "_18", address: 0x55a6cc7273b0, is_const: false, is_null: false, is_undef: false, llvm_value: "  %_18 = xor i1 %_19, true", llvm_type: "i1" } })))
Operand 1 is Some(Right(BasicBlock { address: 0x55a6cc725510, is_const: false, llvm_value: "\nbb14:                                             ; preds = %bb12\n  ret i32 %_12.0\n", llvm_type: "label" }))
Operand 2 is Some(Right(BasicBlock { address: 0x55a6cc725560, is_const: false, llvm_value: "\nbb13:                                             ; preds = %bb12\n  call void @_ZN4core9panicking5panic17h4241c5ccea17facaE([0 x i8]* noundef nonnull align 1 bitcast (<{ [23 x i8] }>* @alloc53 to [0 x i8]*), i64 23, %\"core::panic::location::Location\"* noundef align 8 dereferenceable(24) bitcast (<{ i8*, [16 x i8] }>* @alloc55 to %\"core::panic::location::Location\"*)) #7\n  unreachable\n", llvm_type: "label" }))
[2mJan 15 20:18:37.105[0m [34mDEBUG[0m wombat_symx: Backward sorted nodes:	["common_end", "bb13", "bb14", "panic3", "bb12", "panic2", "bb8", "bb10", "panic1", "bb7", "panic", "bb3", "bb5", "start"]
IF STATEMENT
terminator is InstructionValue { instruction_value: Value { name: "", address: 0x55a6cc725aa0, is_const: false, is_null: false, is_undef: false, llvm_value: "  br i1 %c1, label %bb3, label %bb5", llvm_type: "void" } }
Operand 0 is Some(Left(IntValue(IntValue { int_value: Value { name: "c1", address: 0x55a6cc71e050, is_const: false, is_null: false, is_undef: false, llvm_value: "i1 %c1", llvm_type: "i1" } })))
Operand 1 is Some(Right(BasicBlock { address: 0x55a6cc7250b0, is_const: false, llvm_value: "\nbb5:                                              ; preds = %start\n  %1 = call { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %spec.select, i32 4)\n  %_11.0 = extractvalue { i32, i1 } %1, 0\n  %_11.1 = extractvalue { i32, i1 } %1, 1\n  br i1 %_11.1, label %panic1, label %bb7, !prof !3\n", llvm_type: "label" }))
Operand 2 is Some(Right(BasicBlock { address: 0x55a6cc725100, is_const: false, llvm_value: "\nbb3:                                              ; preds = %start\n  %2 = call { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %spec.select, i32 3)\n  %_9.0 = extractvalue { i32, i1 } %2, 0\n  %_9.1 = extractvalue { i32, i1 } %2, 1\n  br i1 %_9.1, label %panic, label %bb7, !prof !3\n", llvm_type: "label" }))
IF STATEMENT
terminator is InstructionValue { instruction_value: Value { name: "", address: 0x55a6cc725f60, is_const: false, is_null: false, is_undef: false, llvm_value: "  br i1 %_11.1, label %panic1, label %bb7, !prof !3", llvm_type: "void" } }
Operand 0 is Some(Left(IntValue(IntValue { int_value: Value { name: "_11.1", address: 0x55a6cc725dd0, is_const: false, is_null: false, is_undef: false, llvm_value: "  %_11.1 = extractvalue { i32, i1 } %1, 1", llvm_type: "i1" } })))
Operand 1 is Some(Right(BasicBlock { address: 0x55a6cc7251f0, is_const: false, llvm_value: "\nbb7:                                              ; preds = %bb5, %bb3\n  %r.0 = phi i32 [ %_9.0, %bb3 ], [ %_11.0, %bb5 ]\n  br i1 %c2, label %bb8, label %bb10\n", llvm_type: "label" }))
Operand 2 is Some(Right(BasicBlock { address: 0x55a6cc725290, is_const: false, llvm_value: "\npanic1:                                           ; preds = %bb5\n  call void @_ZN4core9panicking5panic17h4241c5ccea17facaE([0 x i8]* noundef nonnull align 1 bitcast ([28 x i8]* @str.0 to [0 x i8]*), i64 28, %\"core::panic::location::Location\"* noundef align 8 dereferenceable(24) bitcast (<{ i8*, [16 x i8] }>* @alloc48 to %\"core::panic::location::Location\"*)) #7\n  unreachable\n", llvm_type: "label" }))
IF STATEMENT
terminator is InstructionValue { instruction_value: Value { name: "", address: 0x55a6cc726320, is_const: false, is_null: false, is_undef: false, llvm_value: "  br i1 %_9.1, label %panic, label %bb7, !prof !3", llvm_type: "void" } }
Operand 0 is Some(Left(IntValue(IntValue { int_value: Value { name: "_9.1", address: 0x55a6cc726190, is_const: false, is_null: false, is_undef: false, llvm_value: "  %_9.1 = extractvalue { i32, i1 } %2, 1", llvm_type: "i1" } })))
Operand 1 is Some(Right(BasicBlock { address: 0x55a6cc7251f0, is_const: false, llvm_value: "\nbb7:                                              ; preds = %bb5, %bb3\n  %r.0 = phi i32 [ %_9.0, %bb3 ], [ %_11.0, %bb5 ]\n  br i1 %c2, label %bb8, label %bb10\n", llvm_type: "label" }))
Operand 2 is Some(Right(BasicBlock { address: 0x55a6cc7251a0, is_const: false, llvm_value: "\npanic:                                            ; preds = %bb3\n  call void @_ZN4core9panicking5panic17h4241c5ccea17facaE([0 x i8]* noundef nonnull align 1 bitcast ([28 x i8]* @str.0 to [0 x i8]*), i64 28, %\"core::panic::location::Location\"* noundef align 8 dereferenceable(24) bitcast (<{ i8*, [16 x i8] }>* @alloc46 to %\"core::panic::location::Location\"*)) #7\n  unreachable\n", llvm_type: "label" }))
IF STATEMENT
terminator is InstructionValue { instruction_value: Value { name: "", address: 0x55a6cc7264d0, is_const: false, is_null: false, is_undef: false, llvm_value: "  br i1 %c2, label %bb8, label %bb10", llvm_type: "void" } }
Operand 0 is Some(Left(IntValue(IntValue { int_value: Value { name: "c2", address: 0x55a6cc71e078, is_const: false, is_null: false, is_undef: false, llvm_value: "i1 %c2", llvm_type: "i1" } })))
Operand 1 is Some(Right(BasicBlock { address: 0x55a6cc7252e0, is_const: false, llvm_value: "\nbb10:                                             ; preds = %bb7\n  %3 = call { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %r.0, i32 2)\n  %_17.0 = extractvalue { i32, i1 } %3, 0\n  %_17.1 = extractvalue { i32, i1 } %3, 1\n  br i1 %_17.1, label %panic3, label %bb12, !prof !3\n", llvm_type: "label" }))
Operand 2 is Some(Right(BasicBlock { address: 0x55a6cc725330, is_const: false, llvm_value: "\nbb8:                                              ; preds = %bb7\n  %4 = call { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %r.0, i32 1)\n  %_15.0 = extractvalue { i32, i1 } %4, 0\n  %_15.1 = extractvalue { i32, i1 } %4, 1\n  br i1 %_15.1, label %panic2, label %bb12, !prof !3\n", llvm_type: "label" }))
IF STATEMENT
terminator is InstructionValue { instruction_value: Value { name: "", address: 0x55a6cc726ac0, is_const: false, is_null: false, is_undef: false, llvm_value: "  br i1 %_17.1, label %panic3, label %bb12, !prof !3", llvm_type: "void" } }
Operand 0 is Some(Left(IntValue(IntValue { int_value: Value { name: "_17.1", address: 0x55a6cc726930, is_const: false, is_null: false, is_undef: false, llvm_value: "  %_17.1 = extractvalue { i32, i1 } %3, 1", llvm_type: "i1" } })))
Operand 1 is Some(Right(BasicBlock { address: 0x55a6cc725420, is_const: false, llvm_value: "\nbb12:                                             ; preds = %bb10, %bb8\n  %_12.0 = phi i32 [ %_15.0, %bb8 ], [ %_17.0, %bb10 ]\n  %_19 = icmp sgt i32 %_12.0, %spec.select\n  %_18 = xor i1 %_19, true\n  br i1 %_18, label %bb13, label %bb14\n", llvm_type: "label" }))
Operand 2 is Some(Right(BasicBlock { address: 0x55a6cc7254c0, is_const: false, llvm_value: "\npanic3:                                           ; preds = %bb10\n  call void @_ZN4core9panicking5panic17h4241c5ccea17facaE([0 x i8]* noundef nonnull align 1 bitcast ([33 x i8]* @str.1 to [0 x i8]*), i64 33, %\"core::panic::location::Location\"* noundef align 8 dereferenceable(24) bitcast (<{ i8*, [16 x i8] }>* @alloc52 to %\"core::panic::location::Location\"*)) #7\n  unreachable\n", llvm_type: "label" }))
IF STATEMENT
terminator is InstructionValue { instruction_value: Value { name: "", address: 0x55a6cc726e80, is_const: false, is_null: false, is_undef: false, llvm_value: "  br i1 %_15.1, label %panic2, label %bb12, !prof !3", llvm_type: "void" } }
Operand 0 is Some(Left(IntValue(IntValue { int_value: Value { name: "_15.1", address: 0x55a6cc726cf0, is_const: false, is_null: false, is_undef: false, llvm_value: "  %_15.1 = extractvalue { i32, i1 } %4, 1", llvm_type: "i1" } })))
Operand 1 is Some(Right(BasicBlock { address: 0x55a6cc725420, is_const: false, llvm_value: "\nbb12:                                             ; preds = %bb10, %bb8\n  %_12.0 = phi i32 [ %_15.0, %bb8 ], [ %_17.0, %bb10 ]\n  %_19 = icmp sgt i32 %_12.0, %spec.select\n  %_18 = xor i1 %_19, true\n  br i1 %_18, label %bb13, label %bb14\n", llvm_type: "label" }))
Operand 2 is Some(Right(BasicBlock { address: 0x55a6cc7253d0, is_const: false, llvm_value: "\npanic2:                                           ; preds = %bb8\n  call void @_ZN4core9panicking5panic17h4241c5ccea17facaE([0 x i8]* noundef nonnull align 1 bitcast ([33 x i8]* @str.1 to [0 x i8]*), i64 33, %\"core::panic::location::Location\"* noundef align 8 dereferenceable(24) bitcast (<{ i8*, [16 x i8] }>* @alloc50 to %\"core::panic::location::Location\"*)) #7\n  unreachable\n", llvm_type: "label" }))
IF STATEMENT
terminator is InstructionValue { instruction_value: Value { name: "", address: 0x55a6cc727460, is_const: false, is_null: false, is_undef: false, llvm_value: "  br i1 %_18, label %bb13, label %bb14", llvm_type: "void" } }
Operand 0 is Some(Left(IntValue(IntValue { int_value: Value { name: "_18", address: 0x55a6cc7273b0, is_const: false, is_null: false, is_undef: false, llvm_value: "  %_18 = xor i1 %_19, true", llvm_type: "i1" } })))
Operand 1 is Some(Right(BasicBlock { address: 0x55a6cc725510, is_const: false, llvm_value: "\nbb14:                                             ; preds = %bb12\n  ret i32 %_12.0\n", llvm_type: "label" }))
Operand 2 is Some(Right(BasicBlock { address: 0x55a6cc725560, is_const: false, llvm_value: "\nbb13:                                             ; preds = %bb12\n  call void @_ZN4core9panicking5panic17h4241c5ccea17facaE([0 x i8]* noundef nonnull align 1 bitcast (<{ [23 x i8] }>* @alloc53 to [0 x i8]*), i64 23, %\"core::panic::location::Location\"* noundef align 8 dereferenceable(24) bitcast (<{ i8*, [16 x i8] }>* @alloc55 to %\"core::panic::location::Location\"*)) #7\n  unreachable\n", llvm_type: "label" }))
IF STATEMENT
terminator is InstructionValue { instruction_value: Value { name: "", address: 0x55a6cc725aa0, is_const: false, is_null: false, is_undef: false, llvm_value: "  br i1 %c1, label %bb3, label %bb5", llvm_type: "void" } }
Operand 0 is Some(Left(IntValue(IntValue { int_value: Value { name: "c1", address: 0x55a6cc71e050, is_const: false, is_null: false, is_undef: false, llvm_value: "i1 %c1", llvm_type: "i1" } })))
Operand 1 is Some(Right(BasicBlock { address: 0x55a6cc7250b0, is_const: false, llvm_value: "\nbb5:                                              ; preds = %start\n  %1 = call { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %spec.select, i32 4)\n  %_11.0 = extractvalue { i32, i1 } %1, 0\n  %_11.1 = extractvalue { i32, i1 } %1, 1\n  br i1 %_11.1, label %panic1, label %bb7, !prof !3\n", llvm_type: "label" }))
Operand 2 is Some(Right(BasicBlock { address: 0x55a6cc725100, is_const: false, llvm_value: "\nbb3:                                              ; preds = %start\n  %2 = call { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %spec.select, i32 3)\n  %_9.0 = extractvalue { i32, i1 } %2, 0\n  %_9.1 = extractvalue { i32, i1 } %2, 1\n  br i1 %_9.1, label %panic, label %bb7, !prof !3\n", llvm_type: "label" }))
IF STATEMENT
terminator is InstructionValue { instruction_value: Value { name: "", address: 0x55a6cc725f60, is_const: false, is_null: false, is_undef: false, llvm_value: "  br i1 %_11.1, label %panic1, label %bb7, !prof !3", llvm_type: "void" } }
Operand 0 is Some(Left(IntValue(IntValue { int_value: Value { name: "_11.1", address: 0x55a6cc725dd0, is_const: false, is_null: false, is_undef: false, llvm_value: "  %_11.1 = extractvalue { i32, i1 } %1, 1", llvm_type: "i1" } })))
Operand 1 is Some(Right(BasicBlock { address: 0x55a6cc7251f0, is_const: false, llvm_value: "\nbb7:                                              ; preds = %bb5, %bb3\n  %r.0 = phi i32 [ %_9.0, %bb3 ], [ %_11.0, %bb5 ]\n  br i1 %c2, label %bb8, label %bb10\n", llvm_type: "label" }))
Operand 2 is Some(Right(BasicBlock { address: 0x55a6cc725290, is_const: false, llvm_value: "\npanic1:                                           ; preds = %bb5\n  call void @_ZN4core9panicking5panic17h4241c5ccea17facaE([0 x i8]* noundef nonnull align 1 bitcast ([28 x i8]* @str.0 to [0 x i8]*), i64 28, %\"core::panic::location::Location\"* noundef align 8 dereferenceable(24) bitcast (<{ i8*, [16 x i8] }>* @alloc48 to %\"core::panic::location::Location\"*)) #7\n  unreachable\n", llvm_type: "label" }))
IF STATEMENT
terminator is InstructionValue { instruction_value: Value { name: "", address: 0x55a6cc726320, is_const: false, is_null: false, is_undef: false, llvm_value: "  br i1 %_9.1, label %panic, label %bb7, !prof !3", llvm_type: "void" } }
Operand 0 is Some(Left(IntValue(IntValue { int_value: Value { name: "_9.1", address: 0x55a6cc726190, is_const: false, is_null: false, is_undef: false, llvm_value: "  %_9.1 = extractvalue { i32, i1 } %2, 1", llvm_type: "i1" } })))
Operand 1 is Some(Right(BasicBlock { address: 0x55a6cc7251f0, is_const: false, llvm_value: "\nbb7:                                              ; preds = %bb5, %bb3\n  %r.0 = phi i32 [ %_9.0, %bb3 ], [ %_11.0, %bb5 ]\n  br i1 %c2, label %bb8, label %bb10\n", llvm_type: "label" }))
Operand 2 is Some(Right(BasicBlock { address: 0x55a6cc7251a0, is_const: false, llvm_value: "\npanic:                                            ; preds = %bb3\n  call void @_ZN4core9panicking5panic17h4241c5ccea17facaE([0 x i8]* noundef nonnull align 1 bitcast ([28 x i8]* @str.0 to [0 x i8]*), i64 28, %\"core::panic::location::Location\"* noundef align 8 dereferenceable(24) bitcast (<{ i8*, [16 x i8] }>* @alloc46 to %\"core::panic::location::Location\"*)) #7\n  unreachable\n", llvm_type: "label" }))
IF STATEMENT
terminator is InstructionValue { instruction_value: Value { name: "", address: 0x55a6cc7264d0, is_const: false, is_null: false, is_undef: false, llvm_value: "  br i1 %c2, label %bb8, label %bb10", llvm_type: "void" } }
Operand 0 is Some(Left(IntValue(IntValue { int_value: Value { name: "c2", address: 0x55a6cc71e078, is_const: false, is_null: false, is_undef: false, llvm_value: "i1 %c2", llvm_type: "i1" } })))
Operand 1 is Some(Right(BasicBlock { address: 0x55a6cc7252e0, is_const: false, llvm_value: "\nbb10:                                             ; preds = %bb7\n  %3 = call { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %r.0, i32 2)\n  %_17.0 = extractvalue { i32, i1 } %3, 0\n  %_17.1 = extractvalue { i32, i1 } %3, 1\n  br i1 %_17.1, label %panic3, label %bb12, !prof !3\n", llvm_type: "label" }))
Operand 2 is Some(Right(BasicBlock { address: 0x55a6cc725330, is_const: false, llvm_value: "\nbb8:                                              ; preds = %bb7\n  %4 = call { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %r.0, i32 1)\n  %_15.0 = extractvalue { i32, i1 } %4, 0\n  %_15.1 = extractvalue { i32, i1 } %4, 1\n  br i1 %_15.1, label %panic2, label %bb12, !prof !3\n", llvm_type: "label" }))
IF STATEMENT
terminator is InstructionValue { instruction_value: Value { name: "", address: 0x55a6cc726ac0, is_const: false, is_null: false, is_undef: false, llvm_value: "  br i1 %_17.1, label %panic3, label %bb12, !prof !3", llvm_type: "void" } }
Operand 0 is Some(Left(IntValue(IntValue { int_value: Value { name: "_17.1", address: 0x55a6cc726930, is_const: false, is_null: false, is_undef: false, llvm_value: "  %_17.1 = extractvalue { i32, i1 } %3, 1", llvm_type: "i1" } })))
Operand 1 is Some(Right(BasicBlock { address: 0x55a6cc725420, is_const: false, llvm_value: "\nbb12:                                             ; preds = %bb10, %bb8\n  %_12.0 = phi i32 [ %_15.0, %bb8 ], [ %_17.0, %bb10 ]\n  %_19 = icmp sgt i32 %_12.0, %spec.select\n  %_18 = xor i1 %_19, true\n  br i1 %_18, label %bb13, label %bb14\n", llvm_type: "label" }))
Operand 2 is Some(Right(BasicBlock { address: 0x55a6cc7254c0, is_const: false, llvm_value: "\npanic3:                                           ; preds = %bb10\n  call void @_ZN4core9panicking5panic17h4241c5ccea17facaE([0 x i8]* noundef nonnull align 1 bitcast ([33 x i8]* @str.1 to [0 x i8]*), i64 33, %\"core::panic::location::Location\"* noundef align 8 dereferenceable(24) bitcast (<{ i8*, [16 x i8] }>* @alloc52 to %\"core::panic::location::Location\"*)) #7\n  unreachable\n", llvm_type: "label" }))
IF STATEMENT
terminator is InstructionValue { instruction_value: Value { name: "", address: 0x55a6cc726e80, is_const: false, is_null: false, is_undef: false, llvm_value: "  br i1 %_15.1, label %panic2, label %bb12, !prof !3", llvm_type: "void" } }
Operand 0 is Some(Left(IntValue(IntValue { int_value: Value { name: "_15.1", address: 0x55a6cc726cf0, is_const: false, is_null: false, is_undef: false, llvm_value: "  %_15.1 = extractvalue { i32, i1 } %4, 1", llvm_type: "i1" } })))
Operand 1 is Some(Right(BasicBlock { address: 0x55a6cc725420, is_const: false, llvm_value: "\nbb12:                                             ; preds = %bb10, %bb8\n  %_12.0 = phi i32 [ %_15.0, %bb8 ], [ %_17.0, %bb10 ]\n  %_19 = icmp sgt i32 %_12.0, %spec.select\n  %_18 = xor i1 %_19, true\n  br i1 %_18, label %bb13, label %bb14\n", llvm_type: "label" }))
Operand 2 is Some(Right(BasicBlock { address: 0x55a6cc7253d0, is_const: false, llvm_value: "\npanic2:                                           ; preds = %bb8\n  call void @_ZN4core9panicking5panic17h4241c5ccea17facaE([0 x i8]* noundef nonnull align 1 bitcast ([33 x i8]* @str.1 to [0 x i8]*), i64 33, %\"core::panic::location::Location\"* noundef align 8 dereferenceable(24) bitcast (<{ i8*, [16 x i8] }>* @alloc50 to %\"core::panic::location::Location\"*)) #7\n  unreachable\n", llvm_type: "label" }))
IF STATEMENT
terminator is InstructionValue { instruction_value: Value { name: "", address: 0x55a6cc727460, is_const: false, is_null: false, is_undef: false, llvm_value: "  br i1 %_18, label %bb13, label %bb14", llvm_type: "void" } }
Operand 0 is Some(Left(IntValue(IntValue { int_value: Value { name: "_18", address: 0x55a6cc7273b0, is_const: false, is_null: false, is_undef: false, llvm_value: "  %_18 = xor i1 %_19, true", llvm_type: "i1" } })))
Operand 1 is Some(Right(BasicBlock { address: 0x55a6cc725510, is_const: false, llvm_value: "\nbb14:                                             ; preds = %bb12\n  ret i32 %_12.0\n", llvm_type: "label" }))
Operand 2 is Some(Right(BasicBlock { address: 0x55a6cc725560, is_const: false, llvm_value: "\nbb13:                                             ; preds = %bb12\n  call void @_ZN4core9panicking5panic17h4241c5ccea17facaE([0 x i8]* noundef nonnull align 1 bitcast (<{ [23 x i8] }>* @alloc53 to [0 x i8]*), i64 23, %\"core::panic::location::Location\"* noundef align 8 dereferenceable(24) bitcast (<{ i8*, [16 x i8] }>* @alloc55 to %\"core::panic::location::Location\"*)) #7\n  unreachable\n", llvm_type: "label" }))
IF STATEMENT
terminator is InstructionValue { instruction_value: Value { name: "", address: 0x55a6cc725aa0, is_const: false, is_null: false, is_undef: false, llvm_value: "  br i1 %c1, label %bb3, label %bb5", llvm_type: "void" } }
Operand 0 is Some(Left(IntValue(IntValue { int_value: Value { name: "c1", address: 0x55a6cc71e050, is_const: false, is_null: false, is_undef: false, llvm_value: "i1 %c1", llvm_type: "i1" } })))
Operand 1 is Some(Right(BasicBlock { address: 0x55a6cc7250b0, is_const: false, llvm_value: "\nbb5:                                              ; preds = %start\n  %1 = call { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %spec.select, i32 4)\n  %_11.0 = extractvalue { i32, i1 } %1, 0\n  %_11.1 = extractvalue { i32, i1 } %1, 1\n  br i1 %_11.1, label %panic1, label %bb7, !prof !3\n", llvm_type: "label" }))
Operand 2 is Some(Right(BasicBlock { address: 0x55a6cc725100, is_const: false, llvm_value: "\nbb3:                                              ; preds = %start\n  %2 = call { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %spec.select, i32 3)\n  %_9.0 = extractvalue { i32, i1 } %2, 0\n  %_9.1 = extractvalue { i32, i1 } %2, 1\n  br i1 %_9.1, label %panic, label %bb7, !prof !3\n", llvm_type: "label" }))
IF STATEMENT
terminator is InstructionValue { instruction_value: Value { name: "", address: 0x55a6cc725f60, is_const: false, is_null: false, is_undef: false, llvm_value: "  br i1 %_11.1, label %panic1, label %bb7, !prof !3", llvm_type: "void" } }
Operand 0 is Some(Left(IntValue(IntValue { int_value: Value { name: "_11.1", address: 0x55a6cc725dd0, is_const: false, is_null: false, is_undef: false, llvm_value: "  %_11.1 = extractvalue { i32, i1 } %1, 1", llvm_type: "i1" } })))
Operand 1 is Some(Right(BasicBlock { address: 0x55a6cc7251f0, is_const: false, llvm_value: "\nbb7:                                              ; preds = %bb5, %bb3\n  %r.0 = phi i32 [ %_9.0, %bb3 ], [ %_11.0, %bb5 ]\n  br i1 %c2, label %bb8, label %bb10\n", llvm_type: "label" }))
Operand 2 is Some(Right(BasicBlock { address: 0x55a6cc725290, is_const: false, llvm_value: "\npanic1:                                           ; preds = %bb5\n  call void @_ZN4core9panicking5panic17h4241c5ccea17facaE([0 x i8]* noundef nonnull align 1 bitcast ([28 x i8]* @str.0 to [0 x i8]*), i64 28, %\"core::panic::location::Location\"* noundef align 8 dereferenceable(24) bitcast (<{ i8*, [16 x i8] }>* @alloc48 to %\"core::panic::location::Location\"*)) #7\n  unreachable\n", llvm_type: "label" }))
IF STATEMENT
terminator is InstructionValue { instruction_value: Value { name: "", address: 0x55a6cc726320, is_const: false, is_null: false, is_undef: false, llvm_value: "  br i1 %_9.1, label %panic, label %bb7, !prof !3", llvm_type: "void" } }
Operand 0 is Some(Left(IntValue(IntValue { int_value: Value { name: "_9.1", address: 0x55a6cc726190, is_const: false, is_null: false, is_undef: false, llvm_value: "  %_9.1 = extractvalue { i32, i1 } %2, 1", llvm_type: "i1" } })))
Operand 1 is Some(Right(BasicBlock { address: 0x55a6cc7251f0, is_const: false, llvm_value: "\nbb7:                                              ; preds = %bb5, %bb3\n  %r.0 = phi i32 [ %_9.0, %bb3 ], [ %_11.0, %bb5 ]\n  br i1 %c2, label %bb8, label %bb10\n", llvm_type: "label" }))
Operand 2 is Some(Right(BasicBlock { address: 0x55a6cc7251a0, is_const: false, llvm_value: "\npanic:                                            ; preds = %bb3\n  call void @_ZN4core9panicking5panic17h4241c5ccea17facaE([0 x i8]* noundef nonnull align 1 bitcast ([28 x i8]* @str.0 to [0 x i8]*), i64 28, %\"core::panic::location::Location\"* noundef align 8 dereferenceable(24) bitcast (<{ i8*, [16 x i8] }>* @alloc46 to %\"core::panic::location::Location\"*)) #7\n  unreachable\n", llvm_type: "label" }))
IF STATEMENT
terminator is InstructionValue { instruction_value: Value { name: "", address: 0x55a6cc7264d0, is_const: false, is_null: false, is_undef: false, llvm_value: "  br i1 %c2, label %bb8, label %bb10", llvm_type: "void" } }
Operand 0 is Some(Left(IntValue(IntValue { int_value: Value { name: "c2", address: 0x55a6cc71e078, is_const: false, is_null: false, is_undef: false, llvm_value: "i1 %c2", llvm_type: "i1" } })))
Operand 1 is Some(Right(BasicBlock { address: 0x55a6cc7252e0, is_const: false, llvm_value: "\nbb10:                                             ; preds = %bb7\n  %3 = call { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %r.0, i32 2)\n  %_17.0 = extractvalue { i32, i1 } %3, 0\n  %_17.1 = extractvalue { i32, i1 } %3, 1\n  br i1 %_17.1, label %panic3, label %bb12, !prof !3\n", llvm_type: "label" }))
Operand 2 is Some(Right(BasicBlock { address: 0x55a6cc725330, is_const: false, llvm_value: "\nbb8:                                              ; preds = %bb7\n  %4 = call { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %r.0, i32 1)\n  %_15.0 = extractvalue { i32, i1 } %4, 0\n  %_15.1 = extractvalue { i32, i1 } %4, 1\n  br i1 %_15.1, label %panic2, label %bb12, !prof !3\n", llvm_type: "label" }))
IF STATEMENT
terminator is InstructionValue { instruction_value: Value { name: "", address: 0x55a6cc726ac0, is_const: false, is_null: false, is_undef: false, llvm_value: "  br i1 %_17.1, label %panic3, label %bb12, !prof !3", llvm_type: "void" } }
Operand 0 is Some(Left(IntValue(IntValue { int_value: Value { name: "_17.1", address: 0x55a6cc726930, is_const: false, is_null: false, is_undef: false, llvm_value: "  %_17.1 = extractvalue { i32, i1 } %3, 1", llvm_type: "i1" } })))
Operand 1 is Some(Right(BasicBlock { address: 0x55a6cc725420, is_const: false, llvm_value: "\nbb12:                                             ; preds = %bb10, %bb8\n  %_12.0 = phi i32 [ %_15.0, %bb8 ], [ %_17.0, %bb10 ]\n  %_19 = icmp sgt i32 %_12.0, %spec.select\n  %_18 = xor i1 %_19, true\n  br i1 %_18, label %bb13, label %bb14\n", llvm_type: "label" }))
Operand 2 is Some(Right(BasicBlock { address: 0x55a6cc7254c0, is_const: false, llvm_value: "\npanic3:                                           ; preds = %bb10\n  call void @_ZN4core9panicking5panic17h4241c5ccea17facaE([0 x i8]* noundef nonnull align 1 bitcast ([33 x i8]* @str.1 to [0 x i8]*), i64 33, %\"core::panic::location::Location\"* noundef align 8 dereferenceable(24) bitcast (<{ i8*, [16 x i8] }>* @alloc52 to %\"core::panic::location::Location\"*)) #7\n  unreachable\n", llvm_type: "label" }))
IF STATEMENT
terminator is InstructionValue { instruction_value: Value { name: "", address: 0x55a6cc726e80, is_const: false, is_null: false, is_undef: false, llvm_value: "  br i1 %_15.1, label %panic2, label %bb12, !prof !3", llvm_type: "void" } }
Operand 0 is Some(Left(IntValue(IntValue { int_value: Value { name: "_15.1", address: 0x55a6cc726cf0, is_const: false, is_null: false, is_undef: false, llvm_value: "  %_15.1 = extractvalue { i32, i1 } %4, 1", llvm_type: "i1" } })))
Operand 1 is Some(Right(BasicBlock { address: 0x55a6cc725420, is_const: false, llvm_value: "\nbb12:                                             ; preds = %bb10, %bb8\n  %_12.0 = phi i32 [ %_15.0, %bb8 ], [ %_17.0, %bb10 ]\n  %_19 = icmp sgt i32 %_12.0, %spec.select\n  %_18 = xor i1 %_19, true\n  br i1 %_18, label %bb13, label %bb14\n", llvm_type: "label" }))
Operand 2 is Some(Right(BasicBlock { address: 0x55a6cc7253d0, is_const: false, llvm_value: "\npanic2:                                           ; preds = %bb8\n  call void @_ZN4core9panicking5panic17h4241c5ccea17facaE([0 x i8]* noundef nonnull align 1 bitcast ([33 x i8]* @str.1 to [0 x i8]*), i64 33, %\"core::panic::location::Location\"* noundef align 8 dereferenceable(24) bitcast (<{ i8*, [16 x i8] }>* @alloc50 to %\"core::panic::location::Location\"*)) #7\n  unreachable\n", llvm_type: "label" }))
IF STATEMENT
terminator is InstructionValue { instruction_value: Value { name: "", address: 0x55a6cc727460, is_const: false, is_null: false, is_undef: false, llvm_value: "  br i1 %_18, label %bb13, label %bb14", llvm_type: "void" } }
Operand 0 is Some(Left(IntValue(IntValue { int_value: Value { name: "_18", address: 0x55a6cc7273b0, is_const: false, is_null: false, is_undef: false, llvm_value: "  %_18 = xor i1 %_19, true", llvm_type: "i1" } })))
Operand 1 is Some(Right(BasicBlock { address: 0x55a6cc725510, is_const: false, llvm_value: "\nbb14:                                             ; preds = %bb12\n  ret i32 %_12.0\n", llvm_type: "label" }))
Operand 2 is Some(Right(BasicBlock { address: 0x55a6cc725560, is_const: false, llvm_value: "\nbb13:                                             ; preds = %bb12\n  call void @_ZN4core9panicking5panic17h4241c5ccea17facaE([0 x i8]* noundef nonnull align 1 bitcast (<{ [23 x i8] }>* @alloc53 to [0 x i8]*), i64 23, %\"core::panic::location::Location\"* noundef align 8 dereferenceable(24) bitcast (<{ i8*, [16 x i8] }>* @alloc55 to %\"core::panic::location::Location\"*)) #7\n  unreachable\n", llvm_type: "label" }))
IF STATEMENT
terminator is InstructionValue { instruction_value: Value { name: "", address: 0x55a6cc725aa0, is_const: false, is_null: false, is_undef: false, llvm_value: "  br i1 %c1, label %bb3, label %bb5", llvm_type: "void" } }
Operand 0 is Some(Left(IntValue(IntValue { int_value: Value { name: "c1", address: 0x55a6cc71e050, is_const: false, is_null: false, is_undef: false, llvm_value: "i1 %c1", llvm_type: "i1" } })))
Operand 1 is Some(Right(BasicBlock { address: 0x55a6cc7250b0, is_const: false, llvm_value: "\nbb5:                                              ; preds = %start\n  %1 = call { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %spec.select, i32 4)\n  %_11.0 = extractvalue { i32, i1 } %1, 0\n  %_11.1 = extractvalue { i32, i1 } %1, 1\n  br i1 %_11.1, label %panic1, label %bb7, !prof !3\n", llvm_type: "label" }))
Operand 2 is Some(Right(BasicBlock { address: 0x55a6cc725100, is_const: false, llvm_value: "\nbb3:                                              ; preds = %start\n  %2 = call { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %spec.select, i32 3)\n  %_9.0 = extractvalue { i32, i1 } %2, 0\n  %_9.1 = extractvalue { i32, i1 } %2, 1\n  br i1 %_9.1, label %panic, label %bb7, !prof !3\n", llvm_type: "label" }))
IF STATEMENT
terminator is InstructionValue { instruction_value: Value { name: "", address: 0x55a6cc725f60, is_const: false, is_null: false, is_undef: false, llvm_value: "  br i1 %_11.1, label %panic1, label %bb7, !prof !3", llvm_type: "void" } }
Operand 0 is Some(Left(IntValue(IntValue { int_value: Value { name: "_11.1", address: 0x55a6cc725dd0, is_const: false, is_null: false, is_undef: false, llvm_value: "  %_11.1 = extractvalue { i32, i1 } %1, 1", llvm_type: "i1" } })))
Operand 1 is Some(Right(BasicBlock { address: 0x55a6cc7251f0, is_const: false, llvm_value: "\nbb7:                                              ; preds = %bb5, %bb3\n  %r.0 = phi i32 [ %_9.0, %bb3 ], [ %_11.0, %bb5 ]\n  br i1 %c2, label %bb8, label %bb10\n", llvm_type: "label" }))
Operand 2 is Some(Right(BasicBlock { address: 0x55a6cc725290, is_const: false, llvm_value: "\npanic1:                                           ; preds = %bb5\n  call void @_ZN4core9panicking5panic17h4241c5ccea17facaE([0 x i8]* noundef nonnull align 1 bitcast ([28 x i8]* @str.0 to [0 x i8]*), i64 28, %\"core::panic::location::Location\"* noundef align 8 dereferenceable(24) bitcast (<{ i8*, [16 x i8] }>* @alloc48 to %\"core::panic::location::Location\"*)) #7\n  unreachable\n", llvm_type: "label" }))
IF STATEMENT
terminator is InstructionValue { instruction_value: Value { name: "", address: 0x55a6cc726320, is_const: false, is_null: false, is_undef: false, llvm_value: "  br i1 %_9.1, label %panic, label %bb7, !prof !3", llvm_type: "void" } }
Operand 0 is Some(Left(IntValue(IntValue { int_value: Value { name: "_9.1", address: 0x55a6cc726190, is_const: false, is_null: false, is_undef: false, llvm_value: "  %_9.1 = extractvalue { i32, i1 } %2, 1", llvm_type: "i1" } })))
Operand 1 is Some(Right(BasicBlock { address: 0x55a6cc7251f0, is_const: false, llvm_value: "\nbb7:                                              ; preds = %bb5, %bb3\n  %r.0 = phi i32 [ %_9.0, %bb3 ], [ %_11.0, %bb5 ]\n  br i1 %c2, label %bb8, label %bb10\n", llvm_type: "label" }))
Operand 2 is Some(Right(BasicBlock { address: 0x55a6cc7251a0, is_const: false, llvm_value: "\npanic:                                            ; preds = %bb3\n  call void @_ZN4core9panicking5panic17h4241c5ccea17facaE([0 x i8]* noundef nonnull align 1 bitcast ([28 x i8]* @str.0 to [0 x i8]*), i64 28, %\"core::panic::location::Location\"* noundef align 8 dereferenceable(24) bitcast (<{ i8*, [16 x i8] }>* @alloc46 to %\"core::panic::location::Location\"*)) #7\n  unreachable\n", llvm_type: "label" }))
IF STATEMENT
terminator is InstructionValue { instruction_value: Value { name: "", address: 0x55a6cc7264d0, is_const: false, is_null: false, is_undef: false, llvm_value: "  br i1 %c2, label %bb8, label %bb10", llvm_type: "void" } }
Operand 0 is Some(Left(IntValue(IntValue { int_value: Value { name: "c2", address: 0x55a6cc71e078, is_const: false, is_null: false, is_undef: false, llvm_value: "i1 %c2", llvm_type: "i1" } })))
Operand 1 is Some(Right(BasicBlock { address: 0x55a6cc7252e0, is_const: false, llvm_value: "\nbb10:                                             ; preds = %bb7\n  %3 = call { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %r.0, i32 2)\n  %_17.0 = extractvalue { i32, i1 } %3, 0\n  %_17.1 = extractvalue { i32, i1 } %3, 1\n  br i1 %_17.1, label %panic3, label %bb12, !prof !3\n", llvm_type: "label" }))
Operand 2 is Some(Right(BasicBlock { address: 0x55a6cc725330, is_const: false, llvm_value: "\nbb8:                                              ; preds = %bb7\n  %4 = call { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %r.0, i32 1)\n  %_15.0 = extractvalue { i32, i1 } %4, 0\n  %_15.1 = extractvalue { i32, i1 } %4, 1\n  br i1 %_15.1, label %panic2, label %bb12, !prof !3\n", llvm_type: "label" }))
IF STATEMENT
terminator is InstructionValue { instruction_value: Value { name: "", address: 0x55a6cc726ac0, is_const: false, is_null: false, is_undef: false, llvm_value: "  br i1 %_17.1, label %panic3, label %bb12, !prof !3", llvm_type: "void" } }
Operand 0 is Some(Left(IntValue(IntValue { int_value: Value { name: "_17.1", address: 0x55a6cc726930, is_const: false, is_null: false, is_undef: false, llvm_value: "  %_17.1 = extractvalue { i32, i1 } %3, 1", llvm_type: "i1" } })))
Operand 1 is Some(Right(BasicBlock { address: 0x55a6cc725420, is_const: false, llvm_value: "\nbb12:                                             ; preds = %bb10, %bb8\n  %_12.0 = phi i32 [ %_15.0, %bb8 ], [ %_17.0, %bb10 ]\n  %_19 = icmp sgt i32 %_12.0, %spec.select\n  %_18 = xor i1 %_19, true\n  br i1 %_18, label %bb13, label %bb14\n", llvm_type: "label" }))
Operand 2 is Some(Right(BasicBlock { address: 0x55a6cc7254c0, is_const: false, llvm_value: "\npanic3:                                           ; preds = %bb10\n  call void @_ZN4core9panicking5panic17h4241c5ccea17facaE([0 x i8]* noundef nonnull align 1 bitcast ([33 x i8]* @str.1 to [0 x i8]*), i64 33, %\"core::panic::location::Location\"* noundef align 8 dereferenceable(24) bitcast (<{ i8*, [16 x i8] }>* @alloc52 to %\"core::panic::location::Location\"*)) #7\n  unreachable\n", llvm_type: "label" }))
IF STATEMENT
terminator is InstructionValue { instruction_value: Value { name: "", address: 0x55a6cc726e80, is_const: false, is_null: false, is_undef: false, llvm_value: "  br i1 %_15.1, label %panic2, label %bb12, !prof !3", llvm_type: "void" } }
Operand 0 is Some(Left(IntValue(IntValue { int_value: Value { name: "_15.1", address: 0x55a6cc726cf0, is_const: false, is_null: false, is_undef: false, llvm_value: "  %_15.1 = extractvalue { i32, i1 } %4, 1", llvm_type: "i1" } })))
Operand 1 is Some(Right(BasicBlock { address: 0x55a6cc725420, is_const: false, llvm_value: "\nbb12:                                             ; preds = %bb10, %bb8\n  %_12.0 = phi i32 [ %_15.0, %bb8 ], [ %_17.0, %bb10 ]\n  %_19 = icmp sgt i32 %_12.0, %spec.select\n  %_18 = xor i1 %_19, true\n  br i1 %_18, label %bb13, label %bb14\n", llvm_type: "label" }))
Operand 2 is Some(Right(BasicBlock { address: 0x55a6cc7253d0, is_const: false, llvm_value: "\npanic2:                                           ; preds = %bb8\n  call void @_ZN4core9panicking5panic17h4241c5ccea17facaE([0 x i8]* noundef nonnull align 1 bitcast ([33 x i8]* @str.1 to [0 x i8]*), i64 33, %\"core::panic::location::Location\"* noundef align 8 dereferenceable(24) bitcast (<{ i8*, [16 x i8] }>* @alloc50 to %\"core::panic::location::Location\"*)) #7\n  unreachable\n", llvm_type: "label" }))
IF STATEMENT
terminator is InstructionValue { instruction_value: Value { name: "", address: 0x55a6cc727460, is_const: false, is_null: false, is_undef: false, llvm_value: "  br i1 %_18, label %bb13, label %bb14", llvm_type: "void" } }
Operand 0 is Some(Left(IntValue(IntValue { int_value: Value { name: "_18", address: 0x55a6cc7273b0, is_const: false, is_null: false, is_undef: false, llvm_value: "  %_18 = xor i1 %_19, true", llvm_type: "i1" } })))
Operand 1 is Some(Right(BasicBlock { address: 0x55a6cc725510, is_const: false, llvm_value: "\nbb14:                                             ; preds = %bb12\n  ret i32 %_12.0\n", llvm_type: "label" }))
Operand 2 is Some(Right(BasicBlock { address: 0x55a6cc725560, is_const: false, llvm_value: "\nbb13:                                             ; preds = %bb12\n  call void @_ZN4core9panicking5panic17h4241c5ccea17facaE([0 x i8]* noundef nonnull align 1 bitcast (<{ [23 x i8] }>* @alloc53 to [0 x i8]*), i64 23, %\"core::panic::location::Location\"* noundef align 8 dereferenceable(24) bitcast (<{ i8*, [16 x i8] }>* @alloc55 to %\"core::panic::location::Location\"*)) #7\n  unreachable\n", llvm_type: "label" }))
[2mJan 15 20:18:37.142[0m [34mDEBUG[0m wombat_symx: Unsupported Call function "_ZN4core9panicking5panic17h4241c5ccea17facaE"
IF HAS NUM OPERANDS 3
IF HAS TERMINATOR InstructionValue { instruction_value: Value { name: "", address: 0x55a6cc727460, is_const: false, is_null: false, is_undef: false, llvm_value: "  br i1 %_18, label %bb13, label %bb14", llvm_type: "void" } }
IF HAS NODE "bb13"
TEST 123 "  %_18 = xor i1 %_19, true"
IF HAS TARGET VAL true
IF HAS TARGET VAL VAR true
IF HAS SWITCH VAR %_18
IF HAS DISCRIMINANT IntValue(IntValue { int_value: Value { name: "_18", address: 0x55a6cc7273b0, is_const: false, is_null: false, is_undef: false, llvm_value: "  %_18 = xor i1 %_19, true", llvm_type: "i1" } })
IF HAS ENTRY CONDITION (= %_18 true)
IF HAS NUM OPERANDS 3
IF HAS TERMINATOR InstructionValue { instruction_value: Value { name: "", address: 0x55a6cc727460, is_const: false, is_null: false, is_undef: false, llvm_value: "  br i1 %_18, label %bb13, label %bb14", llvm_type: "void" } }
IF HAS NODE "bb14"
TEST 123 "  %_18 = xor i1 %_19, true"
IF HAS TARGET VAL false
IF HAS TARGET VAL VAR false
IF HAS SWITCH VAR %_18
IF HAS DISCRIMINANT IntValue(IntValue { int_value: Value { name: "_18", address: 0x55a6cc7273b0, is_const: false, is_null: false, is_undef: false, llvm_value: "  %_18 = xor i1 %_19, true", llvm_type: "i1" } })
IF HAS ENTRY CONDITION (= %_18 false)
[2mJan 15 20:18:37.143[0m [34mDEBUG[0m wombat_symx: Unsupported Call function "_ZN4core9panicking5panic17h4241c5ccea17facaE"
IF HAS NUM OPERANDS 3
IF HAS TERMINATOR InstructionValue { instruction_value: Value { name: "", address: 0x55a6cc726ac0, is_const: false, is_null: false, is_undef: false, llvm_value: "  br i1 %_17.1, label %panic3, label %bb12, !prof !3", llvm_type: "void" } }
IF HAS NODE "panic3"
TEST 123 "  %_17.1 = extractvalue { i32, i1 } %3, 1"
IF HAS TARGET VAL true
IF HAS TARGET VAL VAR true
IF HAS SWITCH VAR %_17.1
IF HAS DISCRIMINANT IntValue(IntValue { int_value: Value { name: "_17.1", address: 0x55a6cc726930, is_const: false, is_null: false, is_undef: false, llvm_value: "  %_17.1 = extractvalue { i32, i1 } %3, 1", llvm_type: "i1" } })
IF HAS ENTRY CONDITION (= %_17.1 true)
IF HAS NUM OPERANDS 3
IF HAS TERMINATOR InstructionValue { instruction_value: Value { name: "", address: 0x55a6cc727460, is_const: false, is_null: false, is_undef: false, llvm_value: "  br i1 %_18, label %bb13, label %bb14", llvm_type: "void" } }
IF HAS NODE "bb14"
TEST 123 "  %_18 = xor i1 %_19, true"
IF HAS TARGET VAL false
IF HAS TARGET VAL VAR false
IF HAS SWITCH VAR %_18
IF HAS DISCRIMINANT IntValue(IntValue { int_value: Value { name: "_18", address: 0x55a6cc7273b0, is_const: false, is_null: false, is_undef: false, llvm_value: "  %_18 = xor i1 %_19, true", llvm_type: "i1" } })
IF HAS ENTRY CONDITION (= %_18 false)
IF HAS NUM OPERANDS 3
IF HAS TERMINATOR InstructionValue { instruction_value: Value { name: "", address: 0x55a6cc727460, is_const: false, is_null: false, is_undef: false, llvm_value: "  br i1 %_18, label %bb13, label %bb14", llvm_type: "void" } }
IF HAS NODE "bb13"
TEST 123 "  %_18 = xor i1 %_19, true"
IF HAS TARGET VAL true
IF HAS TARGET VAL VAR true
IF HAS SWITCH VAR %_18
IF HAS DISCRIMINANT IntValue(IntValue { int_value: Value { name: "_18", address: 0x55a6cc7273b0, is_const: false, is_null: false, is_undef: false, llvm_value: "  %_18 = xor i1 %_19, true", llvm_type: "i1" } })
IF HAS ENTRY CONDITION (= %_18 true)
TEST 123 "  %_19 = icmp sgt i32 %_12.0, %spec.select"
TEST 123 "i1 true"
TEST 123 "  %_18 = xor i1 %_19, true"
TEST 123 "  %_19 = icmp sgt i32 %_12.0, %spec.select"
TEST 123 "  %_12.0 = phi i32 [ %_15.0, %bb8 ], [ %_17.0, %bb10 ]"
TEST 123 "  %spec.select = select i1 %_4, i32 2147483643, i32 %0"
IF HAS NUM OPERANDS 3
IF HAS TERMINATOR InstructionValue { instruction_value: Value { name: "", address: 0x55a6cc726e80, is_const: false, is_null: false, is_undef: false, llvm_value: "  br i1 %_15.1, label %panic2, label %bb12, !prof !3", llvm_type: "void" } }
IF HAS NODE "bb12"
TEST 123 "  %_15.1 = extractvalue { i32, i1 } %4, 1"
IF HAS TARGET VAL false
IF HAS TARGET VAL VAR false
IF HAS SWITCH VAR %_15.1
IF HAS DISCRIMINANT IntValue(IntValue { int_value: Value { name: "_15.1", address: 0x55a6cc726cf0, is_const: false, is_null: false, is_undef: false, llvm_value: "  %_15.1 = extractvalue { i32, i1 } %4, 1", llvm_type: "i1" } })
IF HAS ENTRY CONDITION (= %_15.1 false)
IF HAS NUM OPERANDS 3
IF HAS TERMINATOR InstructionValue { instruction_value: Value { name: "", address: 0x55a6cc726ac0, is_const: false, is_null: false, is_undef: false, llvm_value: "  br i1 %_17.1, label %panic3, label %bb12, !prof !3", llvm_type: "void" } }
IF HAS NODE "bb12"
TEST 123 "  %_17.1 = extractvalue { i32, i1 } %3, 1"
IF HAS TARGET VAL false
IF HAS TARGET VAL VAR false
IF HAS SWITCH VAR %_17.1
IF HAS DISCRIMINANT IntValue(IntValue { int_value: Value { name: "_17.1", address: 0x55a6cc726930, is_const: false, is_null: false, is_undef: false, llvm_value: "  %_17.1 = extractvalue { i32, i1 } %3, 1", llvm_type: "i1" } })
IF HAS ENTRY CONDITION (= %_17.1 false)
[2mJan 15 20:18:37.145[0m [34mDEBUG[0m wombat_symx: Unsupported Call function "_ZN4core9panicking5panic17h4241c5ccea17facaE"
IF HAS NUM OPERANDS 3
IF HAS TERMINATOR InstructionValue { instruction_value: Value { name: "", address: 0x55a6cc726e80, is_const: false, is_null: false, is_undef: false, llvm_value: "  br i1 %_15.1, label %panic2, label %bb12, !prof !3", llvm_type: "void" } }
IF HAS NODE "panic2"
TEST 123 "  %_15.1 = extractvalue { i32, i1 } %4, 1"
IF HAS TARGET VAL true
IF HAS TARGET VAL VAR true
IF HAS SWITCH VAR %_15.1
IF HAS DISCRIMINANT IntValue(IntValue { int_value: Value { name: "_15.1", address: 0x55a6cc726cf0, is_const: false, is_null: false, is_undef: false, llvm_value: "  %_15.1 = extractvalue { i32, i1 } %4, 1", llvm_type: "i1" } })
IF HAS ENTRY CONDITION (= %_15.1 true)
IF HAS NUM OPERANDS 3
IF HAS TERMINATOR InstructionValue { instruction_value: Value { name: "", address: 0x55a6cc726e80, is_const: false, is_null: false, is_undef: false, llvm_value: "  br i1 %_15.1, label %panic2, label %bb12, !prof !3", llvm_type: "void" } }
IF HAS NODE "bb12"
TEST 123 "  %_15.1 = extractvalue { i32, i1 } %4, 1"
IF HAS TARGET VAL false
IF HAS TARGET VAL VAR false
IF HAS SWITCH VAR %_15.1
IF HAS DISCRIMINANT IntValue(IntValue { int_value: Value { name: "_15.1", address: 0x55a6cc726cf0, is_const: false, is_null: false, is_undef: false, llvm_value: "  %_15.1 = extractvalue { i32, i1 } %4, 1", llvm_type: "i1" } })
IF HAS ENTRY CONDITION (= %_15.1 false)
TEST 123 "  %_12.0 = phi i32 [ %_15.0, %bb8 ], [ %_17.0, %bb10 ]"
TEST 123 "  %_15.0 = extractvalue { i32, i1 } %4, 0"
IF HAS NUM OPERANDS 3
IF HAS TERMINATOR InstructionValue { instruction_value: Value { name: "", address: 0x55a6cc726e80, is_const: false, is_null: false, is_undef: false, llvm_value: "  br i1 %_15.1, label %panic2, label %bb12, !prof !3", llvm_type: "void" } }
IF HAS NODE "panic2"
TEST 123 "  %_15.1 = extractvalue { i32, i1 } %4, 1"
IF HAS TARGET VAL true
IF HAS TARGET VAL VAR true
IF HAS SWITCH VAR %_15.1
IF HAS DISCRIMINANT IntValue(IntValue { int_value: Value { name: "_15.1", address: 0x55a6cc726cf0, is_const: false, is_null: false, is_undef: false, llvm_value: "  %_15.1 = extractvalue { i32, i1 } %4, 1", llvm_type: "i1" } })
IF HAS ENTRY CONDITION (= %_15.1 true)
TEST 123 "  %_15.1 = extractvalue { i32, i1 } %4, 1"
TEST 123 "  %4 = call { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %r.0, i32 1)"
TEST 123 "  %_15.0 = extractvalue { i32, i1 } %4, 0"
TEST 123 "  %4 = call { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %r.0, i32 1)"
TEST 123 "  %r.0 = phi i32 [ %_9.0, %bb3 ], [ %_11.0, %bb5 ]"
TEST 123 "i32 1"
TEST 123 "  %4 = call { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %r.0, i32 1)"
TEST 123 "  %4 = call { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %r.0, i32 1)"
IF HAS NUM OPERANDS 3
IF HAS TERMINATOR InstructionValue { instruction_value: Value { name: "", address: 0x55a6cc7264d0, is_const: false, is_null: false, is_undef: false, llvm_value: "  br i1 %c2, label %bb8, label %bb10", llvm_type: "void" } }
IF HAS NODE "bb8"
TEST 123 "i1 %c2"
IF HAS TARGET VAL true
IF HAS TARGET VAL VAR true
IF HAS SWITCH VAR %c2
IF HAS DISCRIMINANT IntValue(IntValue { int_value: Value { name: "c2", address: 0x55a6cc71e078, is_const: false, is_null: false, is_undef: false, llvm_value: "i1 %c2", llvm_type: "i1" } })
IF HAS ENTRY CONDITION (= %c2 true)
IF HAS NUM OPERANDS 3
IF HAS TERMINATOR InstructionValue { instruction_value: Value { name: "", address: 0x55a6cc726ac0, is_const: false, is_null: false, is_undef: false, llvm_value: "  br i1 %_17.1, label %panic3, label %bb12, !prof !3", llvm_type: "void" } }
IF HAS NODE "bb12"
TEST 123 "  %_17.1 = extractvalue { i32, i1 } %3, 1"
IF HAS TARGET VAL false
IF HAS TARGET VAL VAR false
IF HAS SWITCH VAR %_17.1
IF HAS DISCRIMINANT IntValue(IntValue { int_value: Value { name: "_17.1", address: 0x55a6cc726930, is_const: false, is_null: false, is_undef: false, llvm_value: "  %_17.1 = extractvalue { i32, i1 } %3, 1", llvm_type: "i1" } })
IF HAS ENTRY CONDITION (= %_17.1 false)
TEST 123 "  %_12.0 = phi i32 [ %_15.0, %bb8 ], [ %_17.0, %bb10 ]"
TEST 123 "  %_17.0 = extractvalue { i32, i1 } %3, 0"
IF HAS NUM OPERANDS 3
IF HAS TERMINATOR InstructionValue { instruction_value: Value { name: "", address: 0x55a6cc726ac0, is_const: false, is_null: false, is_undef: false, llvm_value: "  br i1 %_17.1, label %panic3, label %bb12, !prof !3", llvm_type: "void" } }
IF HAS NODE "panic3"
TEST 123 "  %_17.1 = extractvalue { i32, i1 } %3, 1"
IF HAS TARGET VAL true
IF HAS TARGET VAL VAR true
IF HAS SWITCH VAR %_17.1
IF HAS DISCRIMINANT IntValue(IntValue { int_value: Value { name: "_17.1", address: 0x55a6cc726930, is_const: false, is_null: false, is_undef: false, llvm_value: "  %_17.1 = extractvalue { i32, i1 } %3, 1", llvm_type: "i1" } })
IF HAS ENTRY CONDITION (= %_17.1 true)
TEST 123 "  %_17.1 = extractvalue { i32, i1 } %3, 1"
TEST 123 "  %3 = call { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %r.0, i32 2)"
TEST 123 "  %_17.0 = extractvalue { i32, i1 } %3, 0"
TEST 123 "  %3 = call { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %r.0, i32 2)"
TEST 123 "  %r.0 = phi i32 [ %_9.0, %bb3 ], [ %_11.0, %bb5 ]"
TEST 123 "i32 2"
TEST 123 "  %3 = call { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %r.0, i32 2)"
TEST 123 "  %3 = call { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %r.0, i32 2)"
IF HAS NUM OPERANDS 3
IF HAS TERMINATOR InstructionValue { instruction_value: Value { name: "", address: 0x55a6cc7264d0, is_const: false, is_null: false, is_undef: false, llvm_value: "  br i1 %c2, label %bb8, label %bb10", llvm_type: "void" } }
IF HAS NODE "bb10"
TEST 123 "i1 %c2"
IF HAS TARGET VAL false
IF HAS TARGET VAL VAR false
IF HAS SWITCH VAR %c2
IF HAS DISCRIMINANT IntValue(IntValue { int_value: Value { name: "c2", address: 0x55a6cc71e078, is_const: false, is_null: false, is_undef: false, llvm_value: "i1 %c2", llvm_type: "i1" } })
IF HAS ENTRY CONDITION (= %c2 false)
[2mJan 15 20:18:37.150[0m [34mDEBUG[0m wombat_symx: Unsupported Call function "_ZN4core9panicking5panic17h4241c5ccea17facaE"
IF HAS NUM OPERANDS 3
IF HAS TERMINATOR InstructionValue { instruction_value: Value { name: "", address: 0x55a6cc725f60, is_const: false, is_null: false, is_undef: false, llvm_value: "  br i1 %_11.1, label %panic1, label %bb7, !prof !3", llvm_type: "void" } }
IF HAS NODE "panic1"
TEST 123 "  %_11.1 = extractvalue { i32, i1 } %1, 1"
IF HAS TARGET VAL true
IF HAS TARGET VAL VAR true
IF HAS SWITCH VAR %_11.1
IF HAS DISCRIMINANT IntValue(IntValue { int_value: Value { name: "_11.1", address: 0x55a6cc725dd0, is_const: false, is_null: false, is_undef: false, llvm_value: "  %_11.1 = extractvalue { i32, i1 } %1, 1", llvm_type: "i1" } })
IF HAS ENTRY CONDITION (= %_11.1 true)
IF HAS NUM OPERANDS 3
IF HAS TERMINATOR InstructionValue { instruction_value: Value { name: "", address: 0x55a6cc7264d0, is_const: false, is_null: false, is_undef: false, llvm_value: "  br i1 %c2, label %bb8, label %bb10", llvm_type: "void" } }
IF HAS NODE "bb10"
TEST 123 "i1 %c2"
IF HAS TARGET VAL false
IF HAS TARGET VAL VAR false
IF HAS SWITCH VAR %c2
IF HAS DISCRIMINANT IntValue(IntValue { int_value: Value { name: "c2", address: 0x55a6cc71e078, is_const: false, is_null: false, is_undef: false, llvm_value: "i1 %c2", llvm_type: "i1" } })
IF HAS ENTRY CONDITION (= %c2 false)
IF HAS NUM OPERANDS 3
IF HAS TERMINATOR InstructionValue { instruction_value: Value { name: "", address: 0x55a6cc7264d0, is_const: false, is_null: false, is_undef: false, llvm_value: "  br i1 %c2, label %bb8, label %bb10", llvm_type: "void" } }
IF HAS NODE "bb8"
TEST 123 "i1 %c2"
IF HAS TARGET VAL true
IF HAS TARGET VAL VAR true
IF HAS SWITCH VAR %c2
IF HAS DISCRIMINANT IntValue(IntValue { int_value: Value { name: "c2", address: 0x55a6cc71e078, is_const: false, is_null: false, is_undef: false, llvm_value: "i1 %c2", llvm_type: "i1" } })
IF HAS ENTRY CONDITION (= %c2 true)
IF HAS NUM OPERANDS 3
IF HAS TERMINATOR InstructionValue { instruction_value: Value { name: "", address: 0x55a6cc725f60, is_const: false, is_null: false, is_undef: false, llvm_value: "  br i1 %_11.1, label %panic1, label %bb7, !prof !3", llvm_type: "void" } }
IF HAS NODE "bb7"
TEST 123 "  %_11.1 = extractvalue { i32, i1 } %1, 1"
IF HAS TARGET VAL false
IF HAS TARGET VAL VAR false
IF HAS SWITCH VAR %_11.1
IF HAS DISCRIMINANT IntValue(IntValue { int_value: Value { name: "_11.1", address: 0x55a6cc725dd0, is_const: false, is_null: false, is_undef: false, llvm_value: "  %_11.1 = extractvalue { i32, i1 } %1, 1", llvm_type: "i1" } })
IF HAS ENTRY CONDITION (= %_11.1 false)
IF HAS NUM OPERANDS 3
IF HAS TERMINATOR InstructionValue { instruction_value: Value { name: "", address: 0x55a6cc726320, is_const: false, is_null: false, is_undef: false, llvm_value: "  br i1 %_9.1, label %panic, label %bb7, !prof !3", llvm_type: "void" } }
IF HAS NODE "bb7"
TEST 123 "  %_9.1 = extractvalue { i32, i1 } %2, 1"
IF HAS TARGET VAL false
IF HAS TARGET VAL VAR false
IF HAS SWITCH VAR %_9.1
IF HAS DISCRIMINANT IntValue(IntValue { int_value: Value { name: "_9.1", address: 0x55a6cc726190, is_const: false, is_null: false, is_undef: false, llvm_value: "  %_9.1 = extractvalue { i32, i1 } %2, 1", llvm_type: "i1" } })
IF HAS ENTRY CONDITION (= %_9.1 false)
[2mJan 15 20:18:37.153[0m [34mDEBUG[0m wombat_symx: Unsupported Call function "_ZN4core9panicking5panic17h4241c5ccea17facaE"
IF HAS NUM OPERANDS 3
IF HAS TERMINATOR InstructionValue { instruction_value: Value { name: "", address: 0x55a6cc726320, is_const: false, is_null: false, is_undef: false, llvm_value: "  br i1 %_9.1, label %panic, label %bb7, !prof !3", llvm_type: "void" } }
IF HAS NODE "panic"
TEST 123 "  %_9.1 = extractvalue { i32, i1 } %2, 1"
IF HAS TARGET VAL true
IF HAS TARGET VAL VAR true
IF HAS SWITCH VAR %_9.1
IF HAS DISCRIMINANT IntValue(IntValue { int_value: Value { name: "_9.1", address: 0x55a6cc726190, is_const: false, is_null: false, is_undef: false, llvm_value: "  %_9.1 = extractvalue { i32, i1 } %2, 1", llvm_type: "i1" } })
IF HAS ENTRY CONDITION (= %_9.1 true)
IF HAS NUM OPERANDS 3
IF HAS TERMINATOR InstructionValue { instruction_value: Value { name: "", address: 0x55a6cc726320, is_const: false, is_null: false, is_undef: false, llvm_value: "  br i1 %_9.1, label %panic, label %bb7, !prof !3", llvm_type: "void" } }
IF HAS NODE "bb7"
TEST 123 "  %_9.1 = extractvalue { i32, i1 } %2, 1"
IF HAS TARGET VAL false
IF HAS TARGET VAL VAR false
IF HAS SWITCH VAR %_9.1
IF HAS DISCRIMINANT IntValue(IntValue { int_value: Value { name: "_9.1", address: 0x55a6cc726190, is_const: false, is_null: false, is_undef: false, llvm_value: "  %_9.1 = extractvalue { i32, i1 } %2, 1", llvm_type: "i1" } })
IF HAS ENTRY CONDITION (= %_9.1 false)
TEST 123 "  %r.0 = phi i32 [ %_9.0, %bb3 ], [ %_11.0, %bb5 ]"
TEST 123 "  %_9.0 = extractvalue { i32, i1 } %2, 0"
IF HAS NUM OPERANDS 3
IF HAS TERMINATOR InstructionValue { instruction_value: Value { name: "", address: 0x55a6cc726320, is_const: false, is_null: false, is_undef: false, llvm_value: "  br i1 %_9.1, label %panic, label %bb7, !prof !3", llvm_type: "void" } }
IF HAS NODE "panic"
TEST 123 "  %_9.1 = extractvalue { i32, i1 } %2, 1"
IF HAS TARGET VAL true
IF HAS TARGET VAL VAR true
IF HAS SWITCH VAR %_9.1
IF HAS DISCRIMINANT IntValue(IntValue { int_value: Value { name: "_9.1", address: 0x55a6cc726190, is_const: false, is_null: false, is_undef: false, llvm_value: "  %_9.1 = extractvalue { i32, i1 } %2, 1", llvm_type: "i1" } })
IF HAS ENTRY CONDITION (= %_9.1 true)
TEST 123 "  %_9.1 = extractvalue { i32, i1 } %2, 1"
TEST 123 "  %2 = call { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %spec.select, i32 3)"
TEST 123 "  %_9.0 = extractvalue { i32, i1 } %2, 0"
TEST 123 "  %2 = call { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %spec.select, i32 3)"
TEST 123 "  %spec.select = select i1 %_4, i32 2147483643, i32 %0"
TEST 123 "i32 3"
TEST 123 "  %2 = call { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %spec.select, i32 3)"
TEST 123 "  %2 = call { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %spec.select, i32 3)"
IF HAS NUM OPERANDS 3
IF HAS TERMINATOR InstructionValue { instruction_value: Value { name: "", address: 0x55a6cc725aa0, is_const: false, is_null: false, is_undef: false, llvm_value: "  br i1 %c1, label %bb3, label %bb5", llvm_type: "void" } }
IF HAS NODE "bb3"
TEST 123 "i1 %c1"
IF HAS TARGET VAL true
IF HAS TARGET VAL VAR true
IF HAS SWITCH VAR %c1
IF HAS DISCRIMINANT IntValue(IntValue { int_value: Value { name: "c1", address: 0x55a6cc71e050, is_const: false, is_null: false, is_undef: false, llvm_value: "i1 %c1", llvm_type: "i1" } })
IF HAS ENTRY CONDITION (= %c1 true)
IF HAS NUM OPERANDS 3
IF HAS TERMINATOR InstructionValue { instruction_value: Value { name: "", address: 0x55a6cc725f60, is_const: false, is_null: false, is_undef: false, llvm_value: "  br i1 %_11.1, label %panic1, label %bb7, !prof !3", llvm_type: "void" } }
IF HAS NODE "bb7"
TEST 123 "  %_11.1 = extractvalue { i32, i1 } %1, 1"
IF HAS TARGET VAL false
IF HAS TARGET VAL VAR false
IF HAS SWITCH VAR %_11.1
IF HAS DISCRIMINANT IntValue(IntValue { int_value: Value { name: "_11.1", address: 0x55a6cc725dd0, is_const: false, is_null: false, is_undef: false, llvm_value: "  %_11.1 = extractvalue { i32, i1 } %1, 1", llvm_type: "i1" } })
IF HAS ENTRY CONDITION (= %_11.1 false)
TEST 123 "  %r.0 = phi i32 [ %_9.0, %bb3 ], [ %_11.0, %bb5 ]"
TEST 123 "  %_11.0 = extractvalue { i32, i1 } %1, 0"
IF HAS NUM OPERANDS 3
IF HAS TERMINATOR InstructionValue { instruction_value: Value { name: "", address: 0x55a6cc725f60, is_const: false, is_null: false, is_undef: false, llvm_value: "  br i1 %_11.1, label %panic1, label %bb7, !prof !3", llvm_type: "void" } }
IF HAS NODE "panic1"
TEST 123 "  %_11.1 = extractvalue { i32, i1 } %1, 1"
IF HAS TARGET VAL true
IF HAS TARGET VAL VAR true
IF HAS SWITCH VAR %_11.1
IF HAS DISCRIMINANT IntValue(IntValue { int_value: Value { name: "_11.1", address: 0x55a6cc725dd0, is_const: false, is_null: false, is_undef: false, llvm_value: "  %_11.1 = extractvalue { i32, i1 } %1, 1", llvm_type: "i1" } })
IF HAS ENTRY CONDITION (= %_11.1 true)
TEST 123 "  %_11.1 = extractvalue { i32, i1 } %1, 1"
TEST 123 "  %1 = call { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %spec.select, i32 4)"
TEST 123 "  %_11.0 = extractvalue { i32, i1 } %1, 0"
TEST 123 "  %1 = call { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %spec.select, i32 4)"
TEST 123 "  %spec.select = select i1 %_4, i32 2147483643, i32 %0"
TEST 123 "i32 4"
TEST 123 "  %1 = call { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %spec.select, i32 4)"
TEST 123 "  %1 = call { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %spec.select, i32 4)"
IF HAS NUM OPERANDS 3
IF HAS TERMINATOR InstructionValue { instruction_value: Value { name: "", address: 0x55a6cc725aa0, is_const: false, is_null: false, is_undef: false, llvm_value: "  br i1 %c1, label %bb3, label %bb5", llvm_type: "void" } }
IF HAS NODE "bb5"
TEST 123 "i1 %c1"
IF HAS TARGET VAL false
IF HAS TARGET VAL VAR false
IF HAS SWITCH VAR %c1
IF HAS DISCRIMINANT IntValue(IntValue { int_value: Value { name: "c1", address: 0x55a6cc71e050, is_const: false, is_null: false, is_undef: false, llvm_value: "i1 %c1", llvm_type: "i1" } })
IF HAS ENTRY CONDITION (= %c1 false)
IF HAS NUM OPERANDS 3
IF HAS TERMINATOR InstructionValue { instruction_value: Value { name: "", address: 0x55a6cc725aa0, is_const: false, is_null: false, is_undef: false, llvm_value: "  br i1 %c1, label %bb3, label %bb5", llvm_type: "void" } }
IF HAS NODE "bb5"
TEST 123 "i1 %c1"
IF HAS TARGET VAL false
IF HAS TARGET VAL VAR false
IF HAS SWITCH VAR %c1
IF HAS DISCRIMINANT IntValue(IntValue { int_value: Value { name: "c1", address: 0x55a6cc71e050, is_const: false, is_null: false, is_undef: false, llvm_value: "i1 %c1", llvm_type: "i1" } })
IF HAS ENTRY CONDITION (= %c1 false)
IF HAS NUM OPERANDS 3
IF HAS TERMINATOR InstructionValue { instruction_value: Value { name: "", address: 0x55a6cc725aa0, is_const: false, is_null: false, is_undef: false, llvm_value: "  br i1 %c1, label %bb3, label %bb5", llvm_type: "void" } }
IF HAS NODE "bb3"
TEST 123 "i1 %c1"
IF HAS TARGET VAL true
IF HAS TARGET VAL VAR true
IF HAS SWITCH VAR %c1
IF HAS DISCRIMINANT IntValue(IntValue { int_value: Value { name: "c1", address: 0x55a6cc71e050, is_const: false, is_null: false, is_undef: false, llvm_value: "i1 %c1", llvm_type: "i1" } })
IF HAS ENTRY CONDITION (= %c1 true)
TEST 123 "  %_4 = icmp sgt i32 %0, 2147483643"
TEST 123 "i32 2147483643"
TEST 123 "i32 %0"
TEST 123 "  %spec.select = select i1 %_4, i32 2147483643, i32 %0"
TEST 123 "  %spec.select = select i1 %_4, i32 2147483643, i32 %0"
TEST 123 "  %_4 = icmp sgt i32 %0, 2147483643"
TEST 123 "i32 %0"
TEST 123 "i32 2147483643"
TEST 123 "i32 %0"
[2mJan 15 20:18:37.158[0m [34mDEBUG[0m wombat_symx: (declare-fun panic_var () Bool)
(declare-fun common_end () Bool)
(declare-fun %_18 () Bool)
(declare-fun bb13 () Bool)
(declare-fun bb14 () Bool)
(declare-fun %_17.1 () Bool)
(declare-fun panic3 () Bool)
(declare-fun const_true () Bool)
(declare-fun %_19 () Bool)
(declare-fun %spec.select () Int)
(declare-fun %_12.0 () Int)
(declare-fun %_15.1 () Bool)
(declare-fun bb12 () Bool)
(declare-fun panic2 () Bool)
(declare-fun const_1 () Int)
(declare-fun %_15.0 () Int)
(declare-fun %4.1 () Bool)
(declare-fun %4.0 () Int)
(declare-fun %r.0 () Int)
(declare-fun %c2 () Bool)
(declare-fun bb8 () Bool)
(declare-fun const_2 () Int)
(declare-fun %_17.0 () Int)
(declare-fun %3.1 () Bool)
(declare-fun %3.0 () Int)
(declare-fun bb10 () Bool)
(declare-fun %_11.1 () Bool)
(declare-fun panic1 () Bool)
(declare-fun %_9.1 () Bool)
(declare-fun bb7 () Bool)
(declare-fun panic () Bool)
(declare-fun const_3 () Int)
(declare-fun %_9.0 () Int)
(declare-fun %2.1 () Bool)
(declare-fun %2.0 () Int)
(declare-fun %c1 () Bool)
(declare-fun bb3 () Bool)
(declare-fun const_4 () Int)
(declare-fun %_11.0 () Int)
(declare-fun %1.1 () Bool)
(declare-fun %1.0 () Int)
(declare-fun bb5 () Bool)
(declare-fun const_2147483643 () Int)
(declare-fun %0 () Int)
(declare-fun %_4 () Bool)
(declare-fun start () Bool)
(assert (= common_end
   (=> (and true true true true true true true) (and (not panic_var) true))))
(assert (= bb13
   (=> (and true (= %_18 true)) (=> (= panic_var true) (and true common_end)))))
(assert (= bb14
   (=> (and true (= %_18 false)) (=> (= panic_var false) (and true common_end)))))
(assert (= panic3
   (=> (and true (= %_17.1 true)) (=> (= panic_var true) (and true common_end)))))
(assert (= const_true true))
(assert (let ((a!1 (=> (= %_19 (> %_12.0 %spec.select))
               (=> (= %_18 (xor %_19 const_true)) (and true bb14 bb13)))))
  (= bb12 (=> (and true (= %_15.1 false) (= %_17.1 false)) a!1))))
(assert (= panic2
   (=> (and true (= %_15.1 true)) (=> (= panic_var true) (and true common_end)))))
(assert (= const_1 1))
(assert (let ((a!1 (> (- %r.0 const_1)
              (ite (bvslt #x7fffffff #x00000000)
                   (- (bv2int #x7fffffff) 4294967296)
                   (bv2int #x7fffffff))))
      (a!2 (< (- %r.0 const_1)
              (ite (bvslt #x80000000 #x00000000)
                   (- (bv2int #x80000000) 4294967296)
                   (bv2int #x80000000))))
      (a!3 (=> (= %_15.1 %4.1)
               (=> (=> (= %_15.1 false) (= %_12.0 %_15.0))
                   (and true bb12 panic2)))))
(let ((a!4 (=> (and (= %4.0 (- %r.0 const_1)) (= %4.1 (or a!1 a!2)))
               (=> (= %_15.0 %4.0) a!3))))
  (= bb8 (=> (and true (= %c2 true)) a!4)))))
(assert (= const_2 2))
(assert (let ((a!1 (> (- %r.0 const_2)
              (ite (bvslt #x7fffffff #x00000000)
                   (- (bv2int #x7fffffff) 4294967296)
                   (bv2int #x7fffffff))))
      (a!2 (< (- %r.0 const_2)
              (ite (bvslt #x80000000 #x00000000)
                   (- (bv2int #x80000000) 4294967296)
                   (bv2int #x80000000))))
      (a!3 (=> (= %_17.1 %3.1)
               (=> (=> (= %_17.1 false) (= %_12.0 %_17.0))
                   (and true bb12 panic3)))))
(let ((a!4 (=> (and (= %3.0 (- %r.0 const_2)) (= %3.1 (or a!1 a!2)))
               (=> (= %_17.0 %3.0) a!3))))
  (= bb10 (=> (and true (= %c2 false)) a!4)))))
(assert (= panic1
   (=> (and true (= %_11.1 true)) (=> (= panic_var true) (and true common_end)))))
(assert (= bb7 (=> (and true (= %_11.1 false) (= %_9.1 false)) (and true bb10 bb8))))
(assert (= panic
   (=> (and true (= %_9.1 true)) (=> (= panic_var true) (and true common_end)))))
(assert (= const_3 3))
(assert (let ((a!1 (> (+ %spec.select const_3)
              (ite (bvslt #x7fffffff #x00000000)
                   (- (bv2int #x7fffffff) 4294967296)
                   (bv2int #x7fffffff))))
      (a!2 (< (+ %spec.select const_3)
              (ite (bvslt #x80000000 #x00000000)
                   (- (bv2int #x80000000) 4294967296)
                   (bv2int #x80000000))))
      (a!3 (=> (= %_9.1 %2.1)
               (=> (=> (= %_9.1 false) (= %r.0 %_9.0)) (and true bb7 panic)))))
(let ((a!4 (=> (and (= %2.0 (+ %spec.select const_3)) (= %2.1 (or a!1 a!2)))
               (=> (= %_9.0 %2.0) a!3))))
  (= bb3 (=> (and true (= %c1 true)) a!4)))))
(assert (= const_4 4))
(assert (let ((a!1 (> (+ %spec.select const_4)
              (ite (bvslt #x7fffffff #x00000000)
                   (- (bv2int #x7fffffff) 4294967296)
                   (bv2int #x7fffffff))))
      (a!2 (< (+ %spec.select const_4)
              (ite (bvslt #x80000000 #x00000000)
                   (- (bv2int #x80000000) 4294967296)
                   (bv2int #x80000000))))
      (a!3 (=> (= %_11.1 %1.1)
               (=> (=> (= %_11.1 false) (= %r.0 %_11.0)) (and true bb7 panic1)))))
(let ((a!4 (=> (and (= %1.0 (+ %spec.select const_4)) (= %1.1 (or a!1 a!2)))
               (=> (= %_11.0 %1.0) a!3))))
  (= bb5 (=> (and true (= %c1 false)) a!4)))))
(assert (= const_2147483643 2147483643))
(assert (= const_2147483643 2147483643))
(assert (let ((a!1 (=> (and (=> %_4 (= %spec.select const_2147483643))
                    (=> (not %_4) (= %spec.select %0)))
               (and true bb5 bb3))))
(let ((a!2 (=> true (=> (= %_4 (> %0 const_2147483643)) a!1))))
  (= start a!2))))
(assert (let ((a!1 (>= %0
               (ite (bvslt #x80000000 #x00000000)
                    (- (bv2int #x80000000) 4294967296)
                    (bv2int #x80000000))))
      (a!2 (<= %0
               (ite (bvslt #x7fffffff #x00000000)
                    (- (bv2int #x7fffffff) 4294967296)
                    (bv2int #x7fffffff)))))
  (and a!1 a!2)))
(assert (not start))


Function safety: safe

************************************


